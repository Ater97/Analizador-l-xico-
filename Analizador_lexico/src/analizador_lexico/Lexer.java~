/* The following code was generated by JFlex 1.4.3 on 11/10/18 12:39 AM */


package analizador_lexico;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/10/18 12:39 AM from the specification file
 * <tt>D:/GitHub/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\45\1\0\1\53\1\103\22\0\1\52\1\3\1\46"+
    "\2\0\1\10\1\12\1\44\1\37\1\36\1\6\1\5\1\35\1\4"+
    "\1\32\1\7\1\24\1\31\6\27\2\23\1\0\1\34\1\1\1\2"+
    "\1\1\2\0\1\73\1\30\2\26\1\33\1\26\1\101\1\50\1\76"+
    "\2\50\1\77\1\100\1\72\1\50\1\71\1\50\1\75\1\102\4\50"+
    "\1\25\2\50\1\41\1\0\1\40\1\0\1\47\1\0\1\20\1\61"+
    "\1\63\1\57\1\16\1\17\1\62\1\67\1\55\1\50\1\70\1\21"+
    "\1\65\1\56\1\60\1\51\1\50\1\14\1\22\1\13\1\15\1\54"+
    "\1\66\1\64\1\74\1\50\1\43\1\11\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\3\5\2\1\6\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\2\1\1\21\15\6\1\21"+
    "\1\2\2\7\1\0\2\21\1\22\10\6\1\0\1\23"+
    "\2\0\1\7\4\0\1\24\1\0\1\24\1\0\1\6"+
    "\1\25\16\6\1\0\1\7\4\21\6\6\1\26\1\6"+
    "\1\0\1\23\1\0\2\7\1\6\1\27\10\6\1\30"+
    "\4\6\3\0\1\21\1\0\1\31\1\32\1\6\1\33"+
    "\2\6\1\34\2\6\1\35\2\6\1\36\10\6\2\0"+
    "\6\6\1\37\1\40\1\41\1\42\6\6\1\43\1\6"+
    "\1\44\2\6\1\45\3\6\1\46\2\6\1\47\5\6"+
    "\1\50\1\51\2\6\1\52\1\6\1\53\1\54\2\6"+
    "\1\55\1\6\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\210\0\210\0\314\0\314\0\104"+
    "\0\u0110\0\u0154\0\u0198\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\104\0\104\0\104\0\104"+
    "\0\104\0\u0440\0\104\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\104\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\104"+
    "\0\u0990\0\u09d4\0\u03fc\0\u0a18\0\u0a5c\0\104\0\u0aa0\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u04c8\0\u04c8"+
    "\0\u0550\0\u0550\0\u0594\0\u0ee0\0\u0264\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u0264"+
    "\0\u160c\0\u1650\0\u1650\0\u1694\0\u0e14\0\u0e58\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1364\0\u13a8\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u0264\0\u0264\0\u1ba0\0\u0264\0\u1be4\0\u1c28"+
    "\0\u0264\0\u1c6c\0\u1cb0\0\u0264\0\u1cf4\0\u1d38\0\u0264\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1b18"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u0264"+
    "\0\u0264\0\u0264\0\u0264\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u0264\0\u2310\0\u0264\0\u2354\0\u2398\0\u0264\0\u23dc"+
    "\0\u2420\0\u2464\0\u0264\0\u24a8\0\u24ec\0\u0264\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u0264\0\u0264\0\u2684\0\u26c8\0\u0264"+
    "\0\u270c\0\u0264\0\u0264\0\u2750\0\u2794\0\u0264\0\u27d8\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\10\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\16\1\21\1\22\1\23\2\16\1\22\1\16\1\22"+
    "\1\24\1\16\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\16\2\41"+
    "\1\42\1\43\1\44\1\45\1\16\1\46\1\16\1\47"+
    "\2\16\1\50\2\16\1\51\1\52\2\16\1\53\2\16"+
    "\1\54\1\55\1\56\1\57\106\0\1\60\124\0\1\61"+
    "\1\62\2\0\1\61\1\0\1\61\1\63\57\0\1\64"+
    "\1\65\105\0\1\66\104\0\1\66\104\0\1\16\1\67"+
    "\15\16\1\0\1\16\13\0\3\16\2\0\13\16\1\70"+
    "\13\16\14\0\3\16\1\71\13\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\6\16\1\72\10\16\1\0"+
    "\1\16\13\0\3\16\2\0\10\16\1\73\16\16\14\0"+
    "\5\16\1\74\11\16\1\0\1\16\13\0\3\16\2\0"+
    "\4\16\1\75\22\16\14\0\1\76\16\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\17\0\1\77\4\0\2\22"+
    "\2\0\1\22\1\0\1\22\1\100\1\77\15\0\1\101"+
    "\50\0\1\77\4\0\1\102\1\103\1\104\1\0\1\103"+
    "\1\105\1\103\1\100\1\77\15\0\1\101\7\0\1\105"+
    "\2\0\1\104\42\0\2\106\2\0\1\106\1\0\1\106"+
    "\112\0\1\41\105\0\1\41\41\0\44\107\1\110\1\0"+
    "\36\107\22\0\1\36\22\0\1\36\4\0\3\36\26\0"+
    "\1\36\45\111\1\0\1\112\35\111\13\0\10\16\2\0"+
    "\2\16\1\0\1\16\2\0\1\16\13\0\1\113\2\16"+
    "\2\0\27\16\14\0\17\16\1\0\1\16\13\0\3\16"+
    "\2\0\4\16\1\114\22\16\14\0\4\16\1\115\12\16"+
    "\1\0\1\16\13\0\3\16\2\0\2\16\1\116\6\16"+
    "\1\117\15\16\14\0\2\16\1\120\14\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\4\16\1\121\22\16\14\0\1\16"+
    "\1\122\15\16\1\0\1\16\13\0\3\16\2\0\4\16"+
    "\1\123\22\16\14\0\6\16\1\124\10\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\13\16\1\125\13\16\14\0\1\16"+
    "\1\126\15\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\3\16\1\127\13\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\3\16\1\130\13\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\5\16\1\131\11\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\3\16"+
    "\1\132\13\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\3\16\1\133\13\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\46\0\1\57\35\0\1\57\16\0\1\77"+
    "\4\0\2\61\2\0\1\61\1\0\1\61\1\100\1\77"+
    "\66\0\1\77\4\0\1\134\1\135\1\104\1\0\1\135"+
    "\1\105\1\135\1\100\1\77\25\0\1\105\2\0\1\104"+
    "\17\0\6\136\1\137\13\136\1\140\22\136\1\141\5\136"+
    "\2\140\26\136\1\140\45\65\1\0\36\65\13\0\2\16"+
    "\1\142\14\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\17\16\1\0\1\16\13\0\3\16\2\0\1\16"+
    "\1\143\25\16\14\0\1\144\16\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\7\16\1\145\7\16\1\0"+
    "\1\16\13\0\3\16\2\0\27\16\14\0\1\146\16\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\6\16"+
    "\1\147\10\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\1\16\1\150\15\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\1\16\1\151\15\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\5\0\2\152\15\0\2\153"+
    "\2\0\1\153\1\0\1\153\70\0\1\77\4\0\2\100"+
    "\2\0\1\100\1\0\1\100\1\154\1\77\63\0\1\41"+
    "\106\0\1\77\4\0\2\102\2\0\1\102\1\0\1\102"+
    "\1\106\1\77\15\0\1\101\50\0\1\77\4\0\1\102"+
    "\1\103\2\0\1\103\1\0\1\103\1\106\1\77\15\0"+
    "\1\101\50\0\3\155\2\0\2\155\1\0\4\155\1\0"+
    "\1\155\23\0\1\155\1\0\1\155\1\0\1\155\7\0"+
    "\1\155\34\0\1\156\4\0\1\156\70\0\1\77\4\0"+
    "\2\106\2\0\1\106\1\0\1\106\1\154\1\77\63\0"+
    "\17\16\1\0\1\16\13\0\3\16\2\0\1\16\1\157"+
    "\25\16\14\0\1\160\16\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\17\16\1\0\1\16\13\0\2\16"+
    "\1\161\2\0\27\16\14\0\6\16\1\162\10\16\1\0"+
    "\1\16\13\0\3\16\2\0\27\16\14\0\2\16\1\163"+
    "\14\16\1\0\1\16\13\0\3\16\2\0\27\16\14\0"+
    "\3\16\1\164\13\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\17\16\1\0\1\16\13\0\3\16\2\0"+
    "\4\16\1\165\22\16\14\0\5\16\1\166\11\16\1\0"+
    "\1\16\13\0\3\16\2\0\27\16\14\0\17\16\1\0"+
    "\1\16\13\0\3\16\2\0\1\16\1\167\25\16\14\0"+
    "\17\16\1\0\1\16\13\0\3\16\2\0\1\16\1\170"+
    "\25\16\14\0\17\16\1\0\1\16\13\0\3\16\2\0"+
    "\12\16\1\171\14\16\14\0\5\16\1\172\11\16\1\0"+
    "\1\16\13\0\3\16\2\0\27\16\14\0\6\16\1\173"+
    "\10\16\1\0\1\16\13\0\3\16\2\0\27\16\14\0"+
    "\1\174\16\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\1\175\16\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\17\0\1\77\4\0\2\134\2\0\1\134\1\0"+
    "\1\134\1\106\1\77\66\0\1\77\4\0\1\134\1\135"+
    "\2\0\1\135\1\0\1\135\1\106\1\77\50\0\6\176"+
    "\1\177\36\176\1\200\44\176\1\177\1\201\35\176\1\200"+
    "\44\176\1\177\13\176\1\140\22\176\1\141\5\176\2\140"+
    "\26\176\1\140\6\200\1\202\13\200\1\141\22\200\1\141"+
    "\5\200\2\141\26\200\1\141\13\0\3\16\1\203\13\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\7\16"+
    "\1\204\7\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\2\16\1\205\14\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\3\16\1\206\13\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\3\16\1\207\13\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\7\16"+
    "\1\142\7\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\17\16\1\0\1\16\13\0\3\16\2\0\1\16"+
    "\1\210\25\16\24\0\2\153\2\0\1\153\1\0\1\153"+
    "\70\0\1\77\14\0\1\77\63\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\3\16\1\211\23\16\14\0\3\16"+
    "\1\212\13\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\6\16\1\213\10\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\6\16\1\214\10\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\5\16\1\215\21\16\14\0\5\16"+
    "\1\216\11\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\6\16\1\217\10\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\7\16\1\220\7\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\6\16\1\221\10\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\17\16"+
    "\1\0\1\16\13\0\3\16\2\0\2\16\1\222\24\16"+
    "\14\0\17\16\1\0\1\16\13\0\3\16\2\0\17\16"+
    "\1\223\7\16\14\0\17\16\1\0\1\16\13\0\3\16"+
    "\2\0\3\16\1\224\23\16\14\0\6\16\1\225\10\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\15\16"+
    "\1\226\1\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\15\16\1\227\1\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\1\0\6\200\1\202\75\200\6\230\1\231"+
    "\36\230\1\0\36\230\6\200\1\202\1\41\74\200\13\0"+
    "\1\16\1\232\15\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\17\16\1\0\1\16\13\0\3\16\2\0"+
    "\2\16\1\233\24\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\2\16\1\234\24\16\14\0\1\16\1\235"+
    "\15\16\1\0\1\16\13\0\3\16\2\0\27\16\14\0"+
    "\3\16\1\236\13\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\6\16\1\237\10\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\14\16\1\240\12\16\14\0\7\16\1\241"+
    "\7\16\1\0\1\16\13\0\3\16\2\0\27\16\14\0"+
    "\3\16\1\242\13\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\1\243\16\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\1\16\1\244\15\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\22\16\1\245\1\246\3\16\14\0"+
    "\17\16\1\0\1\16\13\0\3\16\2\0\4\16\1\247"+
    "\22\16\14\0\17\16\1\0\1\16\13\0\3\16\2\0"+
    "\20\16\1\250\6\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\20\16\1\251\6\16\1\0\6\230\1\231"+
    "\1\201\35\230\1\0\36\230\13\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\2\16\1\252\24\16\14\0\17\16"+
    "\1\0\1\16\13\0\3\16\2\0\3\16\1\253\23\16"+
    "\14\0\17\16\1\0\1\16\13\0\3\16\2\0\6\16"+
    "\1\254\20\16\14\0\4\16\1\255\12\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\11\16\1\256\15\16\14\0\3\16"+
    "\1\257\13\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\1\16\1\260\15\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\17\16\1\0\1\16\13\0\3\16"+
    "\2\0\2\16\1\261\24\16\14\0\17\16\1\0\1\16"+
    "\13\0\3\16\2\0\1\16\1\262\25\16\14\0\17\16"+
    "\1\0\1\16\13\0\3\16\2\0\7\16\1\263\17\16"+
    "\14\0\1\264\16\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\1\265\16\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\7\16\1\266\7\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\5\16\1\267\11\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\3\16"+
    "\1\270\13\16\1\0\1\16\13\0\3\16\2\0\27\16"+
    "\14\0\5\16\1\271\11\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\1\272\16\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\2\16\1\273\24\16\14\0\3\16\1\274"+
    "\13\16\1\0\1\16\13\0\3\16\2\0\27\16\14\0"+
    "\3\16\1\275\13\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\17\16\1\0\1\16\13\0\3\16\2\0"+
    "\7\16\1\276\17\16\14\0\17\16\1\0\1\16\13\0"+
    "\3\16\2\0\2\16\1\277\24\16\14\0\17\16\1\0"+
    "\1\16\13\0\3\16\2\0\20\16\1\300\6\16\14\0"+
    "\3\16\1\301\13\16\1\0\1\16\13\0\3\16\2\0"+
    "\27\16\14\0\3\16\1\302\13\16\1\0\1\16\13\0"+
    "\3\16\2\0\27\16\14\0\3\16\1\303\13\16\1\0"+
    "\1\16\13\0\3\16\2\0\27\16\14\0\1\304\16\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\14\0\17\16"+
    "\1\0\1\16\13\0\3\16\2\0\6\16\1\305\20\16"+
    "\14\0\7\16\1\306\7\16\1\0\1\16\13\0\3\16"+
    "\2\0\27\16\14\0\3\16\1\307\13\16\1\0\1\16"+
    "\13\0\3\16\2\0\27\16\14\0\1\16\1\310\15\16"+
    "\1\0\1\16\13\0\3\16\2\0\27\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10268];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\14\1\5\11\1\1\1\11"+
    "\5\1\1\11\16\1\1\11\2\1\1\0\2\1\1\11"+
    "\10\1\1\0\1\1\2\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\0\20\1\1\0\15\1\1\0\1\1\1\0"+
    "\21\1\3\0\1\1\1\0\25\1\2\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int linenumber = 0;
    public int columnnumber = 0;
    public String lexeme;
    public int errornumber = 0;
    public int errornumberLength = 0;
    public String Errors = "";
    public void getErrors(String error){
        errornumber++;
       System.out.println( errornumber + " Lexic Message Line: " + linenumber + " Col: " + columnnumber + " Text: " + error);
    }
    public void getIdenterror(String error){
        errornumberLength++;
       System.out.println( errornumberLength + " Lenght Message Line: " + linenumber + " Col: " + columnnumber + " Text: " + error);
    }
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn, yytext());
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return new Symbol(sym.STRING, yyline, yycolumn, yytext());
          }
        case 47: break;
        case 20: 
          { return new Symbol(sym.STRINGCONSTANT, yyline, yycolumn, yytext());
          }
        case 48: break;
        case 40: 
          { return new Symbol(sym.GETBYTE, yyline, yycolumn, yytext());
          }
        case 49: break;
        case 39: 
          { return new Symbol(sym.EXTENDS, yyline, yycolumn, yytext());
          }
        case 50: break;
        case 25: 
          { return new Symbol(sym.BOOLCONSTANT, yyline, yycolumn, yytext());
          }
        case 51: break;
        case 2: 
          { return new Symbol(sym.Comparison_op, yyline, yycolumn, yytext());
          }
        case 52: break;
        case 29: 
          { return new Symbol(sym.NULL, yyline, yycolumn, yytext());
          }
        case 53: break;
        case 18: 
          { return new Symbol(sym.Logical_Op, yyline, yycolumn, yytext());
          }
        case 54: break;
        case 35: 
          { return new Symbol(sym.RETURN, yyline, yycolumn, yytext());
          }
        case 55: break;
        case 34: 
          { return new Symbol(sym.PRINT, yyline, yycolumn, yytext());
          }
        case 56: break;
        case 37: 
          { return new Symbol(sym.DOUBLE, yyline, yycolumn, yytext());
          }
        case 57: break;
        case 26: 
          { return new Symbol(sym.THIS, yyline, yycolumn, yytext());
          }
        case 58: break;
        case 42: 
          { return new Symbol(sym.NEWARRAY, yyline, yycolumn, yytext());
          }
        case 59: break;
        case 27: 
          { return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
          }
        case 60: break;
        case 43: 
          { return new Symbol(sym.READLINE, yyline, yycolumn, yytext());
          }
        case 61: break;
        case 30: 
          { return new Symbol(sym.BOOL, yyline, yycolumn, yytext());
          }
        case 62: break;
        case 44: 
          { return new Symbol(sym.INTERFACE, yyline, yycolumn, yytext());
          }
        case 63: break;
        case 24: 
          { return new Symbol(sym.NEW, yyline, yycolumn, yytext());
          }
        case 64: break;
        case 8: 
          { return new Symbol(sym.Point, yyline, yycolumn, yytext());
          }
        case 65: break;
        case 46: 
          { return new Symbol(sym.READINTEGER, yyline, yycolumn, yytext());
          }
        case 66: break;
        case 9: 
          { return new Symbol(sym.Semicolon, yyline, yycolumn, yytext());
          }
        case 67: break;
        case 14: 
          { return new Symbol(sym.LeftBrace, yyline, yycolumn, yytext());
          }
        case 68: break;
        case 11: 
          { return new Symbol(sym.RightParenthesis, yyline, yycolumn, yytext());
          }
        case 69: break;
        case 7: 
          { return new Symbol(sym.INTCONSTANT, yyline, yycolumn, yytext());
          }
        case 70: break;
        case 22: 
          { return new Symbol(sym.FOR, yyline, yycolumn, yytext());
          }
        case 71: break;
        case 12: 
          { return new Symbol(sym.LeftParenthesis, yyline, yycolumn, yytext());
          }
        case 72: break;
        case 13: 
          { return new Symbol(sym.RightBrace, yyline, yycolumn, yytext());
          }
        case 73: break;
        case 1: 
          { lexeme=yytext();linenumber=yyline;columnnumber=yycolumn;getErrors(lexeme);
          }
        case 74: break;
        case 41: 
          { return new Symbol(sym.SETBYTE, yyline, yycolumn, yytext());
          }
        case 75: break;
        case 38: 
          { return new Symbol(sym.MALLOC, yyline, yycolumn, yytext());
          }
        case 76: break;
        case 6: 
          { lexeme=yytext();
                    if(lexeme.length()<31)
                        return new Symbol(sym.ident, yyline, yycolumn, yytext());
                    linenumber=yyline;
                    columnnumber=yycolumn;
                    String temp = lexeme.substring(0, 30);
                    getIdenterror(temp);
          }
        case 77: break;
        case 23: 
          { return new Symbol(sym.INT, yyline, yycolumn, yytext());
          }
        case 78: break;
        case 5: 
          { return new Symbol(sym.Arithmetic_Op, yyline, yycolumn, yytext());
          }
        case 79: break;
        case 10: 
          { return new Symbol(sym.Comma, yyline, yycolumn, yytext());
          }
        case 80: break;
        case 16: 
          { return new Symbol(sym.LeftBracket, yyline, yycolumn, yytext());
          }
        case 81: break;
        case 4: 
          { return new Symbol(sym.Negation, yyline, yycolumn, yytext());
          }
        case 82: break;
        case 21: 
          { return new Symbol(sym.IF, yyline, yycolumn, yytext());
          }
        case 83: break;
        case 45: 
          { return new Symbol(sym.IMPLEMENTS, yyline, yycolumn, yytext());
          }
        case 84: break;
        case 32: 
          { return new Symbol(sym.CLASS, yyline, yycolumn, yytext());
          }
        case 85: break;
        case 3: 
          { return new Symbol(sym.Equal, yyline, yycolumn, yytext());
          }
        case 86: break;
        case 31: 
          { return new Symbol(sym.BREAK, yyline, yycolumn, yytext());
          }
        case 87: break;
        case 15: 
          { return new Symbol(sym.RightBracket, yyline, yycolumn, yytext());
          }
        case 88: break;
        case 28: 
          { return new Symbol(sym.VOID, yyline, yycolumn, yytext());
          }
        case 89: break;
        case 19: 
          { return new Symbol(sym.DOUBLECONSTANT, yyline, yycolumn, yytext());
          }
        case 90: break;
        case 33: 
          { return new Symbol(sym.WHILE, yyline, yycolumn, yytext());
          }
        case 91: break;
        case 17: 
          { 
          }
        case 92: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
