/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Stuff/Docs/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\73\1\74\1\74\1\74\23\0\1\55\1\70\1\0\1\72"+
    "\1\0\1\62\1\66\1\67\1\67\1\60\1\57\1\0\1\57\1\65"+
    "\1\61\1\64\1\64\6\64\2\64\1\0\1\0\1\54\1\56\1\55"+
    "\1\76\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\7\1\7\1\12\1\13\1\14\1\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\7\1\7\1\7\1\7\1\7\1\0\1\67"+
    "\1\0\1\0\1\23\1\0\1\25\1\37\1\30\1\42\1\35\1\46"+
    "\1\52\1\24\1\34\1\7\1\44\1\26\1\32\1\41\1\31\1\33"+
    "\1\53\1\36\1\40\1\27\1\45\1\50\1\47\1\51\1\43\1\7"+
    "\1\0\1\63\1\0\1\0\6\71\1\75\172\71\u1f28\0\1\74\1\74"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\6\1\1\2\3\1\1\2\4\1\2\2\3\1"+
    "\1\2\3\1\1\2\17\1\6\3\1\0\2\3\1\4"+
    "\41\3\1\5\10\0\1\6\1\0\1\7\1\10\3\0"+
    "\1\11\1\0\1\12\5\3\10\0\40\3\1\4\3\3"+
    "\10\0\1\13\5\3\11\0\15\3\1\4\16\3\6\0"+
    "\1\7\3\3\1\14\10\0\23\3\1\15\5\0\1\3"+
    "\7\0\11\3\2\0\1\14\1\16\1\17\4\0\3\3"+
    "\1\4\2\3\5\0\2\3\1\16\4\0\1\3\12\0"+
    "\1\16\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\176"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a"+
    "\0\u0999\0\176\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\176\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc"+
    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u0333\0\u1332\0\u1371\0\77\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u089d\0\u08dc\0\77\0\u152a\0\u1569"+
    "\0\77\0\u15a8\0\u15e7\0\u091b\0\77\0\u095a\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u05e8\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u152a\0\u2ffd\0\374\0\u303c\0\176\0\u307b\0\u30ba"+
    "\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2"+
    "\0\u36e1\0\77\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b"+
    "\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b"+
    "\0\u3c8a\0\u3cc9\0\77\0\u3d08\0\77\0\u3d47\0\u3d86\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad"+
    "\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\3\3\1\6\1\7"+
    "\2\3\1\10\1\11\5\3\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\3\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\3\1\36\2\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\2\1\50"+
    "\1\2\1\51\3\0\1\2\100\0\53\52\10\0\1\52"+
    "\13\0\33\52\1\53\17\52\10\0\1\52\13\0\34\52"+
    "\1\54\16\52\10\0\1\52\13\0\34\52\1\55\16\52"+
    "\10\0\1\52\13\0\40\52\1\56\12\52\10\0\1\52"+
    "\13\0\27\52\1\57\23\52\10\0\1\52\13\0\22\52"+
    "\1\60\30\52\24\0\35\52\1\61\1\62\1\63\1\64"+
    "\12\52\10\0\1\52\13\0\33\52\1\65\17\52\10\0"+
    "\1\52\13\0\23\52\1\66\11\52\1\67\15\52\10\0"+
    "\1\52\13\0\24\52\1\70\1\71\2\52\1\72\22\52"+
    "\10\0\1\52\13\0\35\52\1\63\15\52\10\0\1\52"+
    "\13\0\35\52\1\73\6\52\1\74\6\52\10\0\1\52"+
    "\13\0\31\52\1\75\5\52\1\76\1\77\4\52\1\63"+
    "\5\52\10\0\1\52\13\0\25\52\1\100\1\52\1\101"+
    "\1\52\1\102\6\52\1\103\6\52\1\104\1\105\2\52"+
    "\10\0\1\52\13\0\34\52\1\106\16\52\10\0\1\52"+
    "\13\0\35\52\1\107\15\52\10\0\1\52\13\0\26\52"+
    "\1\110\17\52\1\111\4\52\10\0\1\52\13\0\24\52"+
    "\1\112\7\52\1\113\16\52\10\0\1\52\13\0\30\52"+
    "\1\63\2\52\1\114\1\115\16\52\10\0\1\52\13\0"+
    "\37\52\1\114\1\76\12\52\10\0\1\52\13\0\30\52"+
    "\1\116\2\52\1\117\10\52\1\120\6\52\10\0\1\52"+
    "\13\0\23\52\1\121\27\52\10\0\1\52\13\0\24\52"+
    "\1\122\26\52\10\0\1\52\13\0\30\52\1\122\22\52"+
    "\10\0\1\52\13\0\25\52\1\123\2\52\1\124\22\52"+
    "\10\0\1\52\70\0\1\125\17\0\1\126\56\0\1\125"+
    "\22\0\1\127\1\0\1\130\3\0\1\131\1\132\3\0"+
    "\1\133\46\0\1\134\1\135\71\0\1\136\76\0\1\137"+
    "\1\140\77\0\1\141\77\0\1\141\20\0\1\142\27\0"+
    "\1\142\26\0\1\134\1\143\75\0\1\143\12\0\66\144"+
    "\1\145\1\0\3\144\1\0\3\144\67\146\1\0\1\145"+
    "\2\146\1\0\3\146\1\0\53\147\15\0\1\147\3\0"+
    "\1\147\2\0\40\52\1\150\12\52\10\0\1\52\13\0"+
    "\27\52\1\151\23\52\10\0\1\52\13\0\50\52\1\152"+
    "\2\52\10\0\1\52\13\0\26\52\1\153\24\52\10\0"+
    "\1\52\13\0\26\52\1\154\24\52\10\0\1\52\15\0"+
    "\1\155\1\156\1\0\1\157\3\0\1\160\1\161\1\162"+
    "\4\0\1\163\2\0\1\164\53\0\35\52\1\165\15\52"+
    "\10\0\1\52\13\0\37\52\1\166\13\52\10\0\1\52"+
    "\13\0\41\52\1\63\11\52\10\0\1\52\13\0\37\52"+
    "\1\167\13\52\10\0\1\52\13\0\35\52\1\170\15\52"+
    "\10\0\1\52\13\0\24\52\1\171\15\52\1\63\10\52"+
    "\10\0\1\52\13\0\25\52\1\172\1\173\10\52\1\114"+
    "\13\52\10\0\1\52\13\0\24\52\1\174\3\52\1\175"+
    "\22\52\10\0\1\52\13\0\40\52\1\176\12\52\10\0"+
    "\1\52\13\0\30\52\1\177\2\52\1\200\17\52\10\0"+
    "\1\52\13\0\36\52\1\201\14\52\10\0\1\52\13\0"+
    "\32\52\1\202\20\52\10\0\1\52\13\0\37\52\1\203"+
    "\13\52\10\0\1\52\13\0\26\52\1\204\1\205\7\52"+
    "\1\206\13\52\10\0\1\52\13\0\37\52\1\207\13\52"+
    "\10\0\1\52\13\0\23\52\1\210\27\52\10\0\1\52"+
    "\13\0\32\52\1\211\20\52\10\0\1\52\13\0\41\52"+
    "\1\212\11\52\10\0\1\52\13\0\24\52\1\213\26\52"+
    "\10\0\1\52\13\0\26\52\1\214\4\52\1\167\17\52"+
    "\10\0\1\52\13\0\26\52\1\215\23\52\1\216\10\0"+
    "\1\52\13\0\34\52\1\217\16\52\10\0\1\52\13\0"+
    "\24\52\1\220\26\52\10\0\1\52\13\0\33\52\1\221"+
    "\17\52\10\0\1\52\13\0\31\52\1\222\21\52\10\0"+
    "\1\52\13\0\46\52\1\63\4\52\10\0\1\52\13\0"+
    "\34\52\1\63\16\52\10\0\1\52\13\0\27\52\1\223"+
    "\15\52\1\224\5\52\10\0\1\52\13\0\35\52\1\225"+
    "\15\52\10\0\1\52\13\0\40\52\1\104\12\52\10\0"+
    "\1\52\13\0\40\52\1\226\12\52\10\0\1\52\13\0"+
    "\33\52\1\227\17\52\10\0\1\52\13\0\30\52\1\230"+
    "\22\52\10\0\1\52\13\0\26\52\1\210\24\52\10\0"+
    "\1\52\45\0\1\231\77\0\1\232\77\0\1\233\76\0"+
    "\1\234\102\0\1\235\65\0\1\236\46\0\60\137\1\237"+
    "\12\137\3\0\1\137\73\140\3\0\1\140\57\0\1\240"+
    "\4\0\1\241\17\0\1\142\27\0\1\142\26\0\1\143"+
    "\13\0\53\147\10\0\1\147\4\0\1\147\3\0\1\147"+
    "\2\0\24\52\1\242\26\52\10\0\1\52\13\0\33\52"+
    "\1\243\17\52\10\0\1\52\13\0\24\52\1\244\26\52"+
    "\10\0\1\52\13\0\34\52\1\245\16\52\10\0\1\52"+
    "\13\0\24\52\1\246\26\52\10\0\1\52\24\0\1\247"+
    "\75\0\1\250\76\0\1\251\10\0\1\252\65\0\1\253"+
    "\72\0\1\254\72\0\1\255\114\0\1\256\104\0\1\257"+
    "\52\0\24\52\1\260\26\52\10\0\1\52\13\0\26\52"+
    "\1\261\24\52\10\0\1\52\13\0\26\52\1\63\24\52"+
    "\10\0\1\52\13\0\30\52\1\113\22\52\10\0\1\52"+
    "\13\0\33\52\1\167\17\52\10\0\1\52\13\0\25\52"+
    "\1\262\25\52\10\0\1\52\13\0\27\52\1\263\23\52"+
    "\10\0\1\52\13\0\37\52\1\264\13\52\10\0\1\52"+
    "\13\0\40\52\1\114\12\52\10\0\1\52\13\0\26\52"+
    "\1\265\10\52\1\167\13\52\10\0\1\52\13\0\26\52"+
    "\1\266\24\52\10\0\1\52\13\0\40\52\1\167\6\52"+
    "\1\267\3\52\10\0\1\52\13\0\25\52\1\270\25\52"+
    "\10\0\1\52\13\0\25\52\1\271\25\52\10\0\1\52"+
    "\13\0\34\52\1\167\16\52\10\0\1\52\13\0\34\52"+
    "\1\272\16\52\10\0\1\52\13\0\25\52\1\273\25\52"+
    "\10\0\1\52\13\0\26\52\1\274\24\52\10\0\1\52"+
    "\13\0\34\52\1\275\16\52\10\0\1\52\13\0\30\52"+
    "\1\63\22\52\10\0\1\52\13\0\26\52\1\260\24\52"+
    "\10\0\1\52\13\0\33\52\1\276\3\52\1\277\1\52"+
    "\1\300\3\52\1\301\1\302\4\52\10\0\1\52\13\0"+
    "\25\52\1\63\25\52\10\0\1\52\13\0\34\52\1\303"+
    "\16\52\10\0\1\52\13\0\44\52\1\304\6\52\10\0"+
    "\1\52\13\0\44\52\1\305\6\52\10\0\1\52\13\0"+
    "\24\52\1\306\26\52\10\0\1\52\13\0\26\52\1\270"+
    "\24\52\10\0\1\52\13\0\26\52\1\173\24\52\10\0"+
    "\1\52\13\0\34\52\1\307\16\52\10\0\1\52\13\0"+
    "\25\52\1\310\25\52\10\0\1\52\13\0\24\52\1\311"+
    "\26\52\10\0\1\52\13\0\34\52\1\312\16\52\10\0"+
    "\1\52\13\0\27\52\1\313\23\52\10\0\1\52\13\0"+
    "\25\52\1\114\25\52\10\0\1\52\13\0\36\52\1\104"+
    "\14\52\10\0\1\52\36\0\1\314\113\0\1\315\65\0"+
    "\1\316\117\0\1\317\54\0\1\320\76\0\1\321\47\0"+
    "\60\137\1\237\1\322\11\137\3\0\1\137\64\0\1\241"+
    "\13\0\35\52\1\323\15\52\10\0\1\52\13\0\31\52"+
    "\1\154\21\52\10\0\1\52\13\0\41\52\1\324\11\52"+
    "\10\0\1\52\13\0\51\52\1\325\1\52\10\0\1\52"+
    "\13\0\25\52\1\326\25\52\10\0\1\52\13\0\1\327"+
    "\114\0\1\330\71\0\1\331\100\0\1\332\76\0\1\331"+
    "\103\0\1\333\70\0\1\334\64\0\1\335\123\0\1\336"+
    "\51\0\42\52\1\63\10\52\10\0\1\52\13\0\35\52"+
    "\1\337\15\52\10\0\1\52\13\0\24\52\1\340\26\52"+
    "\10\0\1\52\13\0\23\52\1\63\27\52\10\0\1\52"+
    "\13\0\37\52\1\63\13\52\10\0\1\52\13\0\33\52"+
    "\1\341\17\52\10\0\1\52\13\0\34\52\1\342\16\52"+
    "\10\0\1\52\13\0\24\52\1\343\26\52\10\0\1\52"+
    "\13\0\33\52\1\344\17\52\10\0\1\52\13\0\34\52"+
    "\1\345\16\52\10\0\1\52\13\0\35\52\1\346\15\52"+
    "\10\0\1\52\13\0\44\52\1\347\6\52\10\0\1\52"+
    "\13\0\24\52\1\350\7\52\1\351\16\52\10\0\1\52"+
    "\13\0\33\52\1\276\17\52\10\0\1\52\13\0\45\52"+
    "\1\63\5\52\10\0\1\52\13\0\46\52\1\111\4\52"+
    "\10\0\1\52\13\0\34\52\1\352\16\52\10\0\1\52"+
    "\13\0\30\52\1\116\22\52\10\0\1\52\13\0\40\52"+
    "\1\353\12\52\10\0\1\52\13\0\35\52\1\354\15\52"+
    "\10\0\1\52\13\0\33\52\1\355\17\52\10\0\1\52"+
    "\13\0\43\52\1\63\7\52\10\0\1\52\13\0\37\52"+
    "\1\356\13\52\10\0\1\52\13\0\24\52\1\357\26\52"+
    "\10\0\1\52\13\0\44\52\1\360\6\52\10\0\1\52"+
    "\13\0\24\52\1\173\26\52\10\0\1\52\13\0\26\52"+
    "\1\361\24\52\10\0\1\52\45\0\1\362\70\0\1\363"+
    "\105\0\1\364\67\0\1\365\106\0\1\366\66\0\1\367"+
    "\52\0\42\52\1\326\10\52\10\0\1\52\13\0\34\52"+
    "\1\370\16\52\10\0\1\52\32\0\1\371\101\0\1\372"+
    "\60\0\1\330\74\0\1\373\103\0\1\374\73\0\1\375"+
    "\102\0\1\376\114\0\1\377\50\0\24\52\1\u0100\26\52"+
    "\10\0\1\52\13\0\36\52\1\227\14\52\10\0\1\52"+
    "\13\0\40\52\1\u0101\12\52\10\0\1\52\13\0\27\52"+
    "\1\u0102\23\52\10\0\1\52\13\0\26\52\1\114\24\52"+
    "\10\0\1\52\13\0\27\52\1\63\23\52\10\0\1\52"+
    "\13\0\31\52\1\u0103\21\52\10\0\1\52\13\0\45\52"+
    "\1\u0104\5\52\10\0\1\52\13\0\41\52\1\u0105\11\52"+
    "\10\0\1\52\13\0\40\52\1\u0106\12\52\10\0\1\52"+
    "\13\0\24\52\1\u0107\26\52\10\0\1\52\13\0\27\52"+
    "\1\223\23\52\10\0\1\52\13\0\41\52\1\264\11\52"+
    "\10\0\1\52\13\0\40\52\1\63\12\52\10\0\1\52"+
    "\13\0\35\52\1\u0105\15\52\10\0\1\52\13\0\32\52"+
    "\1\u0104\20\52\10\0\1\52\13\0\35\52\1\114\15\52"+
    "\10\0\1\52\13\0\25\52\1\167\25\52\10\0\1\52"+
    "\13\0\33\52\1\u0108\17\52\10\0\1\52\50\0\1\u0109"+
    "\72\0\1\321\106\0\1\130\106\0\1\u010a\52\0\1\u010b"+
    "\51\0\35\52\1\u010c\15\52\10\0\1\52\32\0\1\330"+
    "\101\0\1\u010d\74\0\1\u010e\72\0\1\u010f\101\0\1\u0110"+
    "\77\0\1\330\100\0\1\u0111\54\0\27\52\1\167\23\52"+
    "\10\0\1\52\13\0\44\52\1\114\6\52\10\0\1\52"+
    "\13\0\26\52\1\u0112\24\52\10\0\1\52\13\0\34\52"+
    "\1\u0113\16\52\10\0\1\52\13\0\24\52\1\u0114\26\52"+
    "\10\0\1\52\13\0\34\52\1\u0115\16\52\10\0\1\52"+
    "\13\0\27\52\1\u0116\23\52\10\0\1\52\13\0\41\52"+
    "\1\u0117\11\52\10\0\1\52\13\0\30\52\1\354\22\52"+
    "\10\0\1\52\55\0\1\u010b\70\0\1\u0118\42\0\37\52"+
    "\1\u010c\13\52\10\0\1\52\1\u0119\22\0\1\u011a\71\0"+
    "\1\330\110\0\1\u011b\110\0\1\u011c\47\0\34\52\1\64"+
    "\16\52\10\0\1\52\13\0\40\52\1\u011d\12\52\10\0"+
    "\1\52\13\0\27\52\1\114\23\52\10\0\1\52\13\0"+
    "\22\52\1\u011e\30\52\10\0\1\52\13\0\34\52\1\u0117"+
    "\16\52\10\0\1\52\13\0\30\52\1\276\22\52\10\0"+
    "\1\52\50\0\1\u011f\51\0\1\u0120\102\0\1\u0121\62\0"+
    "\1\u0122\126\0\1\u0123\46\0\26\52\1\264\24\52\10\0"+
    "\1\52\13\0\30\52\1\u0124\22\52\10\0\1\52\52\0"+
    "\1\u011f\24\0\1\u0119\52\0\1\u0125\51\0\1\330\65\0"+
    "\1\331\125\0\1\u0126\45\0\40\52\1\u0114\12\52\10\0"+
    "\1\52\41\0\1\u0127\102\0\1\u0128\100\0\1\u0129\75\0"+
    "\1\u012a\114\0\1\u012b\52\0\1\u012c\105\0\1\u012d\76\0"+
    "\1\u012e\77\0\1\u012f\76\0\1\u0130\100\0\1\u012f\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17829];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\55\1\1\0\44\1\1\11\10\0\1\11"+
    "\1\0\1\1\1\11\3\0\1\11\1\0\6\1\10\0"+
    "\44\1\10\0\6\1\11\0\34\1\6\0\5\1\10\0"+
    "\23\1\1\11\5\0\1\1\7\0\11\1\2\0\1\11"+
    "\1\1\1\11\4\0\6\1\5\0\3\1\4\0\1\1"+
    "\12\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int LineCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();return ERROR;
            }
          case 16: break;
          case 2: 
            { LineCount++; lexeme=yytext(); return NEWLINE;
            }
          case 17: break;
          case 3: 
            { lexeme=yytext(); return IDENTIFIER;
            }
          case 18: break;
          case 4: 
            { lexeme=yytext(); return RESERVED_WORD;
            }
          case 19: break;
          case 5: 
            { lexeme=yytext(); return COMPARISON_OPERATOR;
            }
          case 20: break;
          case 6: 
            { lexeme=yytext(); return ARITHMETIC_OPERATOR;
            }
          case 21: break;
          case 7: 
            { lexeme=yytext(); return COMMENT;
            }
          case 22: break;
          case 8: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 23: break;
          case 9: 
            { lexeme=yytext(); return STRING;
            }
          case 24: break;
          case 10: 
            { lexeme=yytext(); return VARIABLE_ID;
            }
          case 25: break;
          case 11: 
            { lexeme=yytext(); return FLOATING_POINT_NUM;
            }
          case 26: break;
          case 12: 
            { lexeme=yytext(); return INTEGER;
            }
          case 27: break;
          case 13: 
            { lexeme=yytext(); return PHP;
            }
          case 28: break;
          case 14: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 29: break;
          case 15: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
