/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Stuff/Docs/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\63\1\64\1\64\1\64\22\0\1\101\1\40\1\66"+
    "\1\100\1\70\1\45\1\46\1\62\1\73\1\73\1\43\1\42\1\72"+
    "\1\42\1\61\1\44\1\56\1\60\6\57\2\55\1\104\1\71\1\35"+
    "\1\37\1\36\1\41\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\74\1\104\1\75\1\0\1\32\1\0\1\47\1\2\1\3\1\50"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\51"+
    "\1\52\1\20\1\21\1\53\1\23\1\24\1\25\1\102\1\27\1\54"+
    "\1\31\1\12\1\76\1\77\1\76\1\0\6\67\1\65\32\67\1\103"+
    "\137\67\60\0\2\33\115\0\1\34\u1500\0\1\101\u097f\0\13\101\35\0"+
    "\1\64\1\64\5\0\1\101\57\0\1\101\u0fa0\0\1\101\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\22\3\3\2\2\4\1\5\1\6\1\7"+
    "\4\5\6\6\2\10\1\7\1\2\1\11\1\12\1\7"+
    "\1\2\1\13\1\14\1\15\2\16\2\1\1\17\1\12"+
    "\1\7\3\3\2\20\6\3\1\21\11\3\1\0\5\3"+
    "\1\0\1\3\1\0\3\3\1\17\7\3\1\0\2\3"+
    "\4\0\2\4\2\0\1\22\2\10\1\0\1\2\2\6"+
    "\1\21\1\6\3\2\1\23\3\2\1\10\2\0\1\24"+
    "\1\0\1\24\6\25\1\0\1\3\1\0\20\3\1\0"+
    "\1\21\1\3\1\0\5\3\1\0\1\3\1\0\3\3"+
    "\1\0\20\3\12\0\1\10\1\2\1\0\1\20\1\6"+
    "\1\0\1\26\1\17\2\10\13\25\1\0\1\3\1\0"+
    "\5\3\1\0\3\3\1\21\5\3\1\0\3\3\1\0"+
    "\4\3\1\0\3\3\1\0\14\3\5\0\1\26\2\10"+
    "\1\17\1\0\1\6\13\25\1\27\1\3\1\0\10\3"+
    "\1\0\7\3\2\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\11\3\3\0\1\2\1\17\1\30"+
    "\4\25\1\27\4\25\1\3\1\0\2\3\1\20\1\3"+
    "\2\0\6\3\3\0\2\3\1\0\6\3\2\0\10\25"+
    "\1\3\1\0\1\3\1\21\3\3\3\0\1\3\2\20"+
    "\1\31\3\3\2\0\5\25\1\0\3\3\2\0\2\3"+
    "\1\0\4\25\1\3\1\0\2\3\2\25\1\0\1\25"+
    "\1\3\1\0\1\3\2\25\1\0\1\25\1\0\1\3"+
    "\2\25\1\0\1\25\1\21\1\3\1\0\2\25\1\0"+
    "\1\25\1\0\1\3\1\0\2\25\1\0\1\30\1\0"+
    "\2\25\1\0\2\25\1\0\2\25\1\0\2\25\1\0"+
    "\2\25\1\0\1\25\1\0\1\25\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\105"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\u0a83\0\u0ac8\0\105\0\105\0\u0b0d\0\u0b52\0\105\0\105"+
    "\0\105\0\u0b97\0\105\0\u0bdc\0\u0c21\0\u0c66\0\u04da\0\105"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u026d\0\105\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u026d\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f"+
    "\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u026d\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\105\0\u1887\0\u18cc\0\u1911\0\105\0\u1956\0\u199b\0\u0a83"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u096f\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u0ac8\0\u0ac8"+
    "\0\u0b0d\0\u0b0d\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa"+
    "\0\u096f\0\u303f\0\u3084\0\u30c9\0\u1af4\0\u1c08\0\u1c4d\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786"+
    "\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae"+
    "\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe"+
    "\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u40f5\0\u3084\0\u2ea1\0\u2ee6\0\u413a\0\u417f"+
    "\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7"+
    "\0\u43ec\0\u4431\0\u4476\0\u44bb\0\105\0\u4500\0\u4545\0\u458a"+
    "\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2"+
    "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da"+
    "\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02"+
    "\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a"+
    "\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u413a\0\105"+
    "\0\u1da6\0\u500d\0\u5052\0\u5097\0\u50dc\0\u1da6\0\u5121\0\u5166"+
    "\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e"+
    "\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6"+
    "\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de"+
    "\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06"+
    "\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e"+
    "\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11\0\u5e56"+
    "\0\u5e9b\0\u5cb8\0\u5ee0\0\u026d\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4"+
    "\0\u5ee0\0\u6039\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7"+
    "\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff"+
    "\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f"+
    "\0\u6894\0\u68d9\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77"+
    "\0\105\0\u6abc\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u6c5a"+
    "\0\u6c9f\0\u6ce4\0\u6d29\0\u6d6e\0\u6db3\0\105\0\u6df8\0\u6e3d"+
    "\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51\0\u6f96\0\u6fdb\0\u7020\0\u7065"+
    "\0\u70aa\0\u70ef\0\u7134\0\u7179\0\u71be\0\u7203\0\u7248\0\u728d"+
    "\0\u72d2\0\u7317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\12\1\15\1\12\1\16"+
    "\1\12\1\17\1\20\1\21\1\22\1\23\1\24\2\12"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\47\1\50\2\47\1\51\1\52"+
    "\1\53\2\54\1\55\1\2\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\54\1\67\1\54"+
    "\1\70\106\0\1\12\1\71\13\12\1\72\3\12\1\73"+
    "\1\74\7\12\1\0\1\75\12\0\2\12\1\72\1\12"+
    "\1\73\5\12\21\0\1\12\3\0\21\12\1\76\10\12"+
    "\14\0\4\12\1\76\5\12\21\0\1\12\3\0\1\77"+
    "\12\12\1\100\2\12\1\101\13\12\14\0\1\77\2\12"+
    "\1\101\6\12\21\0\1\12\3\0\4\12\1\102\3\12"+
    "\1\103\5\12\1\104\13\12\14\0\3\12\1\104\6\12"+
    "\21\0\1\12\3\0\2\12\1\105\10\12\1\106\1\107"+
    "\1\110\7\12\1\111\1\12\1\112\2\12\14\0\2\12"+
    "\1\110\2\12\1\112\4\12\21\0\1\111\3\0\10\12"+
    "\1\113\5\12\1\114\5\12\1\115\5\12\1\116\13\0"+
    "\3\12\1\114\6\12\21\0\1\12\3\0\13\12\1\117"+
    "\2\12\1\120\13\12\14\0\3\12\1\120\6\12\21\0"+
    "\1\12\3\0\32\12\14\0\12\12\21\0\1\12\3\0"+
    "\5\12\1\104\6\12\1\121\1\122\4\12\1\123\7\12"+
    "\1\0\1\124\12\0\2\12\1\122\7\12\21\0\1\12"+
    "\3\0\10\12\1\125\21\12\1\126\13\0\12\12\21\0"+
    "\1\12\3\0\1\127\3\12\1\130\25\12\14\0\1\127"+
    "\11\12\21\0\1\12\3\0\21\12\1\131\1\12\1\132"+
    "\1\133\5\12\14\0\4\12\1\131\5\12\21\0\1\12"+
    "\3\0\4\12\1\134\25\12\14\0\12\12\21\0\1\12"+
    "\3\0\23\12\1\135\2\12\1\136\3\12\14\0\12\12"+
    "\21\0\1\12\3\0\7\12\1\137\11\12\1\140\10\12"+
    "\14\0\4\12\1\140\5\12\21\0\1\12\3\0\15\12"+
    "\1\123\4\12\1\141\7\12\1\0\1\142\12\0\2\12"+
    "\1\123\7\12\21\0\1\12\3\0\1\143\31\12\14\0"+
    "\1\143\11\12\21\0\1\12\3\0\7\12\1\144\22\12"+
    "\14\0\12\12\21\0\1\12\3\0\31\12\1\145\14\0"+
    "\6\12\25\0\1\12\17\0\1\146\1\147\4\0\1\124"+
    "\10\0\1\124\14\0\1\147\57\0\1\150\116\0\1\151"+
    "\1\152\1\0\1\153\102\0\1\151\104\0\1\31\1\154"+
    "\103\0\1\151\1\41\5\0\7\41\22\0\1\41\43\0"+
    "\1\155\2\0\1\151\120\0\1\156\1\157\2\156\1\160"+
    "\66\0\1\40\104\0\1\161\1\66\100\0\1\41\5\0"+
    "\7\41\22\0\1\41\6\0\1\12\1\71\13\12\1\72"+
    "\3\12\1\73\1\74\7\12\1\0\1\75\3\0\1\41"+
    "\5\0\1\41\2\45\1\162\1\45\1\163\1\45\4\12"+
    "\16\0\1\41\2\0\1\12\3\0\4\12\1\102\3\12"+
    "\1\103\5\12\1\104\13\12\5\0\1\41\5\0\1\41"+
    "\3\45\1\164\2\45\4\12\16\0\1\41\2\0\1\12"+
    "\3\0\1\127\3\12\1\130\25\12\5\0\1\41\5\0"+
    "\1\41\1\165\5\45\4\12\16\0\1\41\2\0\1\12"+
    "\3\0\32\12\5\0\1\41\5\0\1\41\6\45\4\12"+
    "\16\0\1\41\2\0\1\12\3\0\4\12\1\134\25\12"+
    "\5\0\1\41\5\0\1\41\6\45\4\12\16\0\1\41"+
    "\2\0\1\12\3\0\4\166\1\167\12\166\1\170\11\166"+
    "\15\0\6\166\4\47\1\171\20\0\1\166\3\0\1\166"+
    "\1\172\2\166\1\167\12\166\1\170\7\166\1\173\1\166"+
    "\15\0\5\166\1\173\1\174\3\175\1\171\20\0\1\166"+
    "\57\0\4\176\24\0\62\177\1\200\3\0\17\177\63\201"+
    "\3\0\1\202\16\201\1\0\1\203\5\204\1\205\1\206"+
    "\7\204\1\207\11\204\1\210\14\0\1\203\5\204\4\166"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\63\0\1\211"+
    "\120\0\2\64\45\0\1\41\5\0\7\41\21\0\1\64"+
    "\1\65\5\0\63\66\3\0\17\66\1\0\22\12\1\212"+
    "\7\12\1\0\1\213\12\0\12\12\21\0\1\12\3\0"+
    "\3\12\1\74\26\12\14\0\1\12\1\74\10\12\21\0"+
    "\1\12\3\0\21\12\1\214\10\12\14\0\4\12\1\214"+
    "\5\12\21\0\1\12\3\0\4\12\1\215\25\12\14\0"+
    "\12\12\21\0\1\12\3\0\13\12\1\216\6\12\1\103"+
    "\1\217\6\12\14\0\12\12\21\0\1\12\3\0\1\220"+
    "\15\12\1\221\13\12\14\0\1\220\2\12\1\221\6\12"+
    "\21\0\1\12\3\0\15\12\1\222\14\12\14\0\2\12"+
    "\1\222\7\12\21\0\1\12\3\0\2\12\1\223\2\12"+
    "\1\224\24\12\14\0\12\12\21\0\1\12\3\0\4\12"+
    "\1\104\25\12\14\0\12\12\21\0\1\12\3\0\7\12"+
    "\1\225\22\12\14\0\12\12\21\0\1\12\3\0\22\12"+
    "\1\226\7\12\14\0\12\12\21\0\1\12\3\0\17\12"+
    "\1\227\12\12\14\0\12\12\21\0\1\12\3\0\3\12"+
    "\1\230\26\12\14\0\1\12\1\230\10\12\21\0\1\12"+
    "\3\0\1\231\31\12\14\0\1\231\11\12\21\0\1\12"+
    "\3\0\10\12\1\232\12\12\1\233\6\12\1\234\13\0"+
    "\12\12\21\0\1\12\3\0\15\12\1\111\14\12\14\0"+
    "\2\12\1\111\7\12\21\0\1\12\3\0\21\12\1\235"+
    "\10\12\14\0\4\12\1\235\5\12\21\0\1\12\3\0"+
    "\15\12\1\236\14\12\14\0\2\12\1\236\7\12\21\0"+
    "\1\12\20\0\1\237\32\0\1\237\34\0\16\12\1\240"+
    "\13\12\14\0\3\12\1\240\6\12\21\0\1\12\3\0"+
    "\23\12\1\225\6\12\14\0\12\12\21\0\1\12\3\0"+
    "\17\12\1\241\12\12\14\0\12\12\21\0\1\12\3\0"+
    "\2\12\1\242\17\12\1\243\1\244\6\12\1\0\1\245"+
    "\12\0\12\12\21\0\1\12\3\0\22\12\1\246\7\12"+
    "\1\0\1\247\12\0\12\12\21\0\1\12\25\0\1\247"+
    "\10\0\1\247\51\0\22\12\1\232\7\12\1\0\1\234"+
    "\12\0\12\12\21\0\1\12\25\0\1\234\10\0\1\234"+
    "\51\0\14\12\1\250\15\12\14\0\12\12\21\0\1\12"+
    "\3\0\26\12\1\74\3\12\14\0\12\12\21\0\1\12"+
    "\3\0\10\12\1\251\5\12\1\252\13\12\1\253\13\0"+
    "\3\12\1\252\6\12\21\0\1\12\3\0\1\12\1\254"+
    "\30\12\14\0\12\12\21\0\1\12\3\0\20\12\1\255"+
    "\2\12\1\256\6\12\14\0\12\12\21\0\1\12\3\0"+
    "\1\257\31\12\14\0\1\257\11\12\21\0\1\12\3\0"+
    "\10\12\1\260\21\12\14\0\12\12\21\0\1\12\3\0"+
    "\21\12\1\261\10\12\14\0\4\12\1\261\5\12\21\0"+
    "\1\12\3\0\1\262\27\12\1\74\1\12\14\0\1\262"+
    "\11\12\21\0\1\12\3\0\4\12\1\74\25\12\14\0"+
    "\12\12\21\0\1\12\7\0\1\75\100\0\21\12\1\74"+
    "\10\12\14\0\4\12\1\74\5\12\21\0\1\12\3\0"+
    "\10\12\1\263\21\12\14\0\12\12\21\0\1\12\3\0"+
    "\2\12\1\264\1\265\1\12\1\266\1\12\1\267\3\12"+
    "\1\270\1\271\1\272\5\12\1\273\5\12\1\274\14\0"+
    "\1\12\1\265\1\272\3\12\25\0\1\12\22\0\1\275"+
    "\67\0\1\276\17\0\1\245\1\277\7\0\1\245\51\0"+
    "\1\300\45\0\1\300\73\0\1\151\66\0\1\301\123\0"+
    "\1\2\52\0\1\302\47\0\4\156\1\171\25\0\1\303"+
    "\2\0\1\302\22\0\1\304\23\0\1\304\1\305\3\306"+
    "\1\171\23\0\43\161\1\307\20\161\2\310\17\161\1\0"+
    "\3\12\1\74\26\12\5\0\1\41\5\0\1\41\1\45"+
    "\1\311\4\45\4\12\16\0\1\41\2\0\1\12\3\0"+
    "\21\12\1\214\10\12\5\0\1\41\5\0\1\41\4\45"+
    "\1\312\1\45\4\12\16\0\1\41\2\0\1\12\3\0"+
    "\14\12\1\250\15\12\5\0\1\41\5\0\1\41\6\45"+
    "\4\12\16\0\1\41\2\0\1\12\3\0\31\166\15\0"+
    "\12\166\21\0\1\166\3\0\31\166\10\0\1\313\4\0"+
    "\6\166\4\314\21\0\1\166\3\0\23\166\1\315\5\166"+
    "\15\0\12\166\21\0\1\166\7\0\1\302\47\0\4\171"+
    "\25\0\31\166\15\0\7\166\1\316\1\166\1\316\21\0"+
    "\1\166\3\0\6\317\23\166\15\0\2\317\4\166\4\317"+
    "\21\0\1\166\3\0\4\166\1\167\12\166\1\170\11\166"+
    "\15\0\6\166\4\174\1\176\20\0\1\166\3\0\4\166"+
    "\1\167\12\166\1\170\11\166\15\0\6\166\1\174\3\175"+
    "\1\176\20\0\1\166\7\0\1\302\47\0\4\176\25\0"+
    "\21\204\1\320\10\204\14\0\4\204\1\320\5\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\32\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\13\204\1\321\16\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\23\204\1\322\6\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\7\204\1\323\22\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\2\204\1\324\1\204\1\325"+
    "\1\326\1\327\10\204\1\330\1\204\1\331\1\332\7\204"+
    "\14\0\4\204\1\331\5\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\32\211\14\0\6\211\5\0\1\333"+
    "\17\0\1\211\3\0\23\12\1\334\6\12\14\0\12\12"+
    "\21\0\1\12\26\0\1\335\61\0\1\336\31\12\14\0"+
    "\1\336\11\12\21\0\1\12\3\0\1\337\31\12\14\0"+
    "\1\337\11\12\21\0\1\12\3\0\13\12\1\340\16\12"+
    "\14\0\12\12\21\0\1\12\3\0\2\12\1\341\27\12"+
    "\14\0\12\12\21\0\1\12\3\0\22\12\1\342\7\12"+
    "\1\0\1\343\12\0\12\12\21\0\1\12\3\0\15\12"+
    "\1\141\14\12\14\0\2\12\1\141\7\12\21\0\1\12"+
    "\3\0\22\12\1\232\1\344\6\12\1\0\1\234\12\0"+
    "\12\12\21\0\1\12\3\0\13\12\1\345\16\12\14\0"+
    "\12\12\21\0\1\12\3\0\1\346\31\12\14\0\1\346"+
    "\11\12\21\0\1\12\3\0\16\12\1\104\13\12\14\0"+
    "\3\12\1\104\6\12\21\0\1\12\3\0\4\12\1\347"+
    "\25\12\14\0\12\12\21\0\1\12\3\0\23\12\1\336"+
    "\6\12\14\0\12\12\21\0\1\12\3\0\3\12\1\350"+
    "\1\12\1\351\2\12\1\352\11\12\1\353\3\12\1\354"+
    "\3\12\1\0\1\355\12\0\1\12\1\350\10\12\21\0"+
    "\1\12\3\0\13\12\1\74\16\12\14\0\12\12\21\0"+
    "\1\12\3\0\23\12\1\74\6\12\14\0\12\12\21\0"+
    "\1\12\3\0\4\12\1\356\25\12\14\0\12\12\21\0"+
    "\1\12\26\0\1\75\61\0\4\12\1\357\25\12\14\0"+
    "\12\12\21\0\1\12\3\0\2\12\1\360\27\12\14\0"+
    "\12\12\21\0\1\12\3\0\1\361\45\0\1\361\36\0"+
    "\1\12\1\111\30\12\14\0\12\12\21\0\1\12\3\0"+
    "\13\12\1\362\16\12\14\0\12\12\21\0\1\12\3\0"+
    "\13\12\1\363\16\12\14\0\12\12\21\0\1\12\3\0"+
    "\23\12\1\364\6\12\14\0\12\12\21\0\1\12\3\0"+
    "\4\12\1\365\25\12\14\0\12\12\21\0\1\12\26\0"+
    "\1\366\61\0\4\12\1\232\25\12\14\0\12\12\21\0"+
    "\1\12\7\0\1\234\100\0\4\12\1\367\25\12\14\0"+
    "\12\12\21\0\1\12\3\0\15\12\1\232\7\12\1\370"+
    "\4\12\14\0\2\12\1\232\7\12\21\0\1\370\3\0"+
    "\23\12\1\371\6\12\14\0\12\12\21\0\1\12\20\0"+
    "\1\234\7\0\1\372\22\0\1\234\30\0\1\372\3\0"+
    "\13\12\1\373\16\12\14\0\12\12\21\0\1\12\3\0"+
    "\24\12\1\374\5\12\14\0\12\12\21\0\1\12\3\0"+
    "\24\12\1\375\5\12\14\0\12\12\21\0\1\12\3\0"+
    "\23\12\1\373\6\12\14\0\12\12\21\0\1\12\3\0"+
    "\23\12\1\376\6\12\14\0\12\12\21\0\1\12\3\0"+
    "\16\12\1\130\13\12\14\0\3\12\1\130\6\12\21\0"+
    "\1\12\3\0\10\12\1\232\21\12\1\234\13\0\12\12"+
    "\21\0\1\12\3\0\13\12\1\103\16\12\14\0\12\12"+
    "\21\0\1\12\3\0\13\12\1\377\16\12\14\0\12\12"+
    "\21\0\1\12\3\0\10\12\1\u0100\21\12\14\0\12\12"+
    "\21\0\1\12\3\0\10\12\1\u0101\21\12\14\0\12\12"+
    "\21\0\1\12\3\0\1\u0102\31\12\14\0\1\u0102\11\12"+
    "\21\0\1\12\3\0\10\12\1\u0103\21\12\14\0\12\12"+
    "\21\0\1\12\3\0\4\12\1\u0104\25\12\14\0\12\12"+
    "\21\0\1\12\3\0\1\u0105\31\12\14\0\1\u0105\11\12"+
    "\21\0\1\12\3\0\21\12\1\u0106\10\12\14\0\4\12"+
    "\1\u0106\5\12\21\0\1\12\3\0\31\12\1\274\14\0"+
    "\6\12\25\0\1\12\16\0\1\u0107\104\0\1\u0108\75\0"+
    "\1\u0109\123\0\1\u010a\70\0\1\u010b\136\0\1\313\12\0"+
    "\4\u010c\102\0\1\u010d\1\0\1\u010d\25\0\6\u010e\40\0"+
    "\2\u010e\4\0\4\u010e\31\0\1\302\47\0\4\305\1\176"+
    "\30\0\1\302\47\0\1\305\3\306\1\176\23\0\43\161"+
    "\1\307\1\u010f\17\161\2\310\17\161\43\310\1\u0110\41\310"+
    "\1\0\1\336\31\12\5\0\1\41\5\0\1\41\1\u0111"+
    "\5\45\4\12\16\0\1\41\2\0\1\12\57\0\4\u010c"+
    "\25\0\31\166\15\0\6\166\4\314\21\0\1\166\3\0"+
    "\6\204\1\u0112\23\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\16\204\1\u0113\13\204\14\0"+
    "\3\204\1\u0113\6\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\23\204\1\u0114\6\204\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\17\204\1\u0115"+
    "\12\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\16\204\1\u0116\13\204\14\0\3\204\1\u0116"+
    "\6\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\15\204\1\u0117\14\204\14\0\2\204\1\u0117\7\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\10\204\1\u0118"+
    "\21\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\4\204\1\u0119\25\204\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\16\204\1\u011a"+
    "\13\204\14\0\3\204\1\u011a\6\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\4\204\1\u011b\25\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\4\204\1\u011c\25\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\76\0\1\u011d\10\0\21\12\1\u011e"+
    "\10\12\14\0\4\12\1\u011e\5\12\21\0\1\12\24\0"+
    "\1\u011f\30\0\1\u011f\32\0\30\12\1\74\1\12\14\0"+
    "\12\12\21\0\1\12\3\0\12\12\1\104\17\12\14\0"+
    "\12\12\21\0\1\12\3\0\1\u0120\31\12\14\0\1\u0120"+
    "\11\12\21\0\1\12\3\0\7\12\1\74\22\12\14\0"+
    "\12\12\21\0\1\12\3\0\22\12\1\74\7\12\1\0"+
    "\1\75\12\0\12\12\21\0\1\12\25\0\1\75\10\0"+
    "\1\75\51\0\10\12\1\u0121\21\12\14\0\12\12\21\0"+
    "\1\12\3\0\1\u0122\31\12\14\0\1\u0122\11\12\21\0"+
    "\1\12\3\0\24\12\1\u0123\5\12\14\0\12\12\21\0"+
    "\1\12\3\0\10\12\1\352\21\12\14\0\12\12\21\0"+
    "\1\12\3\0\4\12\1\u0124\25\12\14\0\12\12\21\0"+
    "\1\12\3\0\16\12\1\u0125\13\12\14\0\3\12\1\u0125"+
    "\6\12\21\0\1\12\3\0\5\12\1\104\24\12\14\0"+
    "\12\12\21\0\1\12\3\0\26\12\1\u0126\3\12\14\0"+
    "\12\12\21\0\1\12\3\0\7\12\1\u0127\22\12\14\0"+
    "\12\12\21\0\1\12\31\0\1\u0128\56\0\15\12\1\u0129"+
    "\14\12\14\0\2\12\1\u0129\7\12\21\0\1\12\3\0"+
    "\1\376\31\12\14\0\1\376\11\12\21\0\1\12\3\0"+
    "\23\12\1\u012a\6\12\14\0\12\12\21\0\1\12\16\0"+
    "\1\75\71\0\4\12\1\u012b\25\12\14\0\12\12\21\0"+
    "\1\12\3\0\24\12\1\u012c\5\12\14\0\12\12\21\0"+
    "\1\12\3\0\1\u012d\3\12\1\u012e\25\12\14\0\1\u012d"+
    "\11\12\21\0\1\12\3\0\21\12\1\u012f\10\12\14\0"+
    "\4\12\1\u012f\5\12\21\0\1\12\3\0\1\u0130\3\0"+
    "\1\u0131\41\0\1\u0130\36\0\22\12\1\u0132\7\12\1\0"+
    "\1\u0133\12\0\12\12\21\0\1\12\3\0\1\u0134\31\12"+
    "\14\0\1\u0134\11\12\21\0\1\12\3\0\4\12\1\u0135"+
    "\25\12\14\0\12\12\21\0\1\12\3\0\1\u0136\45\0"+
    "\1\u0136\36\0\10\12\1\u0137\21\12\1\u0138\13\0\12\12"+
    "\21\0\1\12\3\0\10\12\1\u0139\21\12\1\u013a\13\0"+
    "\12\12\21\0\1\12\3\0\21\12\1\u013b\10\12\14\0"+
    "\4\12\1\u013b\5\12\21\0\1\12\3\0\2\12\1\u013c"+
    "\27\12\14\0\12\12\21\0\1\12\3\0\1\u013d\31\12"+
    "\14\0\1\u013d\11\12\21\0\1\12\3\0\21\12\1\u013e"+
    "\10\12\14\0\4\12\1\u013e\5\12\21\0\1\12\3\0"+
    "\13\12\1\u013f\16\12\14\0\12\12\21\0\1\12\3\0"+
    "\13\12\1\u0140\16\12\14\0\12\12\21\0\1\12\3\0"+
    "\15\12\1\u013f\14\12\14\0\2\12\1\u013f\7\12\21\0"+
    "\1\12\3\0\23\12\1\u0141\6\12\14\0\12\12\21\0"+
    "\1\12\3\0\14\12\1\u0142\15\12\14\0\12\12\21\0"+
    "\1\12\3\0\1\u0143\31\12\14\0\1\u0143\11\12\21\0"+
    "\1\12\7\0\1\u0144\124\0\1\u0145\101\0\1\u0146\30\0"+
    "\1\u0146\42\0\1\u0138\21\0\1\u0138\71\0\1\155\64\0"+
    "\64\u0147\2\0\17\u0147\43\310\1\u0110\1\u0148\40\310\1\0"+
    "\30\12\1\74\1\12\5\0\1\41\5\0\1\41\6\45"+
    "\4\12\16\0\1\41\2\0\1\12\3\0\2\204\1\u0149"+
    "\22\204\1\u0149\4\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\1\u0149\1\204\2\0\1\204\1\u014a\30\204"+
    "\14\0\12\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\2\0\17\204\1\u014b\12\204\14\0\12\204\4\0\1\204"+
    "\1\0\1\204\12\0\2\204\2\0\31\204\1\u014c\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\16\204\1\u014d\13\204\14\0\3\204\1\u014d\6\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\25\204\1\u014e"+
    "\4\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\1\u014e\1\204\2\0\13\204\1\u014f\16\204\14\0\12\204"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\2\0\23\204"+
    "\1\u014e\6\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\22\204\1\u0119\7\204\14\0\12\204"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\2\0\20\204"+
    "\1\u0150\11\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\21\204\1\u0151\1\u0152\7\204\14\0"+
    "\4\204\1\u0151\5\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\1\u0153\31\12\14\0\1\u0153\11\12\21\0"+
    "\1\12\3\0\1\u0154\45\0\1\u0154\36\0\1\12\1\u0155"+
    "\30\12\14\0\12\12\21\0\1\12\3\0\15\12\1\u0156"+
    "\14\12\14\0\2\12\1\u0156\7\12\21\0\1\12\3\0"+
    "\21\12\1\141\10\12\14\0\4\12\1\141\5\12\21\0"+
    "\1\12\3\0\13\12\1\232\16\12\14\0\12\12\21\0"+
    "\1\12\3\0\2\12\1\223\27\12\14\0\12\12\21\0"+
    "\1\12\3\0\21\12\1\u0157\10\12\14\0\4\12\1\u0157"+
    "\5\12\21\0\1\12\3\0\10\12\1\u0158\21\12\1\u0159"+
    "\13\0\12\12\21\0\1\12\3\0\10\12\1\u0155\21\12"+
    "\1\u015a\13\0\12\12\21\0\1\12\13\0\1\u0159\21\0"+
    "\1\u0159\52\0\3\12\1\342\26\12\14\0\1\12\1\342"+
    "\10\12\21\0\1\12\3\0\10\12\1\u015b\21\12\14\0"+
    "\12\12\21\0\1\12\3\0\14\12\1\u015c\15\12\14\0"+
    "\12\12\21\0\1\12\3\0\3\12\1\u015d\26\12\14\0"+
    "\1\12\1\u015d\10\12\21\0\1\12\3\0\15\12\1\u015e"+
    "\14\12\14\0\2\12\1\u015e\7\12\21\0\1\12\3\0"+
    "\1\u015f\31\12\14\0\1\u015f\11\12\21\0\1\12\3\0"+
    "\5\12\1\u0160\24\12\14\0\12\12\21\0\1\12\20\0"+
    "\1\u0161\32\0\1\u0161\34\0\1\u0162\45\0\1\u0162\36\0"+
    "\17\12\1\u0160\12\12\14\0\12\12\21\0\1\12\22\0"+
    "\1\u0163\65\0\23\12\1\141\6\12\14\0\12\12\21\0"+
    "\1\12\3\0\2\12\1\u0164\27\12\14\0\12\12\21\0"+
    "\1\12\26\0\1\142\61\0\2\12\1\74\27\12\14\0"+
    "\12\12\21\0\1\12\5\0\1\75\102\0\21\12\1\u0165"+
    "\10\12\14\0\4\12\1\u0165\5\12\21\0\1\12\24\0"+
    "\1\u0166\30\0\1\u0166\32\0\15\12\1\104\14\12\14\0"+
    "\2\12\1\104\7\12\21\0\1\12\3\0\7\12\1\104"+
    "\22\12\14\0\12\12\21\0\1\12\3\0\22\12\1\u0167"+
    "\7\12\14\0\12\12\21\0\1\12\3\0\31\12\1\u0168"+
    "\14\0\12\12\21\0\1\12\3\0\4\12\1\u013e\25\12"+
    "\14\0\12\12\21\0\1\12\3\0\23\12\1\u0169\6\12"+
    "\14\0\12\12\21\0\1\12\3\0\7\12\1\u016a\22\12"+
    "\14\0\12\12\21\0\1\12\3\0\4\12\1\u016b\25\12"+
    "\14\0\12\12\21\0\1\12\3\0\10\12\1\u016c\21\12"+
    "\14\0\12\12\21\0\1\12\17\0\1\u016d\73\0\1\u016e"+
    "\43\0\1\u016e\42\0\1\u0163\77\0\1\u016f\31\204\14\0"+
    "\1\u016f\11\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\2\0\31\204\1\u0170\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\4\204\1\u0171\25\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\12\204\1\u0172\17\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\4\204\1\u0173\25\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\24\204\1\u0174\5\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\25\204\1\u0175\4\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\1\u0175\1\204"+
    "\2\0\22\204\1\u0176\7\204\14\0\12\204\4\0\1\204"+
    "\1\0\1\204\12\0\2\204\2\0\2\12\1\232\27\12"+
    "\14\0\12\12\21\0\1\12\5\0\1\234\102\0\13\12"+
    "\1\141\16\12\14\0\12\12\21\0\1\12\3\0\24\12"+
    "\1\103\5\12\14\0\12\12\21\0\1\12\3\0\4\12"+
    "\1\u0177\25\12\14\0\12\12\21\0\1\12\3\0\23\12"+
    "\1\217\6\12\14\0\12\12\21\0\1\12\26\0\1\u0178"+
    "\74\0\1\142\71\0\16\12\1\u013b\13\12\14\0\3\12"+
    "\1\u013b\6\12\21\0\1\12\3\0\4\12\1\u0179\25\12"+
    "\14\0\12\12\21\0\1\12\3\0\4\12\1\u017a\25\12"+
    "\14\0\12\12\21\0\1\12\3\0\2\12\1\u017b\27\12"+
    "\14\0\12\12\21\0\1\12\3\0\3\12\1\u017c\26\12"+
    "\14\0\1\12\1\u017c\10\12\21\0\1\12\3\0\1\u017d"+
    "\31\12\14\0\1\u017d\11\12\21\0\1\12\5\0\1\u017e"+
    "\105\0\1\u017f\43\0\1\u017f\35\0\1\u0180\45\0\1\u0180"+
    "\36\0\23\12\1\u0181\6\12\14\0\12\12\21\0\1\12"+
    "\3\0\4\12\1\u0182\25\12\14\0\12\12\21\0\1\12"+
    "\7\0\1\u0183\100\0\22\12\1\u013e\7\12\14\0\12\12"+
    "\21\0\1\12\3\0\31\12\1\u0184\14\0\12\12\21\0"+
    "\1\12\3\0\31\12\1\u0185\14\0\12\12\21\0\1\12"+
    "\3\0\16\12\1\u0186\13\12\14\0\3\12\1\u0186\6\12"+
    "\21\0\1\12\3\0\22\12\1\u0187\7\12\14\0\12\12"+
    "\21\0\1\12\3\0\23\12\1\u013e\6\12\14\0\12\12"+
    "\21\0\1\12\7\0\1\u0188\104\0\1\u0189\100\0\13\204"+
    "\1\u0173\16\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\21\204\1\u018a\10\204\14\0\4\204"+
    "\1\u018a\5\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\2\0\21\204\1\u018b\10\204\14\0\4\204\1\u018b\5\204"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\2\0\10\204"+
    "\1\u018c\21\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\22\204\1\u014e\7\204\14\0\12\204"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\2\0\4\204"+
    "\1\u011a\25\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\4\204\1\u018d\25\204\14\0\12\204"+
    "\4\0\1\204\1\0\1\204\12\0\2\204\2\0\10\204"+
    "\1\u018e\21\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\1\217\31\12\14\0\1\217\11\12"+
    "\21\0\1\12\5\0\1\u018f\102\0\15\12\1\u0190\14\12"+
    "\14\0\2\12\1\u0190\7\12\21\0\1\12\3\0\31\12"+
    "\1\u0191\14\0\12\12\21\0\1\12\3\0\4\12\1\u017c"+
    "\25\12\14\0\12\12\21\0\1\12\3\0\16\12\1\u0192"+
    "\13\12\14\0\3\12\1\u0192\6\12\21\0\1\12\3\0"+
    "\2\12\1\141\27\12\14\0\12\12\21\0\1\12\7\0"+
    "\1\u017f\116\0\1\u0193\32\0\1\u0193\35\0\1\142\102\0"+
    "\4\12\1\72\25\12\14\0\12\12\21\0\1\12\34\0"+
    "\1\u0194\53\0\2\12\1\u0195\27\12\14\0\12\12\21\0"+
    "\1\12\3\0\3\12\1\u013e\26\12\14\0\1\12\1\u013e"+
    "\10\12\21\0\1\12\3\0\17\12\1\u0196\12\12\14\0"+
    "\12\12\21\0\1\12\20\0\1\u0197\32\0\1\u0197\34\0"+
    "\1\u0198\3\204\1\u0199\25\204\14\0\1\u0198\11\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\21\204\1\u019a"+
    "\10\204\14\0\4\204\1\u019a\5\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\4\204\1\u014e\25\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\21\204\1\u014e\10\204\14\0\4\204\1\u014e\5\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\16\204\1\u019b"+
    "\13\204\14\0\3\204\1\u019b\6\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\11\0\1\75\75\0\23\12\1\342"+
    "\6\12\14\0\12\12\21\0\1\12\3\0\16\12\1\u019c"+
    "\13\12\14\0\3\12\1\u019c\6\12\21\0\1\12\3\0"+
    "\5\12\1\74\24\12\14\0\12\12\21\0\1\12\10\0"+
    "\1\75\115\0\1\u019d\32\0\1\u019d\33\0\16\12\1\u019e"+
    "\13\12\14\0\3\12\1\u019e\6\12\21\0\1\12\3\0"+
    "\1\u019f\31\12\14\0\1\u019f\11\12\21\0\1\12\26\0"+
    "\1\343\61\0\26\204\1\u01a0\3\204\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\22\204\1\u01a1"+
    "\7\204\1\0\1\u01a2\12\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\2\0\16\204\1\u01a3\13\204\14\0"+
    "\3\204\1\u01a3\6\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\15\204\1\u014e\14\204\14\0\2\204\1\u014e"+
    "\7\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\15\12\1\u01a4\14\12\14\0\2\12\1\u01a4\7\12\21\0"+
    "\1\12\20\0\1\u01a5\32\0\1\u01a5\34\0\14\12\1\u01a6"+
    "\15\12\14\0\12\12\21\0\1\12\3\0\2\12\1\u013f"+
    "\27\12\14\0\12\12\21\0\1\12\3\0\31\204\1\u01a7"+
    "\14\0\12\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\2\0\17\204\1\u01a8\12\204\14\0\12\204\4\0\1\204"+
    "\1\0\1\204\12\0\2\204\21\0\1\u01a9\65\0\21\204"+
    "\1\u01aa\10\204\14\0\4\204\1\u01aa\5\204\4\0\1\204"+
    "\1\0\1\204\12\0\2\204\2\0\2\12\1\103\27\12"+
    "\14\0\12\12\21\0\1\12\5\0\1\u01ab\102\0\17\12"+
    "\1\u01ac\12\12\14\0\12\12\21\0\1\12\3\0\17\204"+
    "\1\u01ad\12\204\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\16\204\1\u01ae\13\204\14\0\3\204"+
    "\1\u01ae\6\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\20\0\1\u01af\32\0\1\u01af\33\0\14\204\1\u01b0\15\204"+
    "\14\0\12\204\4\0\1\204\1\0\1\204\12\0\2\204"+
    "\6\0\1\u01b1\100\0\10\12\1\u01b2\21\12\1\u01b3\13\0"+
    "\12\12\21\0\1\12\3\0\16\204\1\u01b4\13\204\14\0"+
    "\3\204\1\u01b4\6\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\15\204\1\u01b5\14\204\14\0\2\204\1\u01b5"+
    "\7\204\4\0\1\204\1\0\1\204\12\0\2\204\17\0"+
    "\1\u01b6\32\0\1\u01b6\34\0\22\204\1\u01b7\7\204\1\0"+
    "\1\u01b8\12\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\13\12\1\u01b9\16\12\14\0\12\12\21\0"+
    "\1\12\16\0\1\u01ba\71\0\22\204\1\u01bb\7\204\14\0"+
    "\12\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\22\204\1\u01bc\7\204\1\0\1\u01bd\12\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\24\0\1\u01bd\10\0"+
    "\1\u01bd\51\0\6\204\1\u0149\23\204\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\10\0\1\u01be\76\0"+
    "\4\12\1\143\25\12\14\0\12\12\21\0\1\12\7\0"+
    "\1\u01bf\100\0\23\204\1\u01c0\6\204\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\4\204\1\u01c1"+
    "\25\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\6\0\1\u01c2\121\0\1\75\30\0\1\75\32\0"+
    "\31\204\1\u01c3\14\0\12\204\4\0\1\204\1\0\1\204"+
    "\12\0\2\204\2\0\31\204\1\u01c4\14\0\12\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\33\0\1\u01c5\53\0"+
    "\3\204\1\u01c6\26\204\14\0\1\204\1\u01c6\10\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\7\204\1\u01c7"+
    "\22\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\11\0\1\u01c8\75\0\1\u01c9\31\204\14\0\1\u01c9"+
    "\11\204\4\0\1\204\1\0\1\204\12\0\2\204\2\0"+
    "\4\204\1\u01ca\25\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\6\0\1\u01cb\100\0\23\204\1\u01cc"+
    "\6\204\14\0\12\204\4\0\1\204\1\0\1\204\12\0"+
    "\2\204\2\0\1\u01cd\31\204\14\0\1\u01cd\11\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\1\u01ce\45\0"+
    "\1\u01ce\36\0\1\u014e\31\204\14\0\1\u014e\11\204\4\0"+
    "\1\204\1\0\1\204\12\0\2\204\2\0\3\204\1\u01cf"+
    "\26\204\14\0\1\204\1\u01cf\10\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\5\0\1\u01d0\43\0\1\u01d0\35\0"+
    "\4\204\1\u01d1\25\204\14\0\12\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\6\0\1\u01d2\100\0\21\204\1\u0149"+
    "\10\204\14\0\4\204\1\u0149\5\204\4\0\1\204\1\0"+
    "\1\204\12\0\2\204\23\0\1\u01be\30\0\1\u01be\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\35\1\1\11\12\1\2\11\2\1\3\11"+
    "\1\1\1\11\4\1\1\11\4\1\1\11\20\1\1\0"+
    "\5\1\1\0\1\1\1\0\13\1\1\0\2\1\4\0"+
    "\1\11\1\1\2\0\1\11\2\1\1\0\15\1\2\0"+
    "\1\1\1\0\7\1\1\0\1\1\1\0\20\1\1\0"+
    "\2\1\1\0\5\1\1\0\1\1\1\0\3\1\1\0"+
    "\20\1\12\0\2\1\1\0\2\1\1\0\17\1\1\0"+
    "\1\1\1\0\5\1\1\0\11\1\1\0\3\1\1\0"+
    "\4\1\1\0\3\1\1\0\14\1\5\0\4\1\1\0"+
    "\14\1\1\11\1\1\1\0\10\1\1\0\7\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\11\1\3\0\1\1\1\11\13\1\1\0\4\1\2\0"+
    "\6\1\3\0\2\1\1\0\6\1\2\0\11\1\1\0"+
    "\5\1\3\0\7\1\2\0\5\1\1\0\3\1\2\0"+
    "\2\1\1\0\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\11\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return BRACKET;
            }
          case 26: break;
          case 2: 
            { lexeme = yytext(); return ERROR;
            }
          case 27: break;
          case 3: 
            { lexeme=yytext(); return IDENTIFIER;
            }
          case 28: break;
          case 4: 
            { lexeme=yytext(); return COMPARISON_OPERATOR;
            }
          case 29: break;
          case 5: 
            { lexeme=yytext(); return ARITHMETIC_OPERATOR;
            }
          case 30: break;
          case 6: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 31: break;
          case 7: 
            { lexeme = yytext(); return POINT;
            }
          case 32: break;
          case 8: 
            { lexeme=yytext(); return INTEGER;
            }
          case 33: break;
          case 9: 
            { lexeme=yytext(); return NEWLINE;
            }
          case 34: break;
          case 10: 
            { lexeme=yytext(); return WHITESPACE;
            }
          case 35: break;
          case 11: 
            { lexeme=yytext(); return SEMICOLON;
            }
          case 36: break;
          case 12: 
            { lexeme=yytext(); return COMMA;
            }
          case 37: break;
          case 13: 
            { lexeme=yytext(); return PARENTHESIS;
            }
          case 38: break;
          case 14: 
            { lexeme=yytext(); return BRACE;
            }
          case 39: break;
          case 15: 
            { lexeme=yytext(); return COMMENT;
            }
          case 40: break;
          case 16: 
            { lexeme=yytext(); return RESERVED_WORD;
            }
          case 41: break;
          case 17: 
            { lexeme=yytext(); return CONTROL_STRUCTURE;
            }
          case 42: break;
          case 18: 
            { lexeme = yytext(); return PHP;
            }
          case 43: break;
          case 19: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 44: break;
          case 20: 
            { lexeme=yytext(); return STRING;
            }
          case 45: break;
          case 21: 
            { lexeme=yytext(); return VARIABLE_ID;
            }
          case 46: break;
          case 22: 
            { lexeme=yytext(); return FLOATING_POINT_NUM;
            }
          case 47: break;
          case 23: 
            { lexeme=yytext(); return RESERVED_VARIABLE;
            }
          case 48: break;
          case 24: 
            { lexeme=yytext(); return OTHERRESERVED_VARIABLE;
            }
          case 49: break;
          case 25: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
