/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/GitHub/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\62\1\63\1\63\1\63\22\0\1\75\1\37\1\64"+
    "\1\0\1\65\1\44\1\45\1\61\1\70\1\70\1\42\1\41\1\67"+
    "\1\41\1\60\1\43\1\55\1\57\6\56\2\54\1\76\1\66\1\34"+
    "\1\36\1\35\1\40\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\12\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\12"+
    "\1\71\1\76\1\71\1\0\1\74\1\0\1\46\1\2\1\3\1\47"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\50"+
    "\1\51\1\20\1\12\1\52\1\22\1\23\1\24\1\25\1\26\1\53"+
    "\1\30\1\12\1\72\1\73\1\72\1\0\6\0\1\63\32\0\1\75"+
    "\137\0\60\0\2\31\115\0\1\32\u1500\0\1\75\u097f\0\13\75\35\0"+
    "\1\63\1\63\5\0\1\75\57\0\1\75\312\0\1\33\u0ed5\0\1\75"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\15\3\2\2\2\4\1\5\1\6\1\7"+
    "\4\5\1\6\4\3\2\10\1\7\1\2\1\11\1\12"+
    "\1\7\1\2\1\13\1\14\1\15\1\16\2\1\1\2"+
    "\20\3\3\0\2\4\1\0\2\10\1\2\1\17\1\3"+
    "\1\2\1\10\3\2\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\5\3\1\0\1\3\1\20\1\3\2\20\3\3"+
    "\1\0\1\3\1\0\1\3\2\0\1\20\3\0\1\10"+
    "\2\0\1\17\2\10\1\3\1\20\6\3\3\0\2\10"+
    "\1\17\6\3\3\0\3\3\2\0\3\3\2\0\1\3"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\77\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\77\0\u07e0\0\77\0\77\0\u081f\0\u085e\0\77"+
    "\0\77\0\77\0\77\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\77\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u07e0"+
    "\0\u07e0\0\u081f\0\u081f\0\u091b\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\176\0\u12f3\0\u1332\0\u1371\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u085e"+
    "\0\u103e\0\u107d\0\u17a0\0\77\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1665\0\u16a4\0\77"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\3"+
    "\1\11\4\3\1\12\2\3\1\13\1\14\1\15\1\3"+
    "\1\16\1\17\2\3\1\20\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\34\1\37\1\34\1\40\1\41"+
    "\2\40\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\45\1\42"+
    "\100\0\30\3\15\0\12\3\14\0\1\3\3\0\16\3"+
    "\1\57\1\3\1\60\7\3\15\0\3\3\1\57\1\60"+
    "\5\3\14\0\1\3\3\0\13\3\1\61\14\3\15\0"+
    "\12\3\14\0\1\3\3\0\16\3\1\62\11\3\15\0"+
    "\3\3\1\62\6\3\14\0\1\3\3\0\13\3\1\63"+
    "\12\3\1\64\1\3\15\0\5\3\1\64\4\3\14\0"+
    "\1\3\3\0\16\3\1\65\11\3\15\0\3\3\1\65"+
    "\6\3\14\0\1\3\3\0\14\3\1\66\1\67\12\3"+
    "\15\0\2\3\1\67\7\3\14\0\1\3\3\0\4\3"+
    "\1\70\16\3\1\71\4\3\15\0\12\3\14\0\1\3"+
    "\3\0\4\3\1\72\23\3\15\0\12\3\14\0\1\3"+
    "\3\0\22\3\1\73\5\3\15\0\12\3\14\0\1\3"+
    "\3\0\7\3\1\74\20\3\15\0\12\3\14\0\1\3"+
    "\3\0\16\3\1\75\11\3\15\0\3\3\1\75\6\3"+
    "\14\0\1\3\3\0\7\3\1\76\20\3\15\0\12\3"+
    "\14\0\1\3\17\0\1\77\1\100\31\0\1\100\51\0"+
    "\1\101\110\0\1\102\1\103\76\0\1\102\76\0\1\23"+
    "\1\104\75\0\1\102\1\33\5\0\7\33\17\0\1\33"+
    "\43\0\1\102\112\0\1\105\1\106\2\105\61\0\1\32"+
    "\76\0\1\107\1\110\72\0\1\33\5\0\7\33\17\0"+
    "\1\33\4\0\30\3\6\0\1\33\5\0\1\33\6\34"+
    "\4\3\13\0\1\33\1\3\3\0\16\3\1\62\11\3"+
    "\6\0\1\33\5\0\1\33\3\34\1\111\2\34\4\3"+
    "\13\0\1\33\1\3\3\0\4\3\1\70\16\3\1\71"+
    "\4\3\6\0\1\33\5\0\1\33\6\34\4\3\13\0"+
    "\1\33\1\3\3\0\4\3\1\72\23\3\6\0\1\33"+
    "\5\0\1\33\6\34\4\3\13\0\1\33\1\3\3\0"+
    "\17\47\1\112\10\47\15\0\6\47\4\40\1\113\17\0"+
    "\1\47\1\114\15\47\1\112\6\47\1\115\1\47\15\0"+
    "\5\47\1\115\1\116\3\117\1\113\16\0\61\120\1\121"+
    "\2\0\13\120\62\122\2\0\1\123\12\122\1\0\30\47"+
    "\15\0\12\47\111\0\2\54\42\0\1\33\5\0\7\33"+
    "\16\0\1\54\1\55\4\0\30\3\15\0\6\3\20\0"+
    "\1\124\3\0\16\3\1\125\11\3\15\0\3\3\1\125"+
    "\6\3\14\0\1\3\3\0\4\3\1\126\23\3\15\0"+
    "\12\3\14\0\1\3\3\0\1\127\27\3\15\0\1\127"+
    "\11\3\14\0\1\3\3\0\23\3\1\130\4\3\15\0"+
    "\12\3\14\0\1\3\3\0\21\3\1\131\6\3\1\0"+
    "\1\132\13\0\12\3\14\0\1\3\3\0\22\3\1\133"+
    "\5\3\15\0\12\3\14\0\1\3\3\0\20\3\1\134"+
    "\7\3\15\0\4\3\1\134\5\3\14\0\1\3\3\0"+
    "\17\3\1\135\10\3\15\0\12\3\14\0\1\3\3\0"+
    "\22\3\1\136\5\3\15\0\12\3\14\0\1\3\3\0"+
    "\25\3\1\137\2\3\15\0\12\3\14\0\1\3\3\0"+
    "\13\3\1\125\14\3\15\0\12\3\14\0\1\3\3\0"+
    "\22\3\1\140\5\3\15\0\12\3\14\0\1\3\3\0"+
    "\20\3\1\141\7\3\15\0\4\3\1\141\5\3\14\0"+
    "\1\3\3\0\10\3\1\142\17\3\1\143\14\0\12\3"+
    "\14\0\1\3\3\0\10\3\1\144\17\3\1\145\14\0"+
    "\12\3\14\0\1\3\3\0\10\3\1\146\17\3\1\147"+
    "\14\0\12\3\14\0\1\3\22\0\1\150\101\0\1\151"+
    "\74\0\1\152\30\0\1\152\61\0\1\102\77\0\1\2"+
    "\114\0\4\105\1\113\20\0\1\153\24\0\1\154\23\0"+
    "\1\154\1\0\3\155\1\113\16\0\42\156\1\157\17\156"+
    "\1\107\14\156\62\110\2\0\13\110\1\0\23\3\1\130"+
    "\4\3\6\0\1\33\5\0\1\33\6\34\4\3\13\0"+
    "\1\33\1\3\3\0\22\47\1\160\5\47\15\0\12\47"+
    "\73\0\4\113\20\0\30\47\15\0\7\47\1\161\1\47"+
    "\1\161\20\0\6\162\22\47\15\0\2\162\4\47\4\162"+
    "\20\0\17\47\1\112\10\47\15\0\6\47\4\116\20\0"+
    "\17\47\1\112\10\47\15\0\6\47\1\116\3\117\20\0"+
    "\13\3\1\134\14\3\15\0\12\3\14\0\1\3\3\0"+
    "\1\163\27\3\15\0\1\163\11\3\14\0\1\3\3\0"+
    "\21\3\1\142\6\3\1\0\1\143\13\0\12\3\14\0"+
    "\1\3\3\0\1\3\1\146\26\3\15\0\12\3\14\0"+
    "\1\3\3\0\4\3\1\134\23\3\15\0\12\3\14\0"+
    "\1\3\7\0\1\164\72\0\4\3\1\165\23\3\15\0"+
    "\12\3\14\0\1\3\3\0\13\3\1\166\14\3\15\0"+
    "\12\3\14\0\1\3\3\0\4\3\1\167\23\3\15\0"+
    "\12\3\14\0\1\3\3\0\1\170\27\3\15\0\1\170"+
    "\11\3\14\0\1\3\3\0\23\3\1\171\4\3\15\0"+
    "\12\3\14\0\1\3\3\0\10\3\1\172\17\3\1\173"+
    "\14\0\12\3\14\0\1\3\3\0\21\3\1\134\6\3"+
    "\1\0\1\164\13\0\12\3\14\0\1\3\24\0\1\164"+
    "\7\0\1\164\45\0\3\3\1\134\24\3\15\0\1\3"+
    "\1\134\10\3\14\0\1\3\6\0\1\164\42\0\1\164"+
    "\30\0\13\3\1\131\14\3\15\0\12\3\14\0\1\3"+
    "\16\0\1\132\76\0\1\174\67\0\1\175\102\0\1\173"+
    "\17\0\1\173\122\0\1\176\1\0\1\176\20\0\6\177"+
    "\37\0\2\177\4\0\4\177\74\0\3\155\17\0\42\156"+
    "\1\157\76\156\1\157\1\200\33\156\1\0\12\3\1\134"+
    "\15\3\2\0\1\164\12\0\12\3\14\0\1\3\3\0"+
    "\15\3\1\201\12\3\15\0\2\3\1\201\7\3\14\0"+
    "\1\3\3\0\4\3\1\202\23\3\15\0\12\3\14\0"+
    "\1\3\3\0\20\3\1\203\7\3\15\0\4\3\1\203"+
    "\5\3\14\0\1\3\3\0\20\3\1\204\7\3\15\0"+
    "\4\3\1\204\5\3\14\0\1\3\3\0\20\3\1\205"+
    "\7\3\15\0\4\3\1\205\5\3\14\0\1\3\3\0"+
    "\15\3\1\206\12\3\15\0\2\3\1\206\7\3\14\0"+
    "\1\3\20\0\1\207\31\0\1\207\33\0\1\210\112\0"+
    "\1\211\30\0\1\211\25\0\3\3\1\142\24\3\15\0"+
    "\1\3\1\142\10\3\14\0\1\3\3\0\14\3\1\212"+
    "\13\3\15\0\12\3\14\0\1\3\3\0\5\3\1\213"+
    "\22\3\15\0\12\3\14\0\1\3\3\0\20\3\1\214"+
    "\7\3\15\0\4\3\1\214\5\3\14\0\1\3\3\0"+
    "\15\3\1\134\12\3\15\0\2\3\1\134\7\3\14\0"+
    "\1\3\3\0\6\3\1\134\21\3\15\0\12\3\14\0"+
    "\1\3\11\0\1\164\104\0\1\215\67\0\1\216\71\0"+
    "\4\3\1\217\23\3\15\0\12\3\14\0\1\3\3\0"+
    "\1\220\27\3\15\0\1\220\11\3\14\0\1\3\3\0"+
    "\1\221\27\3\15\0\1\221\11\3\14\0\1\3\7\0"+
    "\1\222\72\0\1\223\44\0\1\223\31\0\15\3\1\224"+
    "\12\3\15\0\2\3\1\224\7\3\14\0\1\3\3\0"+
    "\2\3\1\131\25\3\15\0\12\3\14\0\1\3\3\0"+
    "\27\3\1\134\15\0\12\3\14\0\1\3\20\0\1\225"+
    "\31\0\1\225\31\0\1\132\74\0\22\3\1\142\5\3"+
    "\15\0\12\3\14\0\1\3\25\0\1\143\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8001];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\27\1\1\11\7\1\1\11\1\1\2\11"+
    "\2\1\4\11\23\1\3\0\1\11\1\1\1\0\13\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1\1\0\10\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\3\0\1\1"+
    "\2\0\4\1\1\11\6\1\3\0\2\1\1\11\6\1"+
    "\3\0\3\1\2\0\3\1\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); return BRACKET;
            }
          case 17: break;
          case 2: 
            { lexeme = yytext(); return ERROR;
            }
          case 18: break;
          case 3: 
            { lexeme = yytext(); return IDENTIFIER;
            }
          case 19: break;
          case 4: 
            { lexeme = yytext(); return COMPARISON_OPERATOR;
            }
          case 20: break;
          case 5: 
            { lexeme = yytext(); return ARITHMETIC_OPERATOR;
            }
          case 21: break;
          case 6: 
            { lexeme = yytext(); return LOGICAL_OPERATOR;
            }
          case 22: break;
          case 7: 
            { lexeme = yytext(); return POINT;
            }
          case 23: break;
          case 8: 
            { lexeme = yytext(); return CONSTANT;
            }
          case 24: break;
          case 9: 
            { lexeme = yytext(); return NEWLINE;
            }
          case 25: break;
          case 10: 
            { lexeme = yytext(); return WHITESPACE;
            }
          case 26: break;
          case 11: 
            { lexeme = yytext(); return SEMICOLON;
            }
          case 27: break;
          case 12: 
            { lexeme = yytext(); return COMMA;
            }
          case 28: break;
          case 13: 
            { lexeme = yytext(); return PARENTHESIS;
            }
          case 29: break;
          case 14: 
            { lexeme = yytext(); return BRACE;
            }
          case 30: break;
          case 15: 
            { lexeme = yytext(); return COMMENT;
            }
          case 31: break;
          case 16: 
            { lexeme = yytext(); return RESERVED_WORD;
            }
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
