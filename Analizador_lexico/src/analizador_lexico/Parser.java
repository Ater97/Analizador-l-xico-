
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 14:35:18 CST 2018
//----------------------------------------------------

package analizador_lexico;

import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 14:35:18 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\004\000\002\033" +
    "\004\000\002\033\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\004\004\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\051\002\000\002\006\006" +
    "\000\002\052\002\000\002\007\011\000\002\053\002\000" +
    "\002\007\011\000\002\010\004\000\002\010\002\000\002" +
    "\054\002\000\002\034\006\000\002\034\002\000\002\055" +
    "\002\000\002\011\012\000\002\040\004\000\002\040\002" +
    "\000\002\037\005\000\002\037\002\000\002\036\005\000" +
    "\002\036\002\000\002\035\004\000\002\035\002\000\002" +
    "\012\003\000\002\012\003\000\002\056\002\000\002\013" +
    "\010\000\002\041\004\000\002\041\002\000\002\014\010" +
    "\000\002\014\010\000\002\015\006\000\002\047\004\000" +
    "\002\047\002\000\002\050\004\000\002\050\002\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\010\000" +
    "\002\042\004\000\002\042\002\000\002\020\007\000\002" +
    "\021\012\000\002\045\003\000\002\045\002\000\002\022" +
    "\005\000\002\023\004\000\002\024\007\000\002\043\004" +
    "\000\002\044\005\000\002\044\002\000\002\025\005\000" +
    "\002\025\003\000\002\025\004\000\002\025\004\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\006\000\002\025" +
    "\010\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\026\003\000\002\026\005\000\002\026\006\000" +
    "\002\027\006\000\002\027\010\000\002\027\010\000\002" +
    "\030\006\000\002\030\010\000\002\031\004\000\002\031" +
    "\002\000\002\046\005\000\002\046\002\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\024\003\022\004\006\005\020\006\013\007" +
    "\017\010\014\011\024\014\021\065\015\001\002\000\006" +
    "\042\ufff0\065\345\001\002\000\026\002\ufffe\003\022\004" +
    "\006\005\020\006\013\007\017\010\014\011\024\014\021" +
    "\065\015\001\002\000\010\041\ufff5\042\ufff5\065\ufff5\001" +
    "\002\000\026\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\014\ufffa\065\ufffa\001\002\000" +
    "\026\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\014\ufffd\065\ufffd\001\002\000\004\037" +
    "\341\001\002\000\004\002\340\001\002\000\010\041\ufff3" +
    "\042\ufff3\065\ufff3\001\002\000\004\065\110\001\002\000" +
    "\010\041\ufff1\042\ufff1\065\ufff1\001\002\000\026\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\014\ufffb\065\ufffb\001\002\000\010\041\ufff2\042\ufff2" +
    "\065\ufff2\001\002\000\010\041\ufff4\042\ufff4\065\ufff4\001" +
    "\002\000\004\065\052\001\002\000\006\037\051\043\050" +
    "\001\002\000\026\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\065\ufffc\001\002" +
    "\000\004\065\025\001\002\000\010\012\uffe5\013\uffe5\042" +
    "\uffe5\001\002\000\010\012\027\013\uffe2\042\uffe2\001\002" +
    "\000\004\065\047\001\002\000\006\013\032\042\uffe0\001" +
    "\002\000\004\042\040\001\002\000\004\065\033\001\002" +
    "\000\006\042\uffde\044\034\001\002\000\004\065\036\001" +
    "\002\000\004\042\uffe1\001\002\000\006\042\uffde\044\034" +
    "\001\002\000\004\042\uffdf\001\002\000\020\004\006\005" +
    "\020\006\013\007\017\010\014\043\uffdc\065\015\001\002" +
    "\000\020\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\043" +
    "\uffdb\065\uffdb\001\002\000\004\043\046\001\002\000\020" +
    "\004\006\005\020\006\013\007\017\010\014\043\uffdc\065" +
    "\015\001\002\000\020\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\043\uffda\065\uffda\001\002\000\004\043\uffdd\001" +
    "\002\000\026\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\014\uffe4\065\uffe4\001\002\000" +
    "\006\013\uffe3\042\uffe3\001\002\000\026\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014" +
    "\ufff8\065\ufff8\001\002\000\026\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\065" +
    "\ufff9\001\002\000\004\042\uffd9\001\002\000\004\042\054" +
    "\001\002\000\020\004\006\005\020\006\013\007\017\010" +
    "\056\043\uffd6\065\015\001\002\000\006\042\ufff0\065\103" +
    "\001\002\000\004\065\063\001\002\000\004\043\062\001" +
    "\002\000\020\004\006\005\020\006\013\007\017\010\056" +
    "\043\uffd6\065\015\001\002\000\004\043\uffd7\001\002\000" +
    "\026\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\014\uffd8\065\uffd8\001\002\000\004\040" +
    "\064\001\002\000\016\004\006\005\020\006\013\007\017" +
    "\041\uffe9\065\015\001\002\000\006\042\ufff0\065\100\001" +
    "\002\000\006\041\uffe6\044\072\001\002\000\004\041\070" +
    "\001\002\000\004\037\071\001\002\000\020\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\043\uffd4\065\uffd4\001\002" +
    "\000\014\004\006\005\020\006\013\007\017\065\015\001" +
    "\002\000\004\041\uffea\001\002\000\006\041\uffe8\044\uffe8" +
    "\001\002\000\006\041\uffe6\044\072\001\002\000\004\041" +
    "\uffe7\001\002\000\004\042\101\001\002\000\010\037\ufff6" +
    "\041\ufff6\044\ufff6\001\002\000\004\043\102\001\002\000" +
    "\010\041\uffef\042\uffef\065\uffef\001\002\000\004\040\104" +
    "\001\002\000\016\004\006\005\020\006\013\007\017\041" +
    "\uffe9\065\015\001\002\000\004\041\106\001\002\000\004" +
    "\037\107\001\002\000\020\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\043\uffd5\065\uffd5\001\002\000\004\040\uffec" +
    "\001\002\000\004\040\112\001\002\000\016\004\006\005" +
    "\020\006\013\007\017\041\uffe9\065\015\001\002\000\004" +
    "\041\114\001\002\000\004\042\115\001\002\000\072\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\056\uffd1\062\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\001\002\000\030\002\uffeb\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb\043" +
    "\uffeb\065\uffeb\001\002\000\072\004\006\005\020\006\013" +
    "\007\017\015\136\017\153\020\127\021\143\022\150\023" +
    "\162\024\137\025\145\026\133\027\131\030\123\031\157" +
    "\032\135\033\147\037\130\040\121\042\115\043\uffcf\056" +
    "\122\062\163\065\142\066\144\067\140\070\132\001\002" +
    "\000\064\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\037\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\056\uffc8\062\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\001\002\000\040\024\137\025\145\026\133\027\131\030" +
    "\123\031\157\032\135\033\147\040\121\056\122\062\163" +
    "\065\165\066\144\067\140\070\132\001\002\000\040\024" +
    "\137\025\145\026\133\027\131\030\123\031\157\032\135" +
    "\033\147\040\121\056\122\062\163\065\165\066\144\067" +
    "\140\070\132\001\002\000\004\040\333\001\002\000\044" +
    "\037\uffb7\041\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\063\uffb7\064\uffb7\001\002\000\064\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\037\uffca\040\uffca\042\uffca\043\uffca\056\uffca" +
    "\062\uffca\065\uffca\066\uffca\067\uffca\070\uffca\001\002\000" +
    "\064\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\056\uffc7\062\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\001" +
    "\002\000\004\040\324\001\002\000\064\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\056\uffcd\062\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\001\002\000\004\040\322" +
    "\001\002\000\044\037\uff93\041\uff93\044\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\063\uff93\064\uff93\001" +
    "\002\000\004\040\315\001\002\000\064\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\056\uffcb\062\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\001\002\000\044\037\uff92" +
    "\041\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\063\uff92\064\uff92\001\002\000\004\040\306\001" +
    "\002\000\044\037\uffb1\041\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\064\uffb1\001\002" +
    "\000\044\037\uff94\041\uff94\044\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\063\uff94\064\uff94\001\002\000" +
    "\004\043\305\001\002\000\046\037\uffa0\040\166\042\ufff1" +
    "\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0" +
    "\064\uffa0\065\ufff1\001\002\000\042\024\137\025\145\026" +
    "\133\027\131\030\123\031\157\032\135\033\147\037\uffbf" +
    "\040\121\056\122\062\163\065\165\066\144\067\140\070" +
    "\132\001\002\000\044\037\uff91\041\uff91\044\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\063\uff91\064\uff91" +
    "\001\002\000\004\040\277\001\002\000\064\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\056\uffc6\062\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000\044\037" +
    "\uff90\041\uff90\044\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060" +
    "\uff90\061\uff90\063\uff90\064\uff90\001\002\000\004\037\276" +
    "\001\002\000\064\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\056\uffcc\062\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\001\002\000\036\037\275\046\205\047\175\051" +
    "\201\052\202\053\171\054\207\055\200\056\173\057\176" +
    "\060\172\061\203\063\174\064\177\001\002\000\004\040" +
    "\271\001\002\000\046\037\uffb2\041\uffb2\044\uffb2\045\267" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2" +
    "\064\uffb2\001\002\000\072\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\056\uffd2" +
    "\062\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\001\002\000" +
    "\062\015\136\017\153\020\127\021\143\022\150\023\162" +
    "\024\137\025\145\026\133\027\131\030\123\031\157\032" +
    "\135\033\147\037\130\040\121\042\115\043\uffcf\056\122" +
    "\062\163\065\165\066\144\067\140\070\132\001\002\000" +
    "\004\040\263\001\002\000\044\037\uffb0\041\uffb0\044\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0" +
    "\064\uffb0\001\002\000\064\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9\040" +
    "\uffc9\042\uffc9\043\uffc9\056\uffc9\062\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\001\002\000\004\040\252\001\002\000" +
    "\040\024\137\025\145\026\133\027\131\030\123\031\157" +
    "\032\135\033\147\040\121\056\122\062\163\065\165\066" +
    "\144\067\140\070\132\001\002\000\044\037\uffb5\041\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\200\056\173\057\176\060\172\061\203" +
    "\063\uffb5\064\uffb5\001\002\000\050\037\uffa0\040\166\041" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\063\uffa0\064\uffa0\001\002\000\042\024\137" +
    "\025\145\026\133\027\131\030\123\031\157\032\135\033" +
    "\147\040\121\041\uff97\056\122\062\163\065\165\066\144" +
    "\067\140\070\132\001\002\000\004\041\251\001\002\000" +
    "\040\041\uff95\044\204\046\205\047\175\051\201\052\202" +
    "\053\171\054\207\055\200\056\173\057\176\060\172\061" +
    "\203\063\174\064\177\001\002\000\040\024\137\025\145" +
    "\026\133\027\131\030\123\031\157\032\135\033\147\040" +
    "\121\056\122\062\163\065\165\066\144\067\140\070\132" +
    "\001\002\000\040\024\137\025\145\026\133\027\131\030" +
    "\123\031\157\032\135\033\147\040\121\056\122\062\163" +
    "\065\165\066\144\067\140\070\132\001\002\000\040\024" +
    "\137\025\145\026\133\027\131\030\123\031\157\032\135" +
    "\033\147\040\121\056\122\062\163\065\165\066\144\067" +
    "\140\070\132\001\002\000\040\024\137\025\145\026\133" +
    "\027\131\030\123\031\157\032\135\033\147\040\121\056" +
    "\122\062\163\065\165\066\144\067\140\070\132\001\002" +
    "\000\040\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\040\121\056\122\062\163\065\165" +
    "\066\144\067\140\070\132\001\002\000\040\024\137\025" +
    "\145\026\133\027\131\030\123\031\157\032\135\033\147" +
    "\040\121\056\122\062\163\065\165\066\144\067\140\070" +
    "\132\001\002\000\040\024\137\025\145\026\133\027\131" +
    "\030\123\031\157\032\135\033\147\040\121\056\122\062" +
    "\163\065\165\066\144\067\140\070\132\001\002\000\040" +
    "\024\137\025\145\026\133\027\131\030\123\031\157\032" +
    "\135\033\147\040\121\056\122\062\163\065\165\066\144" +
    "\067\140\070\132\001\002\000\010\034\216\035\217\065" +
    "\220\001\002\000\040\024\137\025\145\026\133\027\131" +
    "\030\123\031\157\032\135\033\147\040\121\056\122\062" +
    "\163\065\165\066\144\067\140\070\132\001\002\000\040" +
    "\024\137\025\145\026\133\027\131\030\123\031\157\032" +
    "\135\033\147\040\121\056\122\062\163\065\165\066\144" +
    "\067\140\070\132\001\002\000\040\024\137\025\145\026" +
    "\133\027\131\030\123\031\157\032\135\033\147\040\121" +
    "\056\122\062\163\065\165\066\144\067\140\070\132\001" +
    "\002\000\040\024\137\025\145\026\133\027\131\030\123" +
    "\031\157\032\135\033\147\040\121\056\122\062\163\065" +
    "\165\066\144\067\140\070\132\001\002\000\004\041\uff98" +
    "\001\002\000\040\024\137\025\145\026\133\027\131\030" +
    "\123\031\157\032\135\033\147\040\121\056\122\062\163" +
    "\065\165\066\144\067\140\070\132\001\002\000\044\037" +
    "\uffa8\041\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\200\056\173\057\176\060" +
    "\172\061\203\063\174\064\177\001\002\000\044\037\uffa9" +
    "\041\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\200\056\173\057\176\060\172" +
    "\061\203\063\174\064\177\001\002\000\040\041\uff95\044" +
    "\204\046\205\047\175\051\201\052\202\053\171\054\207" +
    "\055\200\056\173\057\176\060\172\061\203\063\174\064" +
    "\177\001\002\000\004\041\uff96\001\002\000\044\037\uffaa" +
    "\041\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\063\uffaa\064\uffaa\001\002\000\044\037\uffa6\041" +
    "\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\200\056\173\057\176\060\172\061" +
    "\203\063\174\064\177\001\002\000\004\040\235\001\002" +
    "\000\004\040\230\001\002\000\050\037\uff9f\040\225\041" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\063\uff9f\064\uff9f\001\002\000\004\040\222" +
    "\001\002\000\042\024\137\025\145\026\133\027\131\030" +
    "\123\031\157\032\135\033\147\040\121\041\uff97\056\122" +
    "\062\163\065\165\066\144\067\140\070\132\001\002\000" +
    "\004\041\224\001\002\000\044\037\uff9b\041\uff9b\044\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b" +
    "\064\uff9b\001\002\000\042\024\137\025\145\026\133\027" +
    "\131\030\123\031\157\032\135\033\147\040\121\041\uff97" +
    "\056\122\062\163\065\165\066\144\067\140\070\132\001" +
    "\002\000\004\041\227\001\002\000\044\037\uff9c\041\uff9c" +
    "\044\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\063\uff9c\064\uff9c\001\002\000\040\024\137\025\145\026" +
    "\133\027\131\030\123\031\157\032\135\033\147\040\121" +
    "\056\122\062\163\065\165\066\144\067\140\070\132\001" +
    "\002\000\036\044\232\046\205\047\175\051\201\052\202" +
    "\053\171\054\207\055\200\056\173\057\176\060\172\061" +
    "\203\063\174\064\177\001\002\000\040\024\137\025\145" +
    "\026\133\027\131\030\123\031\157\032\135\033\147\040" +
    "\121\056\122\062\163\065\165\066\144\067\140\070\132" +
    "\001\002\000\036\041\234\046\205\047\175\051\201\052" +
    "\202\053\171\054\207\055\200\056\173\057\176\060\172" +
    "\061\203\063\174\064\177\001\002\000\004\040\uff99\001" +
    "\002\000\040\024\137\025\145\026\133\027\131\030\123" +
    "\031\157\032\135\033\147\040\121\056\122\062\163\065" +
    "\165\066\144\067\140\070\132\001\002\000\036\041\237" +
    "\046\205\047\175\051\201\052\202\053\171\054\207\055" +
    "\200\056\173\057\176\060\172\061\203\063\174\064\177" +
    "\001\002\000\004\040\uff9a\001\002\000\044\037\uffae\041" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\176\060\172\061" +
    "\203\063\uffae\064\uffae\001\002\000\044\037\uffb3\041\uffb3" +
    "\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\200\056\173\057\176\060\172\061\203" +
    "\063\uffb3\064\uffb3\001\002\000\044\037\uffac\041\uffac\044" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\063" +
    "\uffac\064\uffac\001\002\000\036\046\205\047\175\050\244" +
    "\051\201\052\202\053\171\054\207\055\200\056\173\057" +
    "\176\060\172\061\203\063\174\064\177\001\002\000\046" +
    "\037\uff9e\041\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e\001\002\000" +
    "\044\037\uffb4\041\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\200\056\173\057" +
    "\176\060\172\061\203\063\uffb4\064\uffb4\001\002\000\044" +
    "\037\uffad\041\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\176" +
    "\060\172\061\203\063\uffad\064\uffad\001\002\000\044\037" +
    "\uffab\041\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\063\uffab\064\uffab\001\002\000\044\037\uffa7" +
    "\041\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\200\056\173\057\176\060\172" +
    "\061\203\063\174\064\177\001\002\000\044\037\uff9d\041" +
    "\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\063\uff9d\064\uff9d\001\002\000\040\024\137\025\145" +
    "\026\133\027\131\030\123\031\157\032\135\033\147\040" +
    "\121\056\122\062\163\065\165\066\144\067\140\070\132" +
    "\001\002\000\004\041\261\001\002\000\040\041\uffb9\044" +
    "\255\046\205\047\175\051\201\052\202\053\171\054\207" +
    "\055\200\056\173\057\176\060\172\061\203\063\174\064" +
    "\177\001\002\000\040\024\137\025\145\026\133\027\131" +
    "\030\123\031\157\032\135\033\147\040\121\056\122\062" +
    "\163\065\165\066\144\067\140\070\132\001\002\000\004" +
    "\041\uffbb\001\002\000\040\041\uffb9\044\255\046\205\047" +
    "\175\051\201\052\202\053\171\054\207\055\200\056\173" +
    "\057\176\060\172\061\203\063\174\064\177\001\002\000" +
    "\004\041\uffba\001\002\000\004\037\262\001\002\000\064" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc\056" +
    "\uffbc\062\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\001\002" +
    "\000\040\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\040\121\056\122\062\163\065\165" +
    "\066\144\067\140\070\132\001\002\000\036\041\265\046" +
    "\205\047\175\051\201\052\202\053\171\054\207\055\200" +
    "\056\173\057\176\060\172\061\203\063\174\064\177\001" +
    "\002\000\044\037\uffa1\041\uffa1\044\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1\001\002" +
    "\000\004\043\uffd0\001\002\000\040\024\137\025\145\026" +
    "\133\027\131\030\123\031\157\032\135\033\147\040\121" +
    "\056\122\062\163\065\165\066\144\067\140\070\132\001" +
    "\002\000\044\037\uffb8\041\uffb8\044\uffb8\046\205\047\175" +
    "\050\uffb8\051\201\052\202\053\171\054\207\055\200\056" +
    "\173\057\176\060\172\061\203\063\174\064\177\001\002" +
    "\000\040\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\040\121\056\122\062\163\065\165" +
    "\066\144\067\140\070\132\001\002\000\036\041\273\046" +
    "\205\047\175\051\201\052\202\053\171\054\207\055\200" +
    "\056\173\057\176\060\172\061\203\063\174\064\177\001" +
    "\002\000\060\015\136\017\153\020\127\021\143\022\150" +
    "\023\162\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\037\130\040\121\042\115\056\122" +
    "\062\163\065\165\066\144\067\140\070\132\001\002\000" +
    "\064\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2" +
    "\056\uffc2\062\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\001" +
    "\002\000\064\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\037\uffce\040\uffce\042\uffce" +
    "\043\uffce\056\uffce\062\uffce\065\uffce\066\uffce\067\uffce\070" +
    "\uffce\001\002\000\064\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\037\uffbd\040\uffbd" +
    "\042\uffbd\043\uffbd\056\uffbd\062\uffbd\065\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\001\002\000\004\065\300\001\002\000\004" +
    "\041\301\001\002\000\044\037\uffa5\041\uffa5\044\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\063\uffa5\064" +
    "\uffa5\001\002\000\004\037\304\001\002\000\040\037\uffc0" +
    "\041\uffc0\046\205\047\175\051\201\052\202\053\171\054" +
    "\207\055\200\056\173\057\176\060\172\061\203\063\174" +
    "\064\177\001\002\000\064\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\037\uffbe\040" +
    "\uffbe\042\uffbe\043\uffbe\056\uffbe\062\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\001\002\000\106\002\uffd3\003\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\056" +
    "\uffd3\062\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\040\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\040\121\056\122\062\163\065\165" +
    "\066\144\067\140\070\132\001\002\000\036\041\310\046" +
    "\205\047\175\051\201\052\202\053\171\054\207\055\200" +
    "\056\173\057\176\060\172\061\203\063\174\064\177\001" +
    "\002\000\060\015\136\017\153\020\127\021\143\022\150" +
    "\023\162\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\037\130\040\121\042\115\056\122" +
    "\062\163\065\165\066\144\067\140\070\132\001\002\000" +
    "\064\015\uffc3\016\312\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\056\uffc3\062\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\001" +
    "\002\000\060\015\136\017\153\020\127\021\143\022\150" +
    "\023\162\024\137\025\145\026\133\027\131\030\123\031" +
    "\157\032\135\033\147\037\130\040\121\042\115\056\122" +
    "\062\163\065\165\066\144\067\140\070\132\001\002\000" +
    "\064\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5" +
    "\056\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001" +
    "\002\000\064\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\037\uffc4\040\uffc4\042\uffc4" +
    "\043\uffc4\056\uffc4\062\uffc4\065\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\001\002\000\040\024\137\025\145\026\133\027\131" +
    "\030\123\031\157\032\135\033\147\040\121\056\122\062" +
    "\163\065\165\066\144\067\140\070\132\001\002\000\036" +
    "\044\317\046\205\047\175\051\201\052\202\053\171\054" +
    "\207\055\200\056\173\057\176\060\172\061\203\063\174" +
    "\064\177\001\002\000\014\004\006\005\020\006\013\007" +
    "\017\065\015\001\002\000\006\041\321\042\ufff0\001\002" +
    "\000\044\037\uffa4\041\uffa4\044\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\001\002\000" +
    "\004\041\323\001\002\000\044\037\uffa3\041\uffa3\044\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3" +
    "\064\uffa3\001\002\000\042\024\137\025\145\026\133\027" +
    "\131\030\123\031\157\032\135\033\147\037\uffbf\040\121" +
    "\056\122\062\163\065\165\066\144\067\140\070\132\001" +
    "\002\000\004\037\326\001\002\000\040\024\137\025\145" +
    "\026\133\027\131\030\123\031\157\032\135\033\147\040" +
    "\121\056\122\062\163\065\165\066\144\067\140\070\132" +
    "\001\002\000\036\037\330\046\205\047\175\051\201\052" +
    "\202\053\171\054\207\055\200\056\173\057\176\060\172" +
    "\061\203\063\174\064\177\001\002\000\042\024\137\025" +
    "\145\026\133\027\131\030\123\031\157\032\135\033\147" +
    "\040\121\041\uffbf\056\122\062\163\065\165\066\144\067" +
    "\140\070\132\001\002\000\004\041\332\001\002\000\064" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\056" +
    "\uffc1\062\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002" +
    "\000\004\041\334\001\002\000\044\037\uffa2\041\uffa2\044" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\064\uffa2\001\002\000\044\037\uffb6\041\uffb6\044\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\176\060\172\061\203\063\uffb6" +
    "\064\uffb6\001\002\000\036\041\337\046\205\047\175\051" +
    "\201\052\202\053\171\054\207\055\200\056\173\057\176" +
    "\060\172\061\203\063\174\064\177\001\002\000\044\037" +
    "\uffaf\041\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\063\uffaf\064\uffaf\001\002\000\004\002\000" +
    "\001\002\000\104\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\037\ufff7" +
    "\040\ufff7\042\ufff7\043\ufff7\056\ufff7\062\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\026\002\ufffe\003\022" +
    "\004\006\005\020\006\013\007\017\010\014\011\024\014" +
    "\021\065\015\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffff\001\002\000\006\037\ufff6\040\uffee\001\002\000" +
    "\004\040\347\001\002\000\016\004\006\005\020\006\013" +
    "\007\017\041\uffe9\065\015\001\002\000\004\041\351\001" +
    "\002\000\004\042\115\001\002\000\030\002\uffed\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\014" +
    "\uffed\043\uffed\065\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\022\002\011\003\004\004\007\005\010\006" +
    "\003\007\022\011\015\013\006\001\001\000\004\051\076" +
    "\001\001\000\022\003\341\004\007\005\010\006\003\007" +
    "\022\011\015\013\006\033\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\025\001\001\000\004\040" +
    "\027\001\001\000\002\001\001\000\004\037\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\036" +
    "\001\001\000\002\001\001\000\016\004\040\005\010\006" +
    "\003\007\043\012\042\035\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\040\005\010\006\003\007" +
    "\043\012\042\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\052\001\001\000\002" +
    "\001\001\000\010\006\054\014\057\041\056\001\001\000" +
    "\004\051\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\054\014\057\041\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\065" +
    "\006\064\010\066\001\001\000\004\051\076\001\001\000" +
    "\004\034\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\073\006\064\001\001\000" +
    "\002\001\001\000\004\054\074\001\001\000\004\034\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\065\006\064\010\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\110" +
    "\001\001\000\002\001\001\000\010\005\065\006\064\010" +
    "\112\001\001\000\002\001\001\000\004\015\115\001\001" +
    "\000\004\047\116\001\001\000\002\001\001\000\042\004" +
    "\154\005\010\006\064\015\145\016\155\017\150\020\133" +
    "\021\124\022\117\023\160\024\125\025\151\026\153\027" +
    "\157\032\123\050\140\001\001\000\002\001\001\000\012" +
    "\025\335\026\153\027\157\032\123\001\001\000\012\025" +
    "\334\026\153\027\157\032\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\302\026" +
    "\153\027\157\032\123\045\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\015" +
    "\145\016\155\017\150\020\133\021\124\022\117\023\160" +
    "\024\125\025\151\026\153\027\157\032\123\050\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\163\026\153\027\157\032" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\167\026\153\027\157\031\166\032\123\001\001\000" +
    "\002\001\001\000\004\046\205\001\001\000\012\025\247" +
    "\026\153\027\157\032\123\001\001\000\012\025\246\026" +
    "\153\027\157\032\123\001\001\000\012\025\245\026\153" +
    "\027\157\032\123\001\001\000\012\025\244\026\153\027" +
    "\157\032\123\001\001\000\012\025\242\026\153\027\157" +
    "\032\123\001\001\000\012\025\241\026\153\027\157\032" +
    "\123\001\001\000\012\025\240\026\153\027\157\032\123" +
    "\001\001\000\012\025\237\026\153\027\157\032\123\001" +
    "\001\000\004\030\220\001\001\000\012\025\214\026\153" +
    "\027\157\032\123\001\001\000\012\025\213\026\153\027" +
    "\157\032\123\001\001\000\012\025\211\026\153\027\157" +
    "\032\123\001\001\000\012\025\210\026\153\027\157\032" +
    "\123\001\001\000\002\001\001\000\012\025\207\026\153" +
    "\027\157\032\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\167" +
    "\026\153\027\157\031\222\032\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\167\026\153\027\157" +
    "\031\225\032\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\230\026\153\027\157\032\123\001\001" +
    "\000\002\001\001\000\012\025\232\026\153\027\157\032" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\235\026\153\027\157\032\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\253\026\153\027" +
    "\157\032\123\043\252\001\001\000\002\001\001\000\004" +
    "\044\255\001\001\000\012\025\256\026\153\027\157\032" +
    "\123\001\001\000\002\001\001\000\004\044\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\263\026\153\027\157\032\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\267\026\153\027\157\032\123\001\001\000\002\001\001" +
    "\000\012\025\271\026\153\027\157\032\123\001\001\000" +
    "\002\001\001\000\032\015\145\016\273\017\150\020\133" +
    "\021\124\022\117\023\160\024\125\025\151\026\153\027" +
    "\157\032\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\306\026\153\027" +
    "\157\032\123\001\001\000\002\001\001\000\032\015\145" +
    "\016\310\017\150\020\133\021\124\022\117\023\160\024" +
    "\125\025\151\026\153\027\157\032\123\001\001\000\004" +
    "\042\312\001\001\000\032\015\145\016\313\017\150\020" +
    "\133\021\124\022\117\023\160\024\125\025\151\026\153" +
    "\027\157\032\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\315\026\153\027\157\032\123\001\001" +
    "\000\002\001\001\000\004\006\317\001\001\000\004\051" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\302\026\153\027\157\032\123\045" +
    "\324\001\001\000\002\001\001\000\012\025\326\026\153" +
    "\027\157\032\123\001\001\000\002\001\001\000\014\025" +
    "\302\026\153\027\157\032\123\045\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\341\004" +
    "\007\005\010\006\003\007\022\011\015\013\006\033\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\345\001\001\000\002\001\001\000\010\005\065\006\064" +
    "\010\347\001\001\000\002\001\001\000\004\015\351\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public String ErrorM = "";
    public int ErrorNumber = 0;
    public SymbolTable STp = new SymbolTable();

   public void syntax_error(Symbol cur_token) {  
        ErrorNumber++;
        ErrorM += ErrorNumber + " Sintac Message Line: " + (cur_token.left+1) + " Col: " +(cur_token.right+1) + " Text: " + cur_token.value+"\n";
      try {
          STp.PrintE();
      } catch (IOException ex) {
          Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


        public SymbolTable ST = new SymbolTable();
        public Stack<String> scopes = new Stack<>();


       public ST getSymbolGlobal(String id)
        {
            if (scopes.empty() || scopes.size() <= 0||getStackElement(scopes,0)==null){
                if(ST.Search(id,"Global")){
                    System.out.println("Current Scope:: " + "Global");
                    return ST.getSymbol(id,"Global");}
                else {
                    return null;}
            }
            for (int i = scopes.size(); i > 0; --i) {
                System.out.println("Current Scope: " + getStackElement(scopes,i));
                if(ST.Search(id,getStackElement(scopes,i)))
                    return ST.getSymbol(id,getStackElement(scopes,i));
            }
            return null;
        }
        public Boolean SearchSymbolTable(String id)
        {
            System.out.println("SearchSymbolTable:: " + id);
            if (scopes.empty() || scopes.size() <= 0||getStackElement(scopes,0)==null){
                if(ST.Search(id,"Global")){
                    System.out.println("Current Scope:: " + "Global");
                    return true;}
                else {
                    return false;}
            }
            for (int i = scopes.size(); i > 0; --i) {
                System.out.println("Current Scope:: " + getStackElement(scopes,i));
                if(ST.Search(id,getStackElement(scopes,i)))
                    return true;
            }
            System.out.println("*ERROR the symbol isnt in the Symbol table "+ id);
            return false;
        }
        public String getType (Object obj){

            if (obj instanceof Integer||isInteger(obj.toString()))
                return "int";
            else if (obj instanceof Double||isDouble(obj.toString()))
                return "double";
            else if (obj instanceof Boolean||isBoolean(obj.toString()))
                return "bool";
            else if (obj instanceof String)
                {
                    if(SearchSymbolTable(obj.toString()))
                    {
                        ST tmp = ST.getSymbol(obj.toString(),checkScope());
                        return tmp.Type;
                    }
                    return "string";
                }
            else 
                return "n";
            // Integer temp = Integer.parseInt(String.valueOf(obj));
            //System.out.println(" \\ 0.0/ " + obj);
        }
        public boolean isDouble(String str) {
            try {
                Double.parseDouble(str);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }
        public boolean isInteger(String str) {
            try {
               Integer.parseInt(str);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }
        public boolean isBoolean(String str) {
            try {
               Boolean.parseBoolean(str);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }
        public String checkScope(){
            if (scopes.empty()||getStackElement(scopes,0)==null)
                return "Global";
            return scopes.peek();
        }
        public void newScope(String ambito)
        {
            if(ST.Search(ambito,checkScope()))
                    System.out.println("*Error two scopes with the same name " + checkScope()+"."+ambito );
            else{
            System.out.println("New Scope:: " + ambito);
            scopes.push(ambito);
            }
        }
        public void quitScope(){
            if (!scopes.empty())
                    scopes.pop();
        }
        

        public static <T> T getStackElement(Stack<T> stack, int index) {
            if(!stack.empty())
            {
                if (index == 0) {
                    return stack.peek();
                }
                T x = stack.pop();
                try {
                    return getStackElement(stack, index - 1);
                } finally {
                    stack.push(x);
                }
            }
            return null;
        }

    
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= NULL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ NULL / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= STRINGCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ STRINGCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= BOOLCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ BOOLCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= DOUBLECONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ DOUBLECONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= INTCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ INTCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ActualsA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualsA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActualsA ::= Comma Expr ActualsA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualsA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Actuals ::= Expr ActualsA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LibCall ::= SETBYTE LeftParenthesis Expr Comma Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LibCall ::= GETBYTE LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= Expr Point LibCall LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= Expr Point ident LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Call ::= ident LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LValue ::= Expr LeftBrace Expr RightBrace 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LValue ::= Expr Point ident 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
                                                System.out.println("Expr " + e.toString() +  ". ident " + i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LValue ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
                                            System.out.println("LValue:: " + i.toString());
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= MALLOC LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= READLINE LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= READINTEGER LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NEWARRAY LeftParenthesis Expr Comma Type RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= NEW LeftParenthesis ident RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr Logical_Op Expr 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LessEqual Expr 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr GreaterEqual Expr 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr Comparison_op Expr 
            {
              Object RESULT =null;
		RESULT=true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr mod Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) % ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) % ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr div Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) / ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) / ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr mult Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                if(SearchSymbolTable(e1.toString())){   
                                                    //ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    System.out.println("e1 Name:: " + e1.toString());
                                                    e1 = (Object)tmp.Value;
                                                    System.out.println("e1 Value:: " + e1.toString());
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    //ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                     System.out.println("e2 Name:: " + e2.toString());
                                                    e2 = (Object)tmp.Value;
                                                    System.out.println("e2 Value:: " + e2.toString());
                                                }
                                                if(getType(e1).equals(getType(e2)))
                                                { 
                                                    if(e1 == null)
                                                    {
                                                        RESULT = e2;}
                                                    if(e2 == null)
                                                    {
                                                        RESULT = e1;}
                                                }
                                                //System.out.println("plus::" + e1.toString() + " " + e2.toString());
                                                System.out.println("plus::" + getType(e1) + " " + getType(e2));
                                                 if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                   
                                                    RESULT = (Object)((Integer.parseInt(String.valueOf(e1))) + ((Integer.parseInt(String.valueOf(e2)))));}

                                                else if ((getType(e1).equals("double")) && (getType(e2).equals("double"))) {
                                                    RESULT = (Object)(((Double)e1) * ((Double)e2));}
                                                else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = (Object)(((Double)e1) * ((Double)e2));}
                                                else{
                                                        
                                                        System.out.println("UNKONW types " + e1 + " " + e2);
                                                    if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                        System.out.println("ERROR wrong types " + e1.toString() + " " + e2.toString());
                                                        System.out.println("*ERROR wrong types " + getType(e1) + " " + getType(e2));
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr Negation Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                if(SearchSymbolTable(e1.toString())){   
                                                    //ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    System.out.println("e1 Name:: " + e1.toString());
                                                    e1 = (Object)tmp.Value;
                                                    System.out.println("e1 Value:: " + e1.toString());
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    //ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                     System.out.println("e2 Name:: " + e2.toString());
                                                    e2 = (Object)tmp.Value;
                                                    System.out.println("e2 Value:: " + e2.toString());
                                                }
                                                if(getType(e1).equals(getType(e2)))
                                                { 
                                                    if(e1 == null)
                                                    {
                                                        RESULT = e2;}
                                                    if(e2 == null)
                                                    {
                                                        RESULT = e1;}
                                                }
                                                //System.out.println("minus::" + e1.toString() + " " + e2.toString());
                                                System.out.println("minus::" + getType(e1) + " " + getType(e2));
                                                if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                   
                                                    RESULT = (Object)((Integer.parseInt(String.valueOf(e1))) + ((Integer.parseInt(String.valueOf(e2)))));}

                                                else if ((getType(e1).equals("double")) && (getType(e2).equals("double"))) {
                                                    RESULT = (Object)(((Double)e1) - ((Double)e2));}
                                                else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = (Object)(((Double)e1) - ((Double)e2));}
                                                else{
                                                        
                                                        System.out.println("UNKONW types " + e1 + " " + e2);
                                                    if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                        System.out.println("ERROR wrong types " + e1.toString() + " " + e2.toString());
                                                        System.out.println("*ERROR wrong types " + getType(e1) + " " + getType(e2));
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr plus Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                if(SearchSymbolTable(e1.toString())){   
                                                    //ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    System.out.println("e1 Name:: " + e1.toString());
                                                    e1 = (Object)tmp.Value;
                                                    System.out.println("e1 Value:: " + e1.toString());
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    //ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                     System.out.println("e2 Name:: " + e2.toString());
                                                    e2 = (Object)tmp.Value;
                                                    System.out.println("e2 Value:: " + e2.toString());
                                                }
                                                if(getType(e1).equals(getType(e2)))
                                                { 
                                                    if(e1 == null)
                                                    {
                                                        RESULT = e2;}
                                                    if(e2 == null)
                                                    {
                                                        RESULT = e1;}
                                                }
                                                //System.out.println("plus::" + e1.toString() + " " + e2.toString());
                                                System.out.println("plus::" + getType(e1) + " " + getType(e2));
                                                if((getType(e1).equals("string")) && (getType(e2).equals("string"))){
                                                    RESULT = (Object)(e1.toString() + e2.toString());}

                                                else if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                   
                                                    RESULT = (Object)((Integer.parseInt(String.valueOf(e1))) + ((Integer.parseInt(String.valueOf(e2)))));}

                                                else if ((getType(e1).equals("double")) && (getType(e2).equals("double"))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else{
                                                        
                                                        System.out.println("UNKONW types " + e1 + " " + e2);
                                                    if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                        System.out.println("*ERROR wrong types " + e1.toString() + " " + e2.toString());
                                                        System.out.println("*ERROR wrong types " + getType(e1) + " " + getType(e2));
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= LValue 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr Greater Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                RESULT=true;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr Less Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                RESULT=true;

                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= EXCLA Expr 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Negation Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= LValue Equal Expr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
                                            System.out.println("Expr = LValue Equal Expr:: " + i + " " + e);
                                            if(SearchSymbolTable(i.toString())){   
                                                ST tmp = getSymbolGlobal(i.toString());
                                                    if(SearchSymbolTable(e.toString())){
                                                        ST tmp2 = getSymbolGlobal(e.toString());
                                                        e = (Object)tmp2.Value;
                                                    }
                                                //System.out.println("Tipo LValue:: "+ tmp.Name +" "+ tmp.Type +" Tipo Expr:: " + e.toString() + " " + getType(e));
                                                if(getType(e).equals(tmp.Type)){                  
                                                    RESULT = e;
                                                    ST.update(i.toString(),checkScope(),e.toString());
                                                }
                                                else{ 
                                                    System.out.println("*ERROR wrong types " + i.toString() + " " + e.toString());
                                                    System.out.println("*ERROR wrong types " + getType(i) + " " + getType(e));}
                                            }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PrintStmtAa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtAa",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintStmtAa ::= Comma Expr PrintStmtAa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtAa",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PrintStmtA ::= Expr PrintStmtAa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrintStmt ::= PRINT LeftParenthesis PrintStmtA RightParenthesis Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BreakStmt ::= BREAK Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnStmt ::= RETURN ForStmtA Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForStmtA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmtA ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForStmt ::= FOR LeftParenthesis ForStmtA Semicolon Expr Semicolon ForStmtA RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WhileStmt ::= WHILE LeftParenthesis Expr RightParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfStmtA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtA",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStmtA ::= ELSE Stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtA",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfStmt ::= IF LeftParenthesis Expr RightParenthesis Stmt IfStmtA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= Expr Semicolon 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtBlockB ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockB",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtBlockB ::= Stmt StmtBlockB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockB",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtBlockA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlockA ::= StmtBlockA VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlock ::= LeftBracket StmtBlockA StmtBlockB RightBracket 
            {
              Object RESULT =null;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= VOID ident LeftParenthesis Formals RightParenthesis Semicolon 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= Type ident LeftParenthesis Formals RightParenthesis Semicolon 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InterfaceDeclA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceDeclA ::= Prototype InterfaceDeclA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceDecl ::= INTERFACE ident NT$5 LeftBracket InterfaceDeclA RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
newScope(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDeclC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassDeclC ::= Field ClassDeclC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDeclBb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclBb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDeclBb ::= Comma ident ClassDeclBb 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclBb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDeclB ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDeclB ::= IMPLEMENTS ident ClassDeclBb 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(!ST.Search(i.toString(),checkScope())){ 
                                            ST.Insert(i.toString(),checkScope(),"Implements",null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDeclA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclA ::= EXTENDS ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!ST.Search(i.toString(),checkScope())){
                                            ST.Insert(i.toString(),checkScope(),"Extends",null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ident NT$4 ClassDeclA ClassDeclB LeftBracket ClassDeclC RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
    if(!ST.Search(i.toString(),checkScope())){
                                                ST.Insert(i.toString(),checkScope(),"Class",null);}
                                            newScope(i.toString());    
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormalsA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FormalsA ::= Comma Variable NT$3 FormalsA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
RESULT =v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= Variable FormalsA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= VOID ident NT$2 LeftParenthesis Formals RightParenthesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
                                            if(!ST.Search(i.toString(),checkScope())){
                                                RESULT = t; 
                                                ST.Insert(i.toString(),checkScope(),"Void",null);}
                                            newScope(i.toString());
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type ident NT$1 LeftParenthesis Formals RightParenthesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
   
                                            if(!ST.Search(i.toString(),checkScope())){
                                                RESULT = i; 
                                                ST.Insert(i.toString(),checkScope(),t.toString(),null);
                                            }
                                            newScope(i.toString());
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type NT$0 LeftBracket RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT ="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT ="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT ="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT ="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            System.out.println("Variable :: " + checkScope() + "." + i.toString());
                                            if(!ST.Search(i.toString(),checkScope())){
                                            RESULT = t; 
                                            ST.Insert(i.toString(),checkScope(),t.toString(),null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable Semicolon 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error RightBracket 
            {
              Object RESULT =null;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;
		ST.DictionaryToPrint();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

