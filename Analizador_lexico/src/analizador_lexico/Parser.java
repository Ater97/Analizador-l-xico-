
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 12:38:13 CST 2018
//----------------------------------------------------

package analizador_lexico;

import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 12:38:13 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\004\000\002\033" +
    "\004\000\002\033\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\004\004\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\051\002\000\002\006\006" +
    "\000\002\052\002\000\002\007\011\000\002\053\002\000" +
    "\002\007\011\000\002\010\004\000\002\010\002\000\002" +
    "\034\005\000\002\034\002\000\002\054\002\000\002\011" +
    "\012\000\002\040\004\000\002\040\002\000\002\037\005" +
    "\000\002\037\002\000\002\036\005\000\002\036\002\000" +
    "\002\035\004\000\002\035\002\000\002\012\003\000\002" +
    "\012\003\000\002\055\002\000\002\013\010\000\002\041" +
    "\004\000\002\041\002\000\002\056\002\000\002\014\011" +
    "\000\002\057\002\000\002\014\011\000\002\015\006\000" +
    "\002\047\004\000\002\047\002\000\002\050\004\000\002" +
    "\050\002\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\010\000\002\042\004\000\002\042\002\000\002" +
    "\020\007\000\002\021\012\000\002\045\003\000\002\045" +
    "\002\000\002\022\005\000\002\023\004\000\002\024\007" +
    "\000\002\043\004\000\002\044\005\000\002\044\002\000" +
    "\002\025\005\000\002\025\003\000\002\025\004\000\002" +
    "\025\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\010\000\002\025" +
    "\005\000\002\025\005\000\002\025\006\000\002\026\003" +
    "\000\002\026\005\000\002\026\006\000\002\027\006\000" +
    "\002\027\010\000\002\027\010\000\002\030\006\000\002" +
    "\030\010\000\002\031\004\000\002\031\002\000\002\046" +
    "\005\000\002\046\002\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\024\003\021\004\006\005\020\006\013\007" +
    "\017\010\014\011\024\014\022\063\015\001\002\000\006" +
    "\042\ufff0\063\342\001\002\000\026\002\ufffe\003\021\004" +
    "\006\005\020\006\013\007\017\010\014\011\024\014\022" +
    "\063\015\001\002\000\010\041\ufff5\042\ufff5\063\ufff5\001" +
    "\002\000\026\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\014\ufffa\063\ufffa\001\002\000" +
    "\026\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\014\ufffd\063\ufffd\001\002\000\004\037" +
    "\336\001\002\000\004\002\335\001\002\000\010\041\ufff3" +
    "\042\ufff3\063\ufff3\001\002\000\004\063\111\001\002\000" +
    "\010\041\ufff1\042\ufff1\063\ufff1\001\002\000\026\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\014\ufffb\063\ufffb\001\002\000\010\041\ufff2\042\ufff2" +
    "\063\ufff2\001\002\000\010\041\ufff4\042\ufff4\063\ufff4\001" +
    "\002\000\006\037\110\043\107\001\002\000\004\063\050" +
    "\001\002\000\026\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\063\ufffc\001\002" +
    "\000\004\063\025\001\002\000\010\012\uffe6\013\uffe6\042" +
    "\uffe6\001\002\000\010\012\027\013\uffe3\042\uffe3\001\002" +
    "\000\004\063\047\001\002\000\006\013\032\042\uffe1\001" +
    "\002\000\004\042\040\001\002\000\004\063\033\001\002" +
    "\000\006\042\uffdf\044\034\001\002\000\004\063\036\001" +
    "\002\000\004\042\uffe2\001\002\000\006\042\uffdf\044\034" +
    "\001\002\000\004\042\uffe0\001\002\000\020\004\006\005" +
    "\020\006\013\007\017\010\014\043\uffdd\063\015\001\002" +
    "\000\020\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\043" +
    "\uffdc\063\uffdc\001\002\000\004\043\046\001\002\000\020" +
    "\004\006\005\020\006\013\007\017\010\014\043\uffdd\063" +
    "\015\001\002\000\020\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\043\uffdb\063\uffdb\001\002\000\004\043\uffde\001" +
    "\002\000\026\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\014\uffe5\063\uffe5\001\002\000" +
    "\006\013\uffe4\042\uffe4\001\002\000\004\042\uffda\001\002" +
    "\000\004\042\052\001\002\000\020\004\006\005\020\006" +
    "\013\007\017\010\054\043\uffd7\063\015\001\002\000\006" +
    "\042\ufff0\063\101\001\002\000\004\063\061\001\002\000" +
    "\004\043\060\001\002\000\020\004\006\005\020\006\013" +
    "\007\017\010\054\043\uffd7\063\015\001\002\000\004\043" +
    "\uffd8\001\002\000\026\002\uffd9\003\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\014\uffd9\063\uffd9\001" +
    "\002\000\004\040\uffd4\001\002\000\004\040\063\001\002" +
    "\000\016\004\006\005\020\006\013\007\017\041\uffe9\063" +
    "\015\001\002\000\006\042\ufff0\063\076\001\002\000\006" +
    "\041\uffe7\044\071\001\002\000\004\041\067\001\002\000" +
    "\004\037\070\001\002\000\020\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\043\uffd3\063\uffd3\001\002\000\014\004" +
    "\006\005\020\006\013\007\017\063\015\001\002\000\004" +
    "\041\uffea\001\002\000\006\041\uffe7\044\071\001\002\000" +
    "\004\041\uffe8\001\002\000\004\042\077\001\002\000\010" +
    "\037\ufff6\041\ufff6\044\ufff6\001\002\000\004\043\100\001" +
    "\002\000\010\041\uffef\042\uffef\063\uffef\001\002\000\004" +
    "\040\uffd6\001\002\000\004\040\103\001\002\000\016\004" +
    "\006\005\020\006\013\007\017\041\uffe9\063\015\001\002" +
    "\000\004\041\105\001\002\000\004\037\106\001\002\000" +
    "\020\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\043\uffd5" +
    "\063\uffd5\001\002\000\026\002\ufff8\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\063\ufff8" +
    "\001\002\000\026\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\063\ufff9\001\002" +
    "\000\004\040\uffec\001\002\000\004\040\113\001\002\000" +
    "\016\004\006\005\020\006\013\007\017\041\uffe9\063\015" +
    "\001\002\000\004\041\115\001\002\000\004\042\116\001" +
    "\002\000\072\004\uffd0\005\uffd0\006\uffd0\007\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\037\uffd0\040\uffd0\042\uffd0\043\uffd0\054\uffd0\060\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000\030\002\uffeb" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\043\uffeb\063\uffeb\001\002\000\072\004\006" +
    "\005\020\006\013\007\017\015\137\017\154\020\130\021" +
    "\144\022\151\023\163\024\140\025\146\026\134\027\132" +
    "\030\124\031\160\032\136\033\150\037\131\040\122\042" +
    "\116\043\uffce\054\123\060\164\063\143\064\145\065\141" +
    "\066\133\001\002\000\064\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\054\uffc7\060\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\001\002\000\040\024\140\025\146\026" +
    "\134\027\132\030\124\031\160\032\136\033\150\040\122" +
    "\054\123\060\164\063\166\064\145\065\141\066\133\001" +
    "\002\000\040\024\140\025\146\026\134\027\132\030\124" +
    "\031\160\032\136\033\150\040\122\054\123\060\164\063" +
    "\166\064\145\065\141\066\133\001\002\000\004\040\330" +
    "\001\002\000\040\037\uffb6\041\uffb6\044\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\061\uffb6\062\uffb6\001\002\000\064\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\054\uffc9" +
    "\060\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002\000" +
    "\064\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6" +
    "\054\uffc6\060\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001" +
    "\002\000\004\040\321\001\002\000\064\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\037\uffcc\040\uffcc\042\uffcc\043\uffcc\054\uffcc\060\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000\004\040\317" +
    "\001\002\000\040\037\uff94\041\uff94\044\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\061\uff94\062\uff94\001\002\000\004\040" +
    "\312\001\002\000\064\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\037\uffca\040\uffca" +
    "\042\uffca\043\uffca\054\uffca\060\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\001\002\000\040\037\uff93\041\uff93\044\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\061\uff93\062\uff93\001\002" +
    "\000\004\040\303\001\002\000\040\037\uffb0\041\uffb0\044" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\001" +
    "\002\000\040\037\uff95\041\uff95\044\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\057\uff95\061\uff95\062\uff95\001\002\000\004\043\302" +
    "\001\002\000\042\037\uffa1\040\167\042\ufff1\045\uffa1\046" +
    "\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\061\uffa1\062\uffa1\063\ufff1\001\002\000" +
    "\042\024\140\025\146\026\134\027\132\030\124\031\160" +
    "\032\136\033\150\037\uffbe\040\122\054\123\060\164\063" +
    "\166\064\145\065\141\066\133\001\002\000\040\037\uff92" +
    "\041\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\061\uff92" +
    "\062\uff92\001\002\000\004\040\274\001\002\000\064\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\054\uffc5" +
    "\060\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000" +
    "\040\037\uff91\041\uff91\044\uff91\046\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057" +
    "\uff91\061\uff91\062\uff91\001\002\000\004\037\273\001\002" +
    "\000\064\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\037\uffcb\040\uffcb\042\uffcb\043" +
    "\uffcb\054\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\001\002\000\032\037\272\046\205\047\175\051\201\052" +
    "\202\053\200\054\174\055\176\056\172\057\203\061\173" +
    "\062\177\001\002\000\004\040\266\001\002\000\042\037" +
    "\uffb1\041\uffb1\044\uffb1\045\264\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\061\uffb1\062\uffb1\001\002\000\072\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\037\uffd1\040\uffd1\042\uffd1\043" +
    "\uffd1\054\uffd1\060\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\001\002\000\062\015\137\017\154\020\130\021\144\022" +
    "\151\023\163\024\140\025\146\026\134\027\132\030\124" +
    "\031\160\032\136\033\150\037\131\040\122\042\116\043" +
    "\uffce\054\123\060\164\063\166\064\145\065\141\066\133" +
    "\001\002\000\004\040\260\001\002\000\040\037\uffaf\041" +
    "\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf\062" +
    "\uffaf\001\002\000\064\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8\040\uffc8" +
    "\042\uffc8\043\uffc8\054\uffc8\060\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\001\002\000\004\040\247\001\002\000\040" +
    "\024\140\025\146\026\134\027\132\030\124\031\160\032" +
    "\136\033\150\040\122\054\123\060\164\063\166\064\145" +
    "\065\141\066\133\001\002\000\040\037\uffb4\041\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\200" +
    "\054\174\055\176\056\172\057\203\061\uffb4\062\uffb4\001" +
    "\002\000\044\037\uffa1\040\167\041\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\001\002" +
    "\000\042\024\140\025\146\026\134\027\132\030\124\031" +
    "\160\032\136\033\150\040\122\041\uff98\054\123\060\164" +
    "\063\166\064\145\065\141\066\133\001\002\000\004\041" +
    "\246\001\002\000\034\041\uff96\044\204\046\205\047\175" +
    "\051\201\052\202\053\200\054\174\055\176\056\172\057" +
    "\203\061\173\062\177\001\002\000\040\024\140\025\146" +
    "\026\134\027\132\030\124\031\160\032\136\033\150\040" +
    "\122\054\123\060\164\063\166\064\145\065\141\066\133" +
    "\001\002\000\040\024\140\025\146\026\134\027\132\030" +
    "\124\031\160\032\136\033\150\040\122\054\123\060\164" +
    "\063\166\064\145\065\141\066\133\001\002\000\040\024" +
    "\140\025\146\026\134\027\132\030\124\031\160\032\136" +
    "\033\150\040\122\054\123\060\164\063\166\064\145\065" +
    "\141\066\133\001\002\000\040\024\140\025\146\026\134" +
    "\027\132\030\124\031\160\032\136\033\150\040\122\054" +
    "\123\060\164\063\166\064\145\065\141\066\133\001\002" +
    "\000\040\024\140\025\146\026\134\027\132\030\124\031" +
    "\160\032\136\033\150\040\122\054\123\060\164\063\166" +
    "\064\145\065\141\066\133\001\002\000\040\024\140\025" +
    "\146\026\134\027\132\030\124\031\160\032\136\033\150" +
    "\040\122\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\040\024\140\025\146\026\134\027\132" +
    "\030\124\031\160\032\136\033\150\040\122\054\123\060" +
    "\164\063\166\064\145\065\141\066\133\001\002\000\010" +
    "\034\214\035\215\063\216\001\002\000\040\024\140\025" +
    "\146\026\134\027\132\030\124\031\160\032\136\033\150" +
    "\040\122\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\040\024\140\025\146\026\134\027\132" +
    "\030\124\031\160\032\136\033\150\040\122\054\123\060" +
    "\164\063\166\064\145\065\141\066\133\001\002\000\040" +
    "\024\140\025\146\026\134\027\132\030\124\031\160\032" +
    "\136\033\150\040\122\054\123\060\164\063\166\064\145" +
    "\065\141\066\133\001\002\000\040\024\140\025\146\026" +
    "\134\027\132\030\124\031\160\032\136\033\150\040\122" +
    "\054\123\060\164\063\166\064\145\065\141\066\133\001" +
    "\002\000\004\041\uff99\001\002\000\040\037\uffa8\041\uffa8" +
    "\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\200\054\174\055\176\056\172\057\203\061\173\062\177" +
    "\001\002\000\034\041\uff96\044\204\046\205\047\175\051" +
    "\201\052\202\053\200\054\174\055\176\056\172\057\203" +
    "\061\173\062\177\001\002\000\004\041\uff97\001\002\000" +
    "\040\037\uffa9\041\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\061\uffa9\062\uffa9\001\002\000\040\037\uffa7\041\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\200\054\174\055\176\056\172\057\203\061\173\062\177" +
    "\001\002\000\004\040\233\001\002\000\004\040\226\001" +
    "\002\000\044\037\uffa0\040\223\041\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0\001\002" +
    "\000\004\040\220\001\002\000\042\024\140\025\146\026" +
    "\134\027\132\030\124\031\160\032\136\033\150\040\122" +
    "\041\uff98\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\004\041\222\001\002\000\040\037\uff9c" +
    "\041\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\061\uff9c" +
    "\062\uff9c\001\002\000\042\024\140\025\146\026\134\027" +
    "\132\030\124\031\160\032\136\033\150\040\122\041\uff98" +
    "\054\123\060\164\063\166\064\145\065\141\066\133\001" +
    "\002\000\004\041\225\001\002\000\040\037\uff9d\041\uff9d" +
    "\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\061\uff9d\062\uff9d" +
    "\001\002\000\040\024\140\025\146\026\134\027\132\030" +
    "\124\031\160\032\136\033\150\040\122\054\123\060\164" +
    "\063\166\064\145\065\141\066\133\001\002\000\032\044" +
    "\230\046\205\047\175\051\201\052\202\053\200\054\174" +
    "\055\176\056\172\057\203\061\173\062\177\001\002\000" +
    "\040\024\140\025\146\026\134\027\132\030\124\031\160" +
    "\032\136\033\150\040\122\054\123\060\164\063\166\064" +
    "\145\065\141\066\133\001\002\000\032\041\232\046\205" +
    "\047\175\051\201\052\202\053\200\054\174\055\176\056" +
    "\172\057\203\061\173\062\177\001\002\000\004\040\uff9a" +
    "\001\002\000\040\024\140\025\146\026\134\027\132\030" +
    "\124\031\160\032\136\033\150\040\122\054\123\060\164" +
    "\063\166\064\145\065\141\066\133\001\002\000\032\041" +
    "\235\046\205\047\175\051\201\052\202\053\200\054\174" +
    "\055\176\056\172\057\203\061\173\062\177\001\002\000" +
    "\004\040\uff9b\001\002\000\040\037\uffad\041\uffad\044\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\176\056\172\057\203\061\uffad\062\uffad\001\002" +
    "\000\040\037\uffb2\041\uffb2\044\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\200\054\174\055\176\056\172" +
    "\057\203\061\uffb2\062\uffb2\001\002\000\040\037\uffab\041" +
    "\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062" +
    "\uffab\001\002\000\032\046\205\047\175\050\242\051\201" +
    "\052\202\053\200\054\174\055\176\056\172\057\203\061" +
    "\173\062\177\001\002\000\042\037\uff9f\041\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\062\uff9f" +
    "\001\002\000\040\037\uffac\041\uffac\044\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\176" +
    "\056\172\057\203\061\uffac\062\uffac\001\002\000\040\037" +
    "\uffb3\041\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\200\054\174\055\176\056\172\057\203\061" +
    "\uffb3\062\uffb3\001\002\000\040\037\uffaa\041\uffaa\044\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\001\002" +
    "\000\040\037\uff9e\041\uff9e\044\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\061\uff9e\062\uff9e\001\002\000\040\024\140\025" +
    "\146\026\134\027\132\030\124\031\160\032\136\033\150" +
    "\040\122\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\004\041\256\001\002\000\034\041\uffb8" +
    "\044\252\046\205\047\175\051\201\052\202\053\200\054" +
    "\174\055\176\056\172\057\203\061\173\062\177\001\002" +
    "\000\040\024\140\025\146\026\134\027\132\030\124\031" +
    "\160\032\136\033\150\040\122\054\123\060\164\063\166" +
    "\064\145\065\141\066\133\001\002\000\004\041\uffba\001" +
    "\002\000\034\041\uffb8\044\252\046\205\047\175\051\201" +
    "\052\202\053\200\054\174\055\176\056\172\057\203\061" +
    "\173\062\177\001\002\000\004\041\uffb9\001\002\000\004" +
    "\037\257\001\002\000\064\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\037\uffbb\040" +
    "\uffbb\042\uffbb\043\uffbb\054\uffbb\060\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\040\024\140\025\146\026" +
    "\134\027\132\030\124\031\160\032\136\033\150\040\122" +
    "\054\123\060\164\063\166\064\145\065\141\066\133\001" +
    "\002\000\032\041\262\046\205\047\175\051\201\052\202" +
    "\053\200\054\174\055\176\056\172\057\203\061\173\062" +
    "\177\001\002\000\040\037\uffa2\041\uffa2\044\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\001\002\000\004" +
    "\043\uffcf\001\002\000\040\024\140\025\146\026\134\027" +
    "\132\030\124\031\160\032\136\033\150\040\122\054\123" +
    "\060\164\063\166\064\145\065\141\066\133\001\002\000" +
    "\040\037\uffb7\041\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\200\054\174\055\176\056\172\057" +
    "\203\061\173\062\177\001\002\000\040\024\140\025\146" +
    "\026\134\027\132\030\124\031\160\032\136\033\150\040" +
    "\122\054\123\060\164\063\166\064\145\065\141\066\133" +
    "\001\002\000\032\041\270\046\205\047\175\051\201\052" +
    "\202\053\200\054\174\055\176\056\172\057\203\061\173" +
    "\062\177\001\002\000\060\015\137\017\154\020\130\021" +
    "\144\022\151\023\163\024\140\025\146\026\134\027\132" +
    "\030\124\031\160\032\136\033\150\037\131\040\122\042" +
    "\116\054\123\060\164\063\166\064\145\065\141\066\133" +
    "\001\002\000\064\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\043\uffc1\054\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\064\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\043\uffcd\054\uffcd\060\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\064\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\037" +
    "\uffbc\040\uffbc\042\uffbc\043\uffbc\054\uffbc\060\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\001\002\000\004\063\275\001" +
    "\002\000\004\041\276\001\002\000\040\037\uffa6\041\uffa6" +
    "\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6" +
    "\001\002\000\004\037\301\001\002\000\034\037\uffbf\041" +
    "\uffbf\046\205\047\175\051\201\052\202\053\200\054\174" +
    "\055\176\056\172\057\203\061\173\062\177\001\002\000" +
    "\064\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd" +
    "\054\uffbd\060\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001" +
    "\002\000\106\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\037" +
    "\uffd2\040\uffd2\042\uffd2\043\uffd2\054\uffd2\060\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\001\002\000\040\024\140\025" +
    "\146\026\134\027\132\030\124\031\160\032\136\033\150" +
    "\040\122\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\032\041\305\046\205\047\175\051\201" +
    "\052\202\053\200\054\174\055\176\056\172\057\203\061" +
    "\173\062\177\001\002\000\060\015\137\017\154\020\130" +
    "\021\144\022\151\023\163\024\140\025\146\026\134\027" +
    "\132\030\124\031\160\032\136\033\150\037\131\040\122" +
    "\042\116\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\064\015\uffc2\016\307\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\037\uffc2\040\uffc2" +
    "\042\uffc2\043\uffc2\054\uffc2\060\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\001\002\000\060\015\137\017\154\020\130" +
    "\021\144\022\151\023\163\024\140\025\146\026\134\027" +
    "\132\030\124\031\160\032\136\033\150\037\131\040\122" +
    "\042\116\054\123\060\164\063\166\064\145\065\141\066" +
    "\133\001\002\000\064\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\037\uffc4\040\uffc4" +
    "\042\uffc4\043\uffc4\054\uffc4\060\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\064\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\037\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\054\uffc3\060\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\001\002\000\040\024\140\025\146" +
    "\026\134\027\132\030\124\031\160\032\136\033\150\040" +
    "\122\054\123\060\164\063\166\064\145\065\141\066\133" +
    "\001\002\000\032\044\314\046\205\047\175\051\201\052" +
    "\202\053\200\054\174\055\176\056\172\057\203\061\173" +
    "\062\177\001\002\000\014\004\006\005\020\006\013\007" +
    "\017\063\015\001\002\000\006\041\316\042\ufff0\001\002" +
    "\000\040\037\uffa5\041\uffa5\044\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\061\uffa5\062\uffa5\001\002\000\004\041\320\001" +
    "\002\000\040\037\uffa4\041\uffa4\044\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\061\uffa4\062\uffa4\001\002\000\042\024\140" +
    "\025\146\026\134\027\132\030\124\031\160\032\136\033" +
    "\150\037\uffbe\040\122\054\123\060\164\063\166\064\145" +
    "\065\141\066\133\001\002\000\004\037\323\001\002\000" +
    "\040\024\140\025\146\026\134\027\132\030\124\031\160" +
    "\032\136\033\150\040\122\054\123\060\164\063\166\064" +
    "\145\065\141\066\133\001\002\000\032\037\325\046\205" +
    "\047\175\051\201\052\202\053\200\054\174\055\176\056" +
    "\172\057\203\061\173\062\177\001\002\000\042\024\140" +
    "\025\146\026\134\027\132\030\124\031\160\032\136\033" +
    "\150\040\122\041\uffbe\054\123\060\164\063\166\064\145" +
    "\065\141\066\133\001\002\000\004\041\327\001\002\000" +
    "\064\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\037\uffc0\040\uffc0\042\uffc0\043\uffc0" +
    "\054\uffc0\060\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\001" +
    "\002\000\004\041\331\001\002\000\040\037\uffa3\041\uffa3" +
    "\044\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3" +
    "\001\002\000\040\037\uffb5\041\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\176" +
    "\056\172\057\203\061\uffb5\062\uffb5\001\002\000\032\041" +
    "\334\046\205\047\175\051\201\052\202\053\200\054\174" +
    "\055\176\056\172\057\203\061\173\062\177\001\002\000" +
    "\040\037\uffae\041\uffae\044\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057" +
    "\uffae\061\uffae\062\uffae\001\002\000\004\002\000\001\002" +
    "\000\104\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\037\ufff7\040\ufff7" +
    "\042\ufff7\043\ufff7\054\ufff7\060\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\001\002\000\026\002\ufffe\003\021\004\006" +
    "\005\020\006\013\007\017\010\014\011\024\014\022\063" +
    "\015\001\002\000\004\002\001\001\002\000\004\002\uffff" +
    "\001\002\000\006\037\ufff6\040\uffee\001\002\000\004\040" +
    "\344\001\002\000\016\004\006\005\020\006\013\007\017" +
    "\041\uffe9\063\015\001\002\000\004\041\346\001\002\000" +
    "\004\042\116\001\002\000\030\002\uffed\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\043" +
    "\uffed\063\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\002\011\003\004\004\007\005\010\006" +
    "\003\007\022\011\015\013\006\001\001\000\004\051\074" +
    "\001\001\000\022\003\336\004\007\005\010\006\003\007" +
    "\022\011\015\013\006\033\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\025\001\001\000\004\040" +
    "\027\001\001\000\002\001\001\000\004\037\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\036" +
    "\001\001\000\002\001\001\000\016\004\040\005\010\006" +
    "\003\007\043\012\042\035\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\040\005\010\006\003\007" +
    "\043\012\042\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\050\001\001\000\002\001\001\000\010\006\052\014\055" +
    "\041\054\001\001\000\004\051\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\052\014\055\041\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\061\001\001\000\002\001\001\000\010\005\064\006\063" +
    "\010\065\001\001\000\004\051\074\001\001\000\004\034" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\072\006\063\001\001\000\002\001" +
    "\001\000\004\034\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\101\001\001\000\002\001\001\000\010" +
    "\005\064\006\063\010\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\111\001\001\000\002\001\001\000" +
    "\010\005\064\006\063\010\113\001\001\000\002\001\001" +
    "\000\004\015\116\001\001\000\004\047\117\001\001\000" +
    "\002\001\001\000\042\004\155\005\010\006\063\015\146" +
    "\016\156\017\151\020\134\021\125\022\120\023\161\024" +
    "\126\025\152\026\154\027\160\032\124\050\141\001\001" +
    "\000\002\001\001\000\012\025\332\026\154\027\160\032" +
    "\124\001\001\000\012\025\331\026\154\027\160\032\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\277\026\154\027\160\032\124\045\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\015\146\016\156\017\151\020\134" +
    "\021\125\022\120\023\161\024\126\025\152\026\154\027" +
    "\160\032\124\050\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\164\026\154\027\160\032\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\170\026\154\027\160\031" +
    "\167\032\124\001\001\000\002\001\001\000\004\046\205" +
    "\001\001\000\012\025\244\026\154\027\160\032\124\001" +
    "\001\000\012\025\243\026\154\027\160\032\124\001\001" +
    "\000\012\025\242\026\154\027\160\032\124\001\001\000" +
    "\012\025\240\026\154\027\160\032\124\001\001\000\012" +
    "\025\237\026\154\027\160\032\124\001\001\000\012\025" +
    "\236\026\154\027\160\032\124\001\001\000\012\025\235" +
    "\026\154\027\160\032\124\001\001\000\004\030\216\001" +
    "\001\000\012\025\212\026\154\027\160\032\124\001\001" +
    "\000\012\025\211\026\154\027\160\032\124\001\001\000" +
    "\012\025\207\026\154\027\160\032\124\001\001\000\012" +
    "\025\206\026\154\027\160\032\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\170\026\154\027\160\031\220\032\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\170" +
    "\026\154\027\160\031\223\032\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\226\026\154\027\160" +
    "\032\124\001\001\000\002\001\001\000\012\025\230\026" +
    "\154\027\160\032\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\233\026\154\027\160\032\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\250\026\154\027" +
    "\160\032\124\043\247\001\001\000\002\001\001\000\004" +
    "\044\252\001\001\000\012\025\253\026\154\027\160\032" +
    "\124\001\001\000\002\001\001\000\004\044\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\260\026\154\027\160\032\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\264\026\154\027\160\032\124\001\001\000\002\001\001" +
    "\000\012\025\266\026\154\027\160\032\124\001\001\000" +
    "\002\001\001\000\032\015\146\016\270\017\151\020\134" +
    "\021\125\022\120\023\161\024\126\025\152\026\154\027" +
    "\160\032\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\303\026\154\027" +
    "\160\032\124\001\001\000\002\001\001\000\032\015\146" +
    "\016\305\017\151\020\134\021\125\022\120\023\161\024" +
    "\126\025\152\026\154\027\160\032\124\001\001\000\004" +
    "\042\307\001\001\000\032\015\146\016\310\017\151\020" +
    "\134\021\125\022\120\023\161\024\126\025\152\026\154" +
    "\027\160\032\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\312\026\154\027\160\032\124\001\001" +
    "\000\002\001\001\000\004\006\314\001\001\000\004\051" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\277\026\154\027\160\032\124\045" +
    "\321\001\001\000\002\001\001\000\012\025\323\026\154" +
    "\027\160\032\124\001\001\000\002\001\001\000\014\025" +
    "\277\026\154\027\160\032\124\045\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\336\004" +
    "\007\005\010\006\003\007\022\011\015\013\006\033\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\342\001\001\000\002\001\001\000\010\005\064\006\063" +
    "\010\344\001\001\000\002\001\001\000\004\015\346\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public String ErrorM = "";
    public int ErrorNumber = 0;
    public SymbolTable STp = new SymbolTable();

   public void syntax_error(Symbol cur_token) {  
        ErrorNumber++;
        ErrorM += ErrorNumber + " Sintac Message Line: " + (cur_token.left+1) + " Col: " +(cur_token.right+1) + " Text: " + cur_token.value+"\n";
      try {
          STp.PrintE();
      } catch (IOException ex) {
          Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


        public SymbolTable ST = new SymbolTable();
        public Stack<String> scopes = new Stack<>();


       public ST getSymbolGlobal(String id)
        {
            if (scopes.empty() || scopes.size() <= 0||getStackElement(scopes,0)==null){
                if(ST.Search(id,"Global")){
                    System.out.println("Current Scope:: " + "Global");
                    return ST.getSymbol(id,"Global");}
                else {
                    return null;}
            }
            for (int i = scopes.size(); i > 0; --i) {
                System.out.println("Current Scope: " + getStackElement(scopes,i));
                if(ST.Search(id,getStackElement(scopes,i)))
                    return ST.getSymbol(id,getStackElement(scopes,i));
            }
            return null;
        }
        public Boolean SearchSymbolTable(String id)
        {
            System.out.println("SearchSymbolTable:: " + id);
            if (scopes.empty() || scopes.size() <= 0||getStackElement(scopes,0)==null){
                if(ST.Search(id,"Global")){
                    System.out.println("Current Scope:: " + "Global");
                    return true;}
                else {
                    return false;}
            }
            for (int i = scopes.size(); i > 0; --i) {
                System.out.println("Current Scope:: " + getStackElement(scopes,i));
                if(ST.Search(id,getStackElement(scopes,i)))
                    return true;
            }
            System.out.println("*ERROR the symbol isnt in the Symbol table "+ id);
            return false;
        }
        public String getType (Object obj){
            if (obj instanceof Integer)
                return "int";
            else if (obj instanceof Double)
                return "double";
            else if (obj instanceof Boolean)
                return "bool";
            else if (obj instanceof String)
                {
                    if(SearchSymbolTable(obj.toString()))
                    {
                        ST tmp = ST.getSymbol(obj.toString(),checkScope());
                        return tmp.Type;
                    }
                    return "string";
                }
            else 
                return "n";
            // Integer temp = Integer.parseInt(String.valueOf(obj));
            //System.out.println(" \\ 0.0/ " + obj);
        }
        public String checkScope(){
            if (scopes.empty()||getStackElement(scopes,0)==null)
                return "Global";
            return scopes.peek();
        }
        public void newScope(String ambito)
        {
            if(ST.Search(ambito,checkScope()))
                    System.out.println("*Error two scopes with the same name " + checkScope()+"."+ambito );
            else{
            System.out.println("New Scope:: " + ambito);
            scopes.push(ambito);
            }
        }
        public void quitScope(){
            if (!scopes.empty())
                    scopes.pop();
        }
        

        public static <T> T getStackElement(Stack<T> stack, int index) {
            if(!stack.empty())
            {
                if (index == 0) {
                    return stack.peek();
                }
                T x = stack.pop();
                try {
                    return getStackElement(stack, index - 1);
                } finally {
                    stack.push(x);
                }
            }
            return null;
        }

    
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= NULL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ NULLCONS / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= STRINGCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ STRINGCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= BOOLCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ BOOLCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= DOUBLECONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ DOUBLECONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Constant ::= INTCONSTANT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(" \\ INTCONSTANT / "+v); RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActualsA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualsA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActualsA ::= Comma Expr ActualsA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActualsA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Actuals ::= Expr ActualsA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LibCall ::= SETBYTE LeftParenthesis Expr Comma Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LibCall ::= GETBYTE LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= Expr Point LibCall LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Call ::= Expr Point ident LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Call ::= ident LeftParenthesis Actuals RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LValue ::= Expr LeftBrace Expr RightBrace 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LValue ::= Expr Point ident 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("Expr " + e.toString() +  ". ident " + i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LValue ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
                                            System.out.println("LValue:: " + i.toString());
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= MALLOC LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= READLINE LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= READINTEGER LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= NEWARRAY LeftParenthesis Expr Comma Type RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= NEW LeftParenthesis ident RightParenthesis 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr Logical_Op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr Comparison_op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr mod Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) % ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) % ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr div Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) / ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) / ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr mult Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) * ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double")) && ((getType(e2).equals("int"))||(getType(e2).equals("double"))))) {
                                                    RESULT = ((Double)e1) * ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr Negation Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) - ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) - ((Double)e2);
                                                }else{
                                                    //RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr plus Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                if(SearchSymbolTable(e1.toString())){   
                                                    //ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    //ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                    e2 = tmp.Value;
                                                }
                                                if(getType(e1).equals(getType(e2)))
                                                {
                                                    if(e1 == null)
                                                    {
                                                        RESULT = e2;
                                                    }
                                                    if(e2 == null)
                                                    {
                                                        RESULT = e1;
                                                    }
                                                }

                                                if((getType(e1).equals("string")) && (getType(e2).equals("string"))){
                                                    RESULT = (Object)(e1.toString() + e2.toString());}

                                                else if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    System.out.println("plus::" + e1.toString() + " " + e2.toString());
                                                    RESULT = (Object)((Integer.parseInt(String.valueOf(e1))) + ((Integer.parseInt(String.valueOf(e2)))));}

                                                else if ((getType(e1).equals("double")) && (getType(e2).equals("double"))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else{
                                                        
                                                        System.out.println("UNKONW types " + e1 + " " + e2);
                                                    if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                        System.out.println("ERROR wrong types " + e1.toString() + " " + e2.toString());
                                                }
                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= LeftParenthesis Expr RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= LValue 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr Greater Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(SearchSymbolTable(e1.toString())){   
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                    e2 = tmp.Value;
                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr Less Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(SearchSymbolTable(e1.toString())){   
                                                    ST tmp = getSymbolGlobal(e1.toString());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    ST tmp = getSymbolGlobal(e2.toString());
                                                    e2 = tmp.Value;
                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= EXCLA Expr 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Negation Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= LValue Equal Expr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
                                                System.out.println("Expr = LValue Equal Expr:: " + i + " " + e);
                                        if(SearchSymbolTable(i.toString())){   
                                            ST tmp = getSymbolGlobal(i.toString());
                                            getType(e);
                                            System.out.println("Tipo LValue:: "+ tmp.Name +" "+ tmp.Type +" Tipo Expr:: " + e.toString() + " " + getType(e));
                                            if(getType(e).equals(tmp.Type)){                  
                                                RESULT = e;
                                                ST.update(i.toString(),checkScope(),e.toString());
                                            }
                                            else{ 
                                                System.out.println("*ERROR wrong types " + i.toString() + " " + e.toString());}
                                            }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PrintStmtAa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtAa",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PrintStmtAa ::= Comma Expr PrintStmtAa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtAa",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintStmtA ::= Expr PrintStmtAa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmtA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PrintStmt ::= PRINT LeftParenthesis PrintStmtA RightParenthesis Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BreakStmt ::= BREAK Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReturnStmt ::= RETURN ForStmtA Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForStmtA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForStmtA ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmt ::= FOR LeftParenthesis ForStmtA Semicolon Expr Semicolon ForStmtA RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStmt ::= WHILE LeftParenthesis Expr RightParenthesis Stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfStmtA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtA",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfStmtA ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtA",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStmt ::= IF LeftParenthesis Expr RightParenthesis Stmt IfStmtA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= Expr Semicolon 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtBlockB ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockB",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtBlockB ::= Stmt StmtBlockB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockB",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtBlockA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtBlockA ::= StmtBlockA VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlockA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= LeftBracket StmtBlockA StmtBlockB RightBracket 
            {
              Object RESULT =null;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= VOID ident NT$6 LeftParenthesis Formals RightParenthesis Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
newScope(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= Type ident NT$5 LeftParenthesis Formals RightParenthesis Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
newScope(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceDeclA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceDeclA ::= Prototype InterfaceDeclA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclA",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceDecl ::= INTERFACE ident NT$4 LeftBracket InterfaceDeclA RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
newScope(i.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassDeclC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDeclC ::= Field ClassDeclC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDeclBb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclBb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDeclBb ::= Comma ident ClassDeclBb 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclBb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDeclB ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDeclB ::= IMPLEMENTS ident ClassDeclBb 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(!ST.Search(i.toString(),checkScope())){ 
                                            ST.Insert(i.toString(),checkScope(),"Implements",null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDeclA ::= EXTENDS ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!ST.Search(i.toString(),checkScope())){
                                            ST.Insert(i.toString(),checkScope(),"Extends",null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ident NT$3 ClassDeclA ClassDeclB LeftBracket ClassDeclC RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
    if(!ST.Search(i.toString(),checkScope())){
                                                ST.Insert(i.toString(),checkScope(),"Class",null);}
                                            newScope(i.toString());    
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FormalsA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalsA ::= Comma Variable FormalsA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= Variable FormalsA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDecl ::= VOID ident NT$2 LeftParenthesis Formals RightParenthesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
                                            if(!ST.Search(i.toString(),checkScope())){
                                                RESULT = t; 
                                                ST.Insert(i.toString(),checkScope(),"Void",null);}
                                            newScope(i.toString());
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type ident NT$1 LeftParenthesis Formals RightParenthesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
   
                                            if(!ST.Search(i.toString(),checkScope())){
                                                RESULT = i; 
                                                ST.Insert(i.toString(),checkScope(),t.toString(),null);
                                            }
                                            newScope(i.toString());
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type NT$0 LeftBracket RightBracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT ="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT ="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT ="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT ="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                            System.out.println("Variable :: " + checkScope() + "." + i.toString());
                                            if(!ST.Search(i.toString(),checkScope())){
                                            RESULT = t; 
                                            ST.Insert(i.toString(),checkScope(),t.toString(),null);}
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable Semicolon 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error RightBracket 
            {
              Object RESULT =null;
		 quitScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error Semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramA ::= Decl ProgramA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Decl ProgramA 
            {
              Object RESULT =null;
		ST.DictionaryToPrint();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

