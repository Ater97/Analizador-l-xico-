/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/GitHub/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\70\1\71\1\71\1\71\22\0\1\75\1\35\1\72"+
    "\1\0\1\63\1\42\1\43\1\67\1\64\1\64\1\40\1\37\1\64"+
    "\1\37\1\62\1\41\1\54\1\61\6\57\2\53\1\64\1\64\1\32"+
    "\1\34\1\33\1\36\1\0\1\30\1\60\2\56\1\50\1\45\5\74"+
    "\1\51\1\74\1\27\3\74\1\46\1\52\1\44\1\47\2\74\1\55"+
    "\2\74\1\64\1\64\1\64\1\0\1\73\1\0\1\17\1\10\1\16"+
    "\1\4\1\12\1\20\1\15\1\21\1\3\1\74\1\26\1\11\1\23"+
    "\1\5\1\2\1\24\1\74\1\14\1\13\1\6\1\7\1\1\1\25"+
    "\1\22\1\31\1\74\1\65\1\66\1\65\1\0\6\0\1\71\32\0"+
    "\1\75\137\0\u1580\0\1\75\u097f\0\13\75\35\0\1\71\1\71\5\0"+
    "\1\75\57\0\1\75\u0fa0\0\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\17\3\2\4\1\5\1\6\1\1\4\5"+
    "\1\6\2\3\2\7\1\1\1\2\2\1\1\2\1\10"+
    "\1\11\1\1\1\2\2\3\1\12\20\3\2\4\1\0"+
    "\2\7\1\2\1\13\2\3\1\2\1\7\3\2\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\3\1\12\15\3"+
    "\1\12\2\0\1\7\2\0\2\3\1\13\2\7\2\3"+
    "\1\7\5\3\2\7\1\13\15\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\76\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\76"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\76\0\76\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u01f0\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\76\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u07fe\0\u07fe\0\u083c\0\u083c\0\u087a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u0744\0\u0f80"+
    "\0\u0fbe\0\u160a\0\u1648\0\u01f0\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u1458\0\u1496\0\76\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\11\1\16\1\4"+
    "\1\17\1\11\1\4\2\11\1\20\1\11\1\21\2\11"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\5\11\1\36\1\37\2\11"+
    "\1\36\1\11\1\36\1\40\1\41\1\40\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\11\1\46\77\0"+
    "\1\11\1\51\27\11\12\0\16\11\11\0\2\11\2\0"+
    "\1\11\1\4\1\11\2\4\6\11\1\4\2\11\1\4"+
    "\2\11\1\4\7\11\3\0\1\33\5\0\1\33\16\11"+
    "\4\0\1\33\4\0\2\11\2\0\4\11\1\52\12\11"+
    "\1\53\2\11\1\54\6\11\12\0\16\11\11\0\2\11"+
    "\2\0\1\11\1\55\1\11\2\4\6\11\1\4\2\11"+
    "\1\4\2\11\1\4\7\11\3\0\1\33\5\0\1\33"+
    "\16\11\4\0\1\33\4\0\2\11\2\0\1\11\1\4"+
    "\1\11\2\4\1\11\1\56\4\11\1\4\2\11\1\4"+
    "\2\11\1\4\7\11\3\0\1\33\5\0\1\33\16\11"+
    "\4\0\1\33\4\0\2\11\2\0\13\11\1\57\4\11"+
    "\1\60\10\11\12\0\16\11\11\0\2\11\2\0\31\11"+
    "\12\0\16\11\11\0\2\11\2\0\1\11\1\61\11\11"+
    "\1\62\15\11\12\0\16\11\11\0\2\11\2\0\10\11"+
    "\1\63\10\11\1\64\7\11\12\0\16\11\11\0\2\11"+
    "\2\0\5\11\1\65\23\11\12\0\16\11\11\0\2\11"+
    "\2\0\1\11\1\4\1\11\2\4\4\11\1\66\1\11"+
    "\1\4\2\11\1\4\2\11\1\4\7\11\3\0\1\33"+
    "\5\0\1\33\16\11\4\0\1\33\4\0\2\11\2\0"+
    "\10\11\1\67\20\11\12\0\16\11\11\0\2\11\2\0"+
    "\1\11\1\70\14\11\1\71\12\11\12\0\16\11\11\0"+
    "\2\11\2\0\20\11\1\72\10\11\12\0\16\11\11\0"+
    "\2\11\2\0\11\11\1\73\17\11\12\0\16\11\11\0"+
    "\2\11\34\0\1\74\1\75\75\0\1\74\75\0\1\23"+
    "\1\76\42\0\1\33\1\0\2\33\6\0\1\33\2\0"+
    "\1\33\2\0\1\33\11\0\1\74\1\33\5\0\1\33"+
    "\22\0\1\33\45\0\1\74\112\0\1\77\1\100\2\0"+
    "\1\77\1\0\1\77\54\0\1\32\75\0\1\101\1\102"+
    "\36\0\1\33\1\0\2\33\6\0\1\33\2\0\1\33"+
    "\2\0\1\33\12\0\1\33\5\0\1\33\22\0\1\33"+
    "\10\0\13\11\1\57\15\11\12\0\2\11\1\103\13\11"+
    "\11\0\2\11\2\0\16\11\1\71\10\11\1\104\1\11"+
    "\12\0\16\11\11\0\2\11\2\0\23\41\1\105\5\41"+
    "\12\0\7\41\2\36\2\41\1\36\1\41\1\36\1\106"+
    "\11\0\1\41\2\0\7\41\1\107\11\41\1\110\1\41"+
    "\1\105\5\41\12\0\7\41\1\111\1\112\1\110\1\41"+
    "\1\112\1\107\1\112\1\106\11\0\1\41\2\0\31\41"+
    "\12\0\16\41\12\0\1\41\66\0\2\42\11\0\1\33"+
    "\1\0\2\33\6\0\1\33\2\0\1\33\2\0\1\33"+
    "\12\0\1\33\5\0\1\33\21\0\1\42\1\43\7\0"+
    "\67\113\1\114\2\0\4\113\70\115\2\0\1\116\3\115"+
    "\1\0\31\11\12\0\7\11\2\0\2\11\1\0\1\11"+
    "\12\0\1\117\1\11\2\0\2\11\1\120\26\11\12\0"+
    "\16\11\11\0\2\11\2\0\5\11\1\121\23\11\12\0"+
    "\16\11\11\0\2\11\2\0\23\11\1\122\5\11\12\0"+
    "\16\11\11\0\2\11\2\0\1\11\1\4\1\11\2\4"+
    "\1\11\1\123\4\11\1\4\2\11\1\4\2\11\1\4"+
    "\7\11\3\0\1\33\5\0\1\33\16\11\4\0\1\33"+
    "\4\0\2\11\2\0\10\11\1\124\20\11\12\0\16\11"+
    "\11\0\2\11\2\0\6\11\1\125\22\11\12\0\16\11"+
    "\11\0\2\11\2\0\2\11\1\126\26\11\12\0\16\11"+
    "\11\0\2\11\2\0\1\11\1\124\27\11\12\0\16\11"+
    "\11\0\2\11\2\0\11\11\1\127\17\11\12\0\16\11"+
    "\11\0\2\11\2\0\12\11\1\130\16\11\12\0\16\11"+
    "\11\0\2\11\2\0\5\11\1\131\23\11\12\0\16\11"+
    "\11\0\2\11\2\0\13\11\1\132\15\11\12\0\16\11"+
    "\11\0\2\11\2\0\5\11\1\133\23\11\12\0\16\11"+
    "\11\0\2\11\2\0\16\11\1\134\12\11\12\0\16\11"+
    "\11\0\2\11\2\0\13\11\1\53\15\11\12\0\16\11"+
    "\11\0\2\11\2\0\10\11\1\135\20\11\12\0\16\11"+
    "\11\0\2\11\2\0\2\11\1\136\26\11\12\0\16\11"+
    "\11\0\2\11\2\0\24\11\1\137\4\11\12\0\16\11"+
    "\11\0\2\11\34\0\1\74\76\0\1\2\114\0\2\77"+
    "\2\0\1\77\1\0\1\77\1\106\23\0\1\140\11\0"+
    "\1\141\31\0\1\142\1\141\1\0\1\142\1\140\1\142"+
    "\1\106\13\0\40\143\1\144\27\143\1\101\5\143\70\102"+
    "\2\0\4\102\1\0\31\11\12\0\3\11\1\145\12\11"+
    "\11\0\2\11\2\0\31\11\12\0\5\11\1\146\10\11"+
    "\11\0\2\11\2\0\5\41\1\147\23\41\12\0\16\41"+
    "\12\0\1\41\54\0\2\106\2\0\1\106\1\0\1\106"+
    "\15\0\31\41\12\0\10\41\1\150\4\41\1\150\12\0"+
    "\1\41\2\0\3\41\1\151\3\41\1\151\1\41\1\151"+
    "\3\41\3\151\7\41\1\151\1\41\12\0\1\41\1\151"+
    "\2\41\1\151\2\41\2\151\1\41\4\151\12\0\1\41"+
    "\2\0\23\41\1\105\5\41\12\0\7\41\2\111\2\41"+
    "\1\111\1\41\1\111\12\0\1\41\2\0\23\41\1\105"+
    "\5\41\12\0\7\41\1\111\1\112\2\41\1\112\1\41"+
    "\1\112\12\0\1\41\2\0\3\11\1\53\25\11\12\0"+
    "\16\11\11\0\2\11\2\0\11\11\1\152\17\11\12\0"+
    "\16\11\11\0\2\11\2\0\10\11\1\153\20\11\12\0"+
    "\16\11\11\0\2\11\2\0\7\11\1\136\21\11\12\0"+
    "\16\11\11\0\2\11\2\0\10\11\1\53\20\11\12\0"+
    "\16\11\11\0\2\11\2\0\11\11\1\154\17\11\12\0"+
    "\16\11\11\0\2\11\2\0\12\11\1\53\16\11\12\0"+
    "\16\11\11\0\2\11\2\0\16\11\1\155\12\11\12\0"+
    "\16\11\11\0\2\11\2\0\11\11\1\53\17\11\12\0"+
    "\16\11\11\0\2\11\2\0\11\11\1\156\17\11\12\0"+
    "\16\11\11\0\2\11\2\0\2\11\1\157\26\11\12\0"+
    "\16\11\11\0\2\11\2\0\6\11\1\160\22\11\12\0"+
    "\16\11\11\0\2\11\2\0\12\11\1\126\16\11\12\0"+
    "\16\11\11\0\2\11\2\0\12\11\1\125\16\11\12\0"+
    "\16\11\11\0\2\11\2\0\10\11\1\130\20\11\12\0"+
    "\16\11\11\0\2\11\2\0\27\11\1\161\1\11\12\0"+
    "\16\11\11\0\2\11\55\0\1\162\4\0\1\162\20\0"+
    "\1\163\3\0\1\163\1\0\1\163\3\0\3\163\7\0"+
    "\1\163\14\0\1\163\2\0\1\163\2\0\2\163\1\0"+
    "\4\163\70\0\1\142\2\0\1\142\1\0\1\142\14\0"+
    "\40\143\1\144\75\143\1\144\1\164\34\143\1\0\31\11"+
    "\12\0\4\11\1\154\11\11\11\0\2\11\2\0\31\11"+
    "\12\0\6\11\1\145\7\11\11\0\2\11\2\0\13\11"+
    "\1\165\15\11\12\0\16\11\11\0\2\11\2\0\11\11"+
    "\1\166\17\11\12\0\16\11\11\0\2\11\2\0\25\11"+
    "\1\53\3\11\12\0\16\11\11\0\2\11\2\0\4\11"+
    "\1\167\24\11\12\0\16\11\11\0\2\11\2\0\4\11"+
    "\1\170\24\11\12\0\16\11\11\0\2\11\2\0\13\11"+
    "\1\171\15\11\12\0\16\11\11\0\2\11\2\0\13\11"+
    "\1\172\15\11\12\0\16\11\11\0\2\11\2\0\17\11"+
    "\1\173\11\11\12\0\16\11\11\0\2\11\2\0\22\11"+
    "\1\174\6\11\12\0\16\11\11\0\2\11\2\0\3\11"+
    "\1\126\25\11\12\0\16\11\11\0\2\11\2\0\14\11"+
    "\1\53\14\11\12\0\16\11\11\0\2\11\2\0\4\11"+
    "\1\53\24\11\12\0\16\11\11\0\2\11\2\0\13\11"+
    "\1\175\15\11\12\0\16\11\11\0\2\11\2\0\16\11"+
    "\1\176\12\11\12\0\16\11\11\0\2\11\2\0\11\11"+
    "\1\177\17\11\12\0\16\11\11\0\2\11\2\0\16\11"+
    "\1\200\12\11\12\0\16\11\11\0\2\11\2\0\15\11"+
    "\1\130\13\11\12\0\16\11\11\0\2\11\2\0\4\11"+
    "\1\201\24\11\12\0\16\11\11\0\2\11\2\0\30\11"+
    "\1\53\12\0\16\11\11\0\2\11\2\0\5\11\1\126"+
    "\23\11\12\0\16\11\11\0\2\11\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\27\1\1\11\5\1\1\11\4\1\2\11"+
    "\25\1\1\11\1\1\1\0\14\1\1\0\1\1\1\0"+
    "\1\1\1\0\20\1\2\0\1\1\2\0\17\1\1\11"+
    "\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); return PUNCTUATION;
            }
          case 12: break;
          case 2: 
            { lexeme = yytext(); return ERROR;
            }
          case 13: break;
          case 3: 
            { lexeme = yytext(); return IDENTIFIER;
            }
          case 14: break;
          case 4: 
            { lexeme = yytext(); return COMPARISON_OPERATOR;
            }
          case 15: break;
          case 5: 
            { lexeme = yytext(); return ARITHMETIC_OPERATOR;
            }
          case 16: break;
          case 6: 
            { lexeme = yytext(); return LOGICAL_OPERATOR;
            }
          case 17: break;
          case 7: 
            { lexeme = yytext(); return CONSTANT;
            }
          case 18: break;
          case 8: 
            { lexeme = yytext(); return NEWLINE;
            }
          case 19: break;
          case 9: 
            { lexeme = yytext(); return WHITESPACE;
            }
          case 20: break;
          case 10: 
            { lexeme = yytext(); return RESERVED_WORD;
            }
          case 21: break;
          case 11: 
            { lexeme = yytext(); return COMMENT;
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
