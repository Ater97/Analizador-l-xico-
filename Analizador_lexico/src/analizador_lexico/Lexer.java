/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Stuff/Docs/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\63\1\64\1\64\1\64\22\0\1\101\1\40\1\66"+
    "\1\100\1\70\1\45\1\46\1\62\1\74\1\74\1\43\1\42\1\73"+
    "\1\42\1\61\1\44\1\56\1\60\6\57\2\55\1\0\1\72\1\35"+
    "\1\37\1\36\1\41\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\75\1\0\1\75\1\0\1\32\1\0\1\47\1\2\1\3\1\50"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\51"+
    "\1\52\1\20\1\21\1\53\1\23\1\24\1\25\1\102\1\27\1\54"+
    "\1\31\1\12\1\76\1\77\1\76\1\0\6\67\1\65\32\67\1\103"+
    "\137\67\60\0\2\33\115\0\1\34\u1500\0\1\101\u097f\0\13\101\35\0"+
    "\1\64\1\64\5\0\1\101\57\0\1\101\312\0\1\71\u0ed5\0\1\101"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\22\3\3\2\2\4\1\5\1\6\1\2"+
    "\4\5\6\6\2\7\1\10\1\2\1\11\1\12\2\2"+
    "\1\13\1\14\1\15\1\16\2\1\1\17\1\12\3\3"+
    "\2\20\6\3\1\21\1\0\11\3\1\0\5\3\1\0"+
    "\1\3\1\0\20\3\5\0\2\4\1\0\1\22\2\0"+
    "\2\6\1\21\1\6\1\0\1\23\3\0\1\7\2\0"+
    "\1\24\1\0\1\24\6\25\1\3\1\0\21\3\1\0"+
    "\1\21\1\3\1\0\6\3\1\0\1\3\1\0\3\3"+
    "\1\0\10\3\1\0\2\3\1\0\12\3\10\0\1\20"+
    "\1\6\1\0\1\26\2\7\13\25\1\0\1\3\1\0"+
    "\5\3\1\0\3\3\1\21\5\3\2\0\3\3\1\0"+
    "\5\3\1\0\3\3\1\0\6\3\2\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\3\6\0"+
    "\1\17\1\6\7\25\1\0\4\25\1\0\1\3\1\0"+
    "\10\3\1\0\10\3\2\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\27\2\3\1\0\1\3\1\0\1\3\1\0\3\3"+
    "\4\0\1\30\5\25\2\0\3\25\2\0\1\3\1\0"+
    "\2\3\1\20\1\3\1\0\1\3\1\0\1\20\5\3"+
    "\3\0\2\3\3\0\1\3\2\0\3\3\4\0\4\25"+
    "\1\0\1\25\1\0\1\30\3\25\2\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\21\3\3\3\0\1\3\2\20"+
    "\1\0\2\3\3\0\3\25\1\0\2\25\3\0\3\3"+
    "\2\0\1\3\2\0\4\25\1\0\1\3\2\0\1\3"+
    "\1\0\2\25\1\0\1\25\1\3\1\0\1\3\2\25"+
    "\1\0\1\25\1\0\1\3\2\25\1\0\1\25\1\21"+
    "\1\3\1\0\2\25\1\0\1\25\1\0\1\3\1\0"+
    "\1\25\1\0\1\25\2\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\104"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\u0aa0\0\104\0\104\0\u0ae4\0\u0b28\0\104\0\104"+
    "\0\104\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u04c8\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0264\0\104\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0264\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430"+
    "\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\104\0\u193c\0\u1980\0\104\0\u0a5c\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u094c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u0aa0\0\u0aa0\0\u0ae4\0\u0ae4\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u094c"+
    "\0\u2fd0\0\u3014\0\u3014\0\u1b5c\0\u1ba0\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0"+
    "\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0"+
    "\0\u4224\0\u4268\0\u42ac\0\104\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc"+
    "\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc"+
    "\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c"+
    "\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c"+
    "\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c"+
    "\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\104\0\u5038"+
    "\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258"+
    "\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u1cf4\0\u53f0\0\u5434"+
    "\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654"+
    "\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874"+
    "\0\u58b8\0\u58fc\0\u5940\0\u4fb0\0\u5984\0\u59c8\0\u5a0c\0\u5a50"+
    "\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70"+
    "\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90"+
    "\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0"+
    "\0\u60f4\0\u6138\0\104\0\u617c\0\u61c0\0\u6204\0\u6248\0\u628c"+
    "\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468\0\u64ac"+
    "\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u6424\0\u6644\0\u6688"+
    "\0\u66cc\0\u6710\0\u6754\0\u6798\0\u6644\0\u67dc\0\u6820\0\u6864"+
    "\0\u68a8\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84"+
    "\0\u6ac8\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4"+
    "\0\u6ce8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4"+
    "\0\u6f08\0\u6f4c\0\u6f90\0\u6fd4\0\u7018\0\u705c\0\u70a0\0\u70e4"+
    "\0\u7128\0\u716c\0\u71b0\0\u71f4\0\u7238\0\u727c\0\u72c0\0\u7304"+
    "\0\u7348\0\104\0\u738c\0\u73d0\0\u7414\0\u7458\0\u749c\0\u74e0"+
    "\0\u7524\0\u7568\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u76bc\0\u7700"+
    "\0\u7744\0\u7788\0\u77cc\0\u7810\0\u7854\0\u7898\0\u78dc\0\u7920"+
    "\0\u7964\0\u79a8\0\u79ec\0\u7a30\0\u7a74\0\u7ab8\0\u7afc\0\u7b40"+
    "\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\12\1\15\1\12\1\16"+
    "\1\12\1\17\1\20\1\21\1\22\1\23\1\24\2\12"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\47\1\50\2\47\1\51\1\52"+
    "\1\53\2\54\1\55\1\2\1\56\1\2\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\54\1\66\1\54"+
    "\105\0\1\12\1\67\13\12\1\70\3\12\1\71\1\72"+
    "\7\12\1\0\1\73\12\0\2\12\1\70\1\12\1\71"+
    "\5\12\21\0\1\12\2\0\21\12\1\74\10\12\14\0"+
    "\4\12\1\74\5\12\21\0\1\12\2\0\1\75\12\12"+
    "\1\76\2\12\1\77\13\12\14\0\1\75\2\12\1\77"+
    "\6\12\21\0\1\12\2\0\4\12\1\100\3\12\1\101"+
    "\5\12\1\102\13\12\1\103\13\0\3\12\1\102\6\12"+
    "\21\0\1\12\2\0\2\12\1\104\10\12\1\105\1\106"+
    "\1\107\7\12\1\110\1\12\1\111\2\12\14\0\2\12"+
    "\1\107\2\12\1\111\4\12\21\0\1\110\2\0\10\12"+
    "\1\112\5\12\1\113\5\12\1\114\5\12\1\115\13\0"+
    "\3\12\1\113\6\12\21\0\1\12\2\0\13\12\1\116"+
    "\2\12\1\117\13\12\14\0\3\12\1\117\6\12\21\0"+
    "\1\12\2\0\32\12\14\0\12\12\21\0\1\12\2\0"+
    "\5\12\1\102\6\12\1\120\1\121\4\12\1\122\7\12"+
    "\1\0\1\123\12\0\2\12\1\121\7\12\21\0\1\12"+
    "\2\0\10\12\1\124\21\12\1\125\13\0\12\12\21\0"+
    "\1\12\2\0\1\126\3\12\1\127\25\12\14\0\1\126"+
    "\11\12\21\0\1\12\2\0\21\12\1\130\2\12\1\131"+
    "\5\12\14\0\4\12\1\130\5\12\21\0\1\12\2\0"+
    "\4\12\1\132\25\12\14\0\12\12\21\0\1\12\2\0"+
    "\23\12\1\133\2\12\1\134\3\12\14\0\12\12\21\0"+
    "\1\12\2\0\7\12\1\135\11\12\1\136\10\12\14\0"+
    "\4\12\1\136\5\12\21\0\1\12\2\0\15\12\1\122"+
    "\4\12\1\101\7\12\1\0\1\103\12\0\2\12\1\122"+
    "\7\12\21\0\1\12\2\0\1\137\31\12\14\0\1\137"+
    "\11\12\21\0\1\12\2\0\7\12\1\140\22\12\14\0"+
    "\12\12\21\0\1\12\2\0\2\12\1\141\2\12\1\142"+
    "\11\12\1\143\1\12\1\144\1\145\6\12\1\146\1\0"+
    "\1\147\12\0\4\12\1\144\1\12\25\0\1\12\16\0"+
    "\1\150\1\151\4\0\1\123\10\0\1\123\14\0\1\151"+
    "\56\0\1\152\115\0\1\153\1\154\1\0\1\155\101\0"+
    "\1\153\103\0\1\31\103\0\1\153\1\41\5\0\7\41"+
    "\22\0\1\41\42\0\1\156\2\0\1\153\117\0\1\47"+
    "\1\50\2\47\1\157\65\0\1\40\103\0\1\160\1\65"+
    "\77\0\1\41\5\0\7\41\22\0\1\41\5\0\1\12"+
    "\1\67\13\12\1\70\3\12\1\71\1\72\7\12\1\0"+
    "\1\73\3\0\1\41\5\0\1\41\2\45\1\161\1\45"+
    "\1\162\1\45\4\12\16\0\1\41\2\0\1\12\2\0"+
    "\4\12\1\100\3\12\1\101\5\12\1\102\13\12\1\103"+
    "\4\0\1\41\5\0\1\41\3\45\1\163\2\45\4\12"+
    "\16\0\1\41\2\0\1\12\2\0\1\126\3\12\1\127"+
    "\25\12\5\0\1\41\5\0\1\41\1\164\5\45\4\12"+
    "\16\0\1\41\2\0\1\12\2\0\32\12\5\0\1\41"+
    "\5\0\1\41\6\45\4\12\16\0\1\41\2\0\1\12"+
    "\2\0\4\12\1\132\25\12\5\0\1\41\5\0\1\41"+
    "\6\45\4\12\16\0\1\41\2\0\1\12\6\0\1\165"+
    "\47\0\4\47\1\166\24\0\1\167\2\0\1\165\22\0"+
    "\1\170\23\0\1\170\1\171\3\172\1\166\77\0\4\173"+
    "\23\0\62\174\1\175\3\0\16\174\63\176\3\0\1\177"+
    "\15\176\1\0\1\200\5\201\1\202\1\203\7\201\1\204"+
    "\11\201\1\205\14\0\1\200\5\201\10\0\1\201\1\0"+
    "\1\201\12\0\2\201\76\0\2\63\44\0\1\41\5\0"+
    "\7\41\21\0\1\63\1\64\4\0\63\65\3\0\16\65"+
    "\1\0\22\12\1\206\7\12\1\0\1\207\12\0\12\12"+
    "\21\0\1\12\2\0\3\12\1\72\26\12\14\0\1\12"+
    "\1\72\10\12\21\0\1\12\2\0\21\12\1\210\10\12"+
    "\14\0\4\12\1\210\5\12\21\0\1\12\2\0\4\12"+
    "\1\211\25\12\14\0\12\12\21\0\1\12\2\0\13\12"+
    "\1\212\6\12\1\213\1\214\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\1\215\15\12\1\216\13\12\14\0\1\215"+
    "\2\12\1\216\6\12\21\0\1\12\2\0\15\12\1\217"+
    "\14\12\14\0\2\12\1\217\7\12\21\0\1\12\2\0"+
    "\2\12\1\220\2\12\1\221\24\12\14\0\12\12\21\0"+
    "\1\12\2\0\4\12\1\72\25\12\14\0\12\12\21\0"+
    "\1\12\6\0\1\73\77\0\7\12\1\222\22\12\14\0"+
    "\12\12\21\0\1\12\2\0\22\12\1\223\7\12\14\0"+
    "\12\12\21\0\1\12\2\0\17\12\1\224\12\12\14\0"+
    "\12\12\21\0\1\12\2\0\3\12\1\225\26\12\14\0"+
    "\1\12\1\225\10\12\21\0\1\12\2\0\1\226\31\12"+
    "\14\0\1\226\11\12\21\0\1\12\2\0\10\12\1\227"+
    "\12\12\1\230\6\12\1\231\13\0\12\12\21\0\1\12"+
    "\2\0\15\12\1\110\14\12\14\0\2\12\1\110\7\12"+
    "\21\0\1\12\2\0\21\12\1\232\10\12\14\0\4\12"+
    "\1\232\5\12\21\0\1\12\2\0\15\12\1\233\14\12"+
    "\14\0\2\12\1\233\7\12\21\0\1\12\17\0\1\234"+
    "\32\0\1\234\33\0\16\12\1\235\13\12\14\0\3\12"+
    "\1\235\6\12\21\0\1\12\2\0\23\12\1\236\6\12"+
    "\14\0\12\12\21\0\1\12\2\0\17\12\1\237\12\12"+
    "\14\0\12\12\21\0\1\12\2\0\2\12\1\240\17\12"+
    "\1\241\1\242\6\12\1\0\1\243\12\0\12\12\21\0"+
    "\1\12\2\0\22\12\1\244\7\12\1\0\1\245\12\0"+
    "\12\12\21\0\1\12\24\0\1\245\10\0\1\245\50\0"+
    "\22\12\1\227\7\12\1\0\1\231\12\0\12\12\21\0"+
    "\1\12\24\0\1\231\10\0\1\231\50\0\14\12\1\246"+
    "\15\12\14\0\12\12\21\0\1\12\2\0\26\12\1\72"+
    "\3\12\14\0\12\12\21\0\1\12\2\0\10\12\1\247"+
    "\5\12\1\250\13\12\1\251\13\0\3\12\1\250\6\12"+
    "\21\0\1\12\2\0\1\12\1\252\30\12\14\0\12\12"+
    "\21\0\1\12\2\0\20\12\1\253\2\12\1\254\6\12"+
    "\14\0\12\12\21\0\1\12\2\0\1\255\31\12\14\0"+
    "\1\255\11\12\21\0\1\12\2\0\10\12\1\256\21\12"+
    "\14\0\12\12\21\0\1\12\2\0\21\12\1\257\10\12"+
    "\14\0\4\12\1\257\5\12\21\0\1\12\2\0\1\260"+
    "\27\12\1\72\1\12\14\0\1\260\11\12\21\0\1\12"+
    "\2\0\21\12\1\72\10\12\14\0\4\12\1\72\5\12"+
    "\21\0\1\12\2\0\10\12\1\261\21\12\1\262\13\0"+
    "\12\12\21\0\1\12\2\0\16\12\1\263\13\12\14\0"+
    "\3\12\1\263\6\12\21\0\1\12\2\0\10\12\1\264"+
    "\21\12\1\265\13\0\12\12\21\0\1\12\2\0\16\12"+
    "\1\266\13\12\14\0\3\12\1\266\6\12\21\0\1\12"+
    "\2\0\4\12\1\267\25\12\14\0\12\12\21\0\1\12"+
    "\2\0\4\12\1\270\25\12\14\0\12\12\21\0\1\12"+
    "\2\0\2\12\1\271\1\272\1\12\1\273\1\12\1\274"+
    "\3\12\1\275\1\12\1\276\5\12\1\277\5\12\1\300"+
    "\14\0\1\12\1\272\1\276\3\12\25\0\1\12\6\0"+
    "\1\301\116\0\1\302\66\0\1\303\17\0\1\243\1\304"+
    "\7\0\1\243\50\0\1\305\45\0\1\305\72\0\1\153"+
    "\65\0\1\306\63\0\43\160\1\307\40\160\1\0\3\12"+
    "\1\72\26\12\5\0\1\41\5\0\1\41\1\45\1\310"+
    "\4\45\4\12\16\0\1\41\2\0\1\12\2\0\21\12"+
    "\1\210\10\12\5\0\1\41\5\0\1\41\4\45\1\311"+
    "\1\45\4\12\16\0\1\41\2\0\1\12\2\0\14\12"+
    "\1\246\15\12\5\0\1\41\5\0\1\41\6\45\4\12"+
    "\16\0\1\41\2\0\1\12\43\0\1\312\12\0\4\313"+
    "\30\0\1\165\47\0\4\166\101\0\1\314\1\0\1\314"+
    "\24\0\6\315\40\0\2\315\4\0\4\315\30\0\1\165"+
    "\47\0\4\171\1\173\27\0\1\165\47\0\1\171\3\172"+
    "\1\173\27\0\1\165\47\0\4\173\24\0\21\201\1\316"+
    "\10\201\14\0\4\201\1\316\5\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\32\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\13\201\1\317"+
    "\16\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\23\201\1\320\6\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\7\201\1\321"+
    "\22\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\2\201\1\322\1\201\1\323\1\324\1\325"+
    "\10\201\1\326\1\201\1\327\1\330\7\201\1\0\1\331"+
    "\12\0\4\201\1\327\5\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\23\12\1\332\6\12\14\0\12\12"+
    "\21\0\1\12\25\0\1\333\60\0\1\334\31\12\14\0"+
    "\1\334\11\12\21\0\1\12\2\0\1\335\31\12\14\0"+
    "\1\335\11\12\21\0\1\12\2\0\13\12\1\336\16\12"+
    "\14\0\12\12\21\0\1\12\2\0\4\12\1\102\25\12"+
    "\14\0\12\12\21\0\1\12\2\0\2\12\1\337\27\12"+
    "\14\0\12\12\21\0\1\12\2\0\22\12\1\340\7\12"+
    "\1\0\1\341\12\0\12\12\21\0\1\12\2\0\15\12"+
    "\1\101\14\12\14\0\2\12\1\101\7\12\21\0\1\12"+
    "\2\0\22\12\1\227\1\342\6\12\1\0\1\231\12\0"+
    "\12\12\21\0\1\12\2\0\13\12\1\343\16\12\14\0"+
    "\12\12\21\0\1\12\2\0\1\344\31\12\14\0\1\344"+
    "\11\12\21\0\1\12\2\0\16\12\1\72\13\12\14\0"+
    "\3\12\1\72\6\12\21\0\1\12\2\0\4\12\1\345"+
    "\25\12\14\0\12\12\21\0\1\12\2\0\23\12\1\334"+
    "\6\12\14\0\12\12\21\0\1\12\2\0\3\12\1\346"+
    "\1\12\1\347\2\12\1\350\11\12\1\351\3\12\1\352"+
    "\3\12\1\353\1\354\12\0\1\12\1\346\10\12\21\0"+
    "\1\12\2\0\13\12\1\72\16\12\14\0\12\12\21\0"+
    "\1\12\2\0\23\12\1\72\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\4\12\1\355\25\12\14\0\12\12\21\0"+
    "\1\12\25\0\1\73\60\0\4\12\1\356\25\12\14\0"+
    "\12\12\21\0\1\12\2\0\2\12\1\357\27\12\14\0"+
    "\12\12\21\0\1\12\2\0\1\360\45\0\1\360\35\0"+
    "\1\12\1\361\30\12\14\0\12\12\21\0\1\12\2\0"+
    "\16\12\1\102\13\12\14\0\3\12\1\102\6\12\21\0"+
    "\1\12\2\0\13\12\1\362\16\12\14\0\12\12\21\0"+
    "\1\12\2\0\13\12\1\363\16\12\14\0\12\12\21\0"+
    "\1\12\2\0\23\12\1\364\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\4\12\1\365\25\12\14\0\12\12\21\0"+
    "\1\12\25\0\1\366\60\0\4\12\1\227\25\12\14\0"+
    "\12\12\21\0\1\12\6\0\1\231\77\0\4\12\1\367"+
    "\25\12\14\0\12\12\21\0\1\12\2\0\15\12\1\227"+
    "\7\12\1\370\4\12\14\0\2\12\1\227\7\12\21\0"+
    "\1\370\2\0\23\12\1\371\6\12\14\0\12\12\21\0"+
    "\1\12\17\0\1\231\7\0\1\372\22\0\1\231\30\0"+
    "\1\372\2\0\13\12\1\373\16\12\14\0\12\12\21\0"+
    "\1\12\2\0\24\12\1\374\5\12\14\0\12\12\21\0"+
    "\1\12\2\0\24\12\1\375\5\12\14\0\12\12\21\0"+
    "\1\12\2\0\23\12\1\373\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\23\12\1\376\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\16\12\1\127\13\12\14\0\3\12\1\127"+
    "\6\12\21\0\1\12\2\0\10\12\1\227\21\12\1\231"+
    "\13\0\12\12\21\0\1\12\2\0\13\12\1\213\16\12"+
    "\14\0\12\12\21\0\1\12\15\0\1\103\70\0\16\12"+
    "\1\377\13\12\14\0\3\12\1\377\6\12\21\0\1\12"+
    "\2\0\13\12\1\u0100\16\12\14\0\12\12\21\0\1\12"+
    "\15\0\1\u0101\70\0\32\12\1\0\1\u0102\12\0\12\12"+
    "\21\0\1\12\2\0\20\12\1\u0103\11\12\14\0\12\12"+
    "\21\0\1\12\2\0\22\12\1\u0104\7\12\1\0\1\u0105"+
    "\12\0\12\12\21\0\1\12\2\0\13\12\1\u0106\16\12"+
    "\14\0\12\12\21\0\1\12\2\0\32\12\1\u0107\13\0"+
    "\12\12\21\0\1\12\2\0\24\12\1\u0108\5\12\1\u0109"+
    "\13\0\12\12\21\0\1\12\2\0\1\u010a\31\12\14\0"+
    "\1\u010a\11\12\21\0\1\12\2\0\32\12\1\u010b\13\0"+
    "\12\12\21\0\1\12\2\0\1\u010c\31\12\14\0\1\u010c"+
    "\11\12\21\0\1\12\2\0\21\12\1\u010d\10\12\14\0"+
    "\4\12\1\u010d\5\12\21\0\1\12\2\0\31\12\1\300"+
    "\14\0\6\12\25\0\1\12\23\0\1\u010e\1\u0105\10\0"+
    "\1\u0105\16\0\1\u010e\44\0\1\u010f\103\0\1\u0110\74\0"+
    "\1\u0111\122\0\1\u0112\67\0\1\u0113\73\0\43\160\1\307"+
    "\1\u0114\37\160\1\0\1\334\31\12\5\0\1\41\5\0"+
    "\1\41\1\u0115\5\45\4\12\16\0\1\41\2\0\1\12"+
    "\56\0\4\313\24\0\6\201\1\u0116\23\201\14\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\1\0\16\201"+
    "\1\u0117\13\201\14\0\3\201\1\u0117\6\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\1\0\23\201\1\u0118\6\201"+
    "\14\0\12\201\4\0\1\201\1\0\1\201\12\0\2\201"+
    "\1\0\17\201\1\u0119\12\201\14\0\12\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\1\0\16\201\1\u011a\13\201"+
    "\14\0\3\201\1\u011a\6\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\15\201\1\u011b\14\201\14\0\2\201"+
    "\1\u011b\7\201\4\0\1\201\1\0\1\201\12\0\2\201"+
    "\1\0\10\201\1\u011c\21\201\1\u011d\13\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\4\201\1\u011e"+
    "\25\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\16\201\1\u011f\13\201\14\0\3\201\1\u011f"+
    "\6\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\4\201\1\u0120\25\201\14\0\12\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\4\201\1\u0121\25\201\14\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\5\0"+
    "\1\u0122\77\0\21\12\1\u0123\10\12\14\0\4\12\1\u0123"+
    "\5\12\21\0\1\12\23\0\1\u0124\30\0\1\u0124\31\0"+
    "\30\12\1\72\1\12\14\0\12\12\21\0\1\12\2\0"+
    "\12\12\1\102\17\12\14\0\12\12\21\0\1\12\2\0"+
    "\1\u0125\31\12\14\0\1\u0125\11\12\21\0\1\12\2\0"+
    "\7\12\1\72\22\12\14\0\12\12\21\0\1\12\2\0"+
    "\22\12\1\72\7\12\1\0\1\73\12\0\12\12\21\0"+
    "\1\12\24\0\1\73\10\0\1\73\50\0\10\12\1\u0126"+
    "\21\12\14\0\12\12\21\0\1\12\2\0\1\u0127\31\12"+
    "\14\0\1\u0127\11\12\21\0\1\12\2\0\24\12\1\u0128"+
    "\5\12\14\0\12\12\21\0\1\12\2\0\10\12\1\350"+
    "\21\12\14\0\12\12\21\0\1\12\2\0\4\12\1\u0129"+
    "\25\12\14\0\12\12\21\0\1\12\2\0\16\12\1\u012a"+
    "\13\12\14\0\3\12\1\u012a\6\12\21\0\1\12\2\0"+
    "\5\12\1\102\24\12\14\0\12\12\21\0\1\12\2\0"+
    "\26\12\1\u012b\3\12\14\0\12\12\21\0\1\12\2\0"+
    "\7\12\1\u012c\22\12\14\0\12\12\21\0\1\12\7\0"+
    "\1\73\124\0\1\u012d\55\0\15\12\1\u012e\14\12\14\0"+
    "\2\12\1\u012e\7\12\21\0\1\12\2\0\1\376\31\12"+
    "\14\0\1\376\11\12\21\0\1\12\2\0\23\12\1\u012f"+
    "\6\12\14\0\12\12\21\0\1\12\15\0\1\73\70\0"+
    "\1\u0130\31\12\14\0\1\u0130\11\12\21\0\1\12\2\0"+
    "\4\12\1\u0131\25\12\14\0\12\12\21\0\1\12\2\0"+
    "\24\12\1\u0132\5\12\14\0\12\12\21\0\1\12\2\0"+
    "\1\u0133\3\12\1\u0134\25\12\14\0\1\u0133\11\12\21\0"+
    "\1\12\2\0\21\12\1\u0135\10\12\14\0\4\12\1\u0135"+
    "\5\12\21\0\1\12\2\0\1\u0136\3\0\1\u0137\41\0"+
    "\1\u0136\35\0\22\12\1\u0138\7\12\1\0\1\u0139\12\0"+
    "\12\12\21\0\1\12\2\0\1\u013a\31\12\14\0\1\u013a"+
    "\11\12\21\0\1\12\2\0\4\12\1\u013b\25\12\14\0"+
    "\12\12\21\0\1\12\2\0\1\u013c\45\0\1\u013c\35\0"+
    "\10\12\1\u013d\21\12\1\u013e\13\0\12\12\21\0\1\12"+
    "\2\0\10\12\1\u013f\21\12\1\u0140\13\0\12\12\21\0"+
    "\1\12\2\0\21\12\1\u0141\10\12\14\0\4\12\1\u0141"+
    "\5\12\21\0\1\12\2\0\2\12\1\u0142\27\12\14\0"+
    "\12\12\21\0\1\12\2\0\12\12\1\u0143\17\12\14\0"+
    "\12\12\10\0\1\u0144\10\0\1\12\2\0\4\12\1\u0145"+
    "\25\12\14\0\12\12\21\0\1\12\6\0\1\u0146\122\0"+
    "\1\u0147\60\0\24\12\1\u0148\5\12\14\0\12\12\21\0"+
    "\1\12\2\0\22\12\1\u0149\7\12\1\0\1\u014a\12\0"+
    "\12\12\21\0\1\12\24\0\1\u014a\10\0\1\u014a\50\0"+
    "\1\u014b\31\12\14\0\1\u014b\11\12\21\0\1\12\23\0"+
    "\1\u014c\30\0\1\u014c\31\0\15\12\1\u014d\14\12\14\0"+
    "\2\12\1\u014d\7\12\21\0\1\12\15\0\1\u014e\70\0"+
    "\13\12\1\u014f\16\12\14\0\12\12\21\0\1\12\17\0"+
    "\1\u014e\32\0\1\u014e\33\0\14\12\1\u0150\15\12\14\0"+
    "\12\12\21\0\1\12\2\0\1\u0151\31\12\14\0\1\u0151"+
    "\11\12\21\0\1\12\27\0\1\u0152\53\0\1\u0152\6\0"+
    "\1\u0153\123\0\1\u0154\100\0\1\u0155\30\0\1\u0155\41\0"+
    "\1\u013e\21\0\1\u013e\70\0\1\156\64\0\30\12\1\72"+
    "\1\12\5\0\1\41\5\0\1\41\6\45\4\12\16\0"+
    "\1\41\2\0\1\12\2\0\2\201\1\u0156\22\201\1\u0156"+
    "\4\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\1\u0156\1\201\1\0\1\201\1\u0157\30\201\14\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\1\0\17\201"+
    "\1\u0158\12\201\14\0\12\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\31\201\1\u0159\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\16\201\1\u015a"+
    "\13\201\14\0\3\201\1\u015a\6\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\25\201\1\u0156\4\201\14\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\1\u0156\1\201"+
    "\1\0\13\201\1\u015b\16\201\14\0\12\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\14\0\1\u015c\70\0\23\201"+
    "\1\u0156\6\201\14\0\12\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\22\201\1\u011e\7\201\1\0\1\u015d"+
    "\12\0\12\201\4\0\1\201\1\0\1\201\12\0\2\201"+
    "\1\0\20\201\1\u015e\11\201\14\0\12\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\1\0\21\201\1\u015f\1\u0160"+
    "\7\201\1\0\1\u0161\12\0\4\201\1\u015f\5\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\22\0\1\u0162\1\u0161"+
    "\10\0\1\u0161\16\0\1\u0162\31\0\1\u0163\31\12\14\0"+
    "\1\u0163\11\12\21\0\1\12\2\0\1\u0164\45\0\1\u0164"+
    "\35\0\1\12\1\u0165\30\12\14\0\12\12\21\0\1\12"+
    "\2\0\15\12\1\u0166\14\12\14\0\2\12\1\u0166\7\12"+
    "\21\0\1\12\2\0\21\12\1\101\10\12\14\0\4\12"+
    "\1\101\5\12\21\0\1\12\2\0\13\12\1\227\16\12"+
    "\14\0\12\12\21\0\1\12\2\0\2\12\1\220\27\12"+
    "\14\0\12\12\21\0\1\12\2\0\21\12\1\u0167\10\12"+
    "\14\0\4\12\1\u0167\5\12\21\0\1\12\2\0\10\12"+
    "\1\u0168\21\12\1\u0169\13\0\12\12\21\0\1\12\2\0"+
    "\10\12\1\u0165\21\12\1\262\13\0\12\12\21\0\1\12"+
    "\12\0\1\u0169\21\0\1\u0169\51\0\3\12\1\340\26\12"+
    "\14\0\1\12\1\340\10\12\21\0\1\12\2\0\10\12"+
    "\1\u016a\21\12\1\u016b\13\0\12\12\21\0\1\12\2\0"+
    "\13\12\1\u016c\16\12\14\0\12\12\21\0\1\12\2\0"+
    "\14\12\1\u016d\15\12\14\0\12\12\21\0\1\12\2\0"+
    "\3\12\1\u016e\26\12\14\0\1\12\1\u016e\10\12\21\0"+
    "\1\12\2\0\15\12\1\u016f\14\12\14\0\2\12\1\u016f"+
    "\7\12\21\0\1\12\2\0\1\u0170\31\12\14\0\1\u0170"+
    "\11\12\21\0\1\12\2\0\5\12\1\u0171\24\12\14\0"+
    "\12\12\21\0\1\12\17\0\1\u0172\32\0\1\u0172\33\0"+
    "\1\u0173\45\0\1\u0173\35\0\17\12\1\u0171\12\12\14\0"+
    "\12\12\21\0\1\12\21\0\1\u0174\64\0\23\12\1\101"+
    "\6\12\14\0\12\12\21\0\1\12\2\0\2\12\1\u0175"+
    "\27\12\14\0\12\12\21\0\1\12\25\0\1\103\60\0"+
    "\2\12\1\72\27\12\14\0\12\12\21\0\1\12\4\0"+
    "\1\73\101\0\21\12\1\u0176\10\12\14\0\4\12\1\u0176"+
    "\5\12\21\0\1\12\23\0\1\u0177\30\0\1\u0177\31\0"+
    "\15\12\1\102\14\12\14\0\2\12\1\102\7\12\21\0"+
    "\1\12\2\0\7\12\1\102\22\12\14\0\12\12\21\0"+
    "\1\12\2\0\32\12\1\u0178\13\0\12\12\21\0\1\12"+
    "\12\0\1\u0178\21\0\1\u0178\51\0\32\12\1\0\1\u0147"+
    "\12\0\12\12\21\0\1\12\24\0\1\u0147\10\0\1\u0147"+
    "\50\0\4\12\1\266\25\12\14\0\12\12\21\0\1\12"+
    "\2\0\32\12\1\u0179\13\0\12\12\21\0\1\12\12\0"+
    "\1\u0179\21\0\1\u0179\51\0\22\12\1\u017a\7\12\1\0"+
    "\1\u017b\12\0\12\12\21\0\1\12\33\0\1\u017c\52\0"+
    "\2\12\1\u017d\27\12\14\0\12\12\21\0\1\12\6\0"+
    "\1\u014c\77\0\23\12\1\u017e\6\12\14\0\12\12\21\0"+
    "\1\12\2\0\4\12\1\u017f\25\12\14\0\12\12\21\0"+
    "\1\12\2\0\32\12\1\u0180\13\0\12\12\21\0\1\12"+
    "\6\0\1\u0181\113\0\1\u0182\72\0\1\u0183\43\0\1\u0183"+
    "\41\0\1\u0174\76\0\1\u0184\31\201\14\0\1\u0184\11\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\1\0\31\201"+
    "\1\u0185\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\4\201\1\u0186\25\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\12\201\1\u0187"+
    "\17\201\14\0\12\201\4\0\1\201\1\0\1\201\1\0"+
    "\1\u0188\10\0\2\201\1\0\4\201\1\u0189\25\201\14\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\5\0"+
    "\1\u018a\122\0\1\u018b\60\0\24\201\1\u018c\5\201\14\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\25\201\1\u018d\4\201\14\0\12\201\4\0\1\201\1\0"+
    "\1\201\12\0\1\u018d\1\201\1\0\22\201\1\u018e\7\201"+
    "\1\0\1\u018f\12\0\12\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\23\0\1\u018f\10\0\1\u018f\75\0\1\u0190"+
    "\53\0\1\u0190\2\0\2\12\1\227\27\12\14\0\12\12"+
    "\21\0\1\12\4\0\1\231\101\0\13\12\1\101\16\12"+
    "\14\0\12\12\21\0\1\12\2\0\24\12\1\213\5\12"+
    "\14\0\12\12\21\0\1\12\2\0\4\12\1\u0191\25\12"+
    "\14\0\12\12\21\0\1\12\2\0\23\12\1\214\6\12"+
    "\14\0\12\12\21\0\1\12\25\0\1\u0192\60\0\16\12"+
    "\1\u0193\13\12\14\0\3\12\1\u0193\6\12\21\0\1\12"+
    "\20\0\1\u0194\32\0\1\u0194\32\0\4\12\1\u0195\25\12"+
    "\14\0\12\12\21\0\1\12\2\0\4\12\1\u0196\25\12"+
    "\14\0\12\12\21\0\1\12\2\0\2\12\1\u0197\27\12"+
    "\14\0\12\12\21\0\1\12\2\0\3\12\1\u0198\26\12"+
    "\14\0\1\12\1\u0198\10\12\21\0\1\12\2\0\1\u0199"+
    "\31\12\14\0\1\u0199\11\12\21\0\1\12\4\0\1\u019a"+
    "\104\0\1\u019b\43\0\1\u019b\34\0\1\u019c\45\0\1\u019c"+
    "\35\0\23\12\1\u019d\6\12\14\0\12\12\21\0\1\12"+
    "\2\0\4\12\1\u019e\25\12\14\0\12\12\21\0\1\12"+
    "\6\0\1\u019f\103\0\1\u0147\115\0\1\u01a0\32\0\1\u01a0"+
    "\32\0\32\12\1\0\1\u014c\12\0\12\12\21\0\1\12"+
    "\24\0\1\u014c\10\0\1\u014c\101\0\1\u0147\52\0\23\12"+
    "\1\u01a1\6\12\14\0\12\12\21\0\1\12\2\0\31\12"+
    "\1\u01a2\14\0\12\12\21\0\1\12\2\0\32\12\1\0"+
    "\1\u01a3\12\0\12\12\21\0\1\12\25\0\1\u014c\101\0"+
    "\1\u0147\30\0\1\u0147\35\0\1\u01a4\103\0\1\u01a5\77\0"+
    "\13\201\1\u0189\16\201\14\0\12\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\21\201\1\u01a6\10\201\14\0"+
    "\4\201\1\u01a6\5\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\21\201\1\u01a7\10\201\14\0\4\201\1\u01a7"+
    "\5\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\10\201\1\u01a8\21\201\1\u01a9\13\0\12\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\11\0\1\u01a9\21\0\1\u01a9"+
    "\51\0\22\201\1\u0156\7\201\1\0\1\u018b\12\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\23\0\1\u018b"+
    "\10\0\1\u018b\50\0\4\201\1\u011f\25\201\14\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\1\0\4\201"+
    "\1\u01aa\25\201\14\0\12\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\10\201\1\u01ab\21\201\1\u01ac\13\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\11\0"+
    "\1\u01ac\21\0\1\u01ac\55\0\1\u01ad\77\0\1\214\31\12"+
    "\14\0\1\214\11\12\21\0\1\12\4\0\1\u01ae\101\0"+
    "\15\12\1\72\14\12\14\0\2\12\1\72\7\12\21\0"+
    "\1\12\17\0\1\73\32\0\1\73\33\0\15\12\1\u01af"+
    "\14\12\14\0\2\12\1\u01af\7\12\21\0\1\12\2\0"+
    "\31\12\1\u01b0\14\0\12\12\21\0\1\12\2\0\4\12"+
    "\1\u0198\25\12\14\0\12\12\21\0\1\12\2\0\16\12"+
    "\1\u01b1\13\12\14\0\3\12\1\u01b1\6\12\21\0\1\12"+
    "\2\0\2\12\1\101\27\12\14\0\12\12\21\0\1\12"+
    "\6\0\1\u019b\115\0\1\353\32\0\1\353\34\0\1\103"+
    "\101\0\4\12\1\70\25\12\14\0\12\12\21\0\1\12"+
    "\33\0\1\u01b2\67\0\1\u0147\32\0\1\u0147\33\0\32\12"+
    "\1\u01b3\13\0\12\12\21\0\1\12\2\0\2\12\1\u01b4"+
    "\27\12\14\0\12\12\21\0\1\12\21\0\1\u01b5\101\0"+
    "\1\u01b6\32\0\1\u01b6\33\0\1\u01b7\3\201\1\u01b8\25\201"+
    "\14\0\1\u01b7\11\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\21\201\1\u01b9\10\201\14\0\4\201\1\u01b9"+
    "\5\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\4\201\1\u0156\25\201\14\0\12\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\5\0\1\u018b\77\0\21\201\1\u0156"+
    "\10\201\14\0\4\201\1\u0156\5\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\16\201\1\u01ba\13\201\14\0"+
    "\3\201\1\u01ba\6\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\17\0\1\u01bb\32\0\1\u01bb\53\0\1\u018b\30\0"+
    "\1\u018b\40\0\1\73\74\0\23\12\1\340\6\12\14\0"+
    "\12\12\21\0\1\12\2\0\16\12\1\u01bc\13\12\14\0"+
    "\3\12\1\u01bc\6\12\21\0\1\12\2\0\5\12\1\72"+
    "\24\12\14\0\12\12\21\0\1\12\20\0\1\u01bd\32\0"+
    "\1\u01bd\50\0\1\u01be\32\0\1\u01be\32\0\16\12\1\u01bf"+
    "\13\12\14\0\3\12\1\u01bf\6\12\21\0\1\12\2\0"+
    "\1\u01c0\45\0\1\u01c0\60\0\1\341\60\0\26\201\1\u01c1"+
    "\3\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\1\0\22\201\1\u01c2\7\201\1\0\1\u01c3\12\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\16\201\1\u01c4\13\201\14\0\3\201\1\u01c4\6\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\1\0\15\201\1\u0156"+
    "\14\201\14\0\2\201\1\u0156\7\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\16\0\1\u018b\32\0\1\u018b\33\0"+
    "\15\12\1\u01c5\14\12\14\0\2\12\1\u01c5\7\12\21\0"+
    "\1\12\17\0\1\u01c6\32\0\1\u01c6\50\0\1\u014c\32\0"+
    "\1\u014c\33\0\14\12\1\u01c7\15\12\14\0\12\12\21\0"+
    "\1\12\4\0\1\u014e\101\0\31\201\1\u01c8\14\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\1\0\17\201"+
    "\1\u01c9\12\201\14\0\12\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\20\0\1\u01ca\64\0\21\201\1\u01cb\10\201"+
    "\14\0\4\201\1\u01cb\5\201\4\0\1\201\1\0\1\201"+
    "\12\0\2\201\1\0\2\12\1\213\27\12\14\0\12\12"+
    "\21\0\1\12\4\0\1\u01cc\101\0\17\12\1\u01cd\12\12"+
    "\14\0\12\12\21\0\1\12\2\0\17\201\1\u01ce\12\201"+
    "\14\0\12\201\4\0\1\201\1\0\1\201\12\0\2\201"+
    "\1\0\16\201\1\u01cf\13\201\14\0\3\201\1\u01cf\6\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\17\0\1\u01d0"+
    "\32\0\1\u01d0\32\0\14\201\1\u01d1\15\201\14\0\12\201"+
    "\4\0\1\201\1\0\1\201\12\0\2\201\5\0\1\u01d2"+
    "\77\0\10\12\1\u01d3\21\12\1\u01d4\13\0\12\12\21\0"+
    "\1\12\2\0\16\201\1\u01d5\13\201\14\0\3\201\1\u01d5"+
    "\6\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\15\201\1\u01d6\14\201\14\0\2\201\1\u01d6\7\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\16\0\1\u01d7\32\0"+
    "\1\u01d7\33\0\22\201\1\u01d8\7\201\1\0\1\u01d9\12\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\13\12\1\u01da\16\12\14\0\12\12\21\0\1\12\15\0"+
    "\1\u01db\70\0\22\201\1\u01dc\7\201\1\0\1\u01dd\12\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\22\201\1\u01de\7\201\1\0\1\u01df\12\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\23\0\1\u01df\10\0"+
    "\1\u01df\50\0\6\201\1\u0156\23\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\7\0\1\u018b\75\0"+
    "\4\12\1\137\25\12\14\0\12\12\21\0\1\12\6\0"+
    "\1\u01e0\77\0\23\201\1\u01e1\6\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\24\0\1\u01e2\60\0"+
    "\4\201\1\u01e3\25\201\14\0\12\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\5\0\1\u01e4\120\0\1\73\30\0"+
    "\1\73\31\0\31\201\1\u01e5\14\0\12\201\4\0\1\201"+
    "\1\0\1\201\12\0\2\201\32\0\1\u01e6\52\0\31\201"+
    "\1\u01e7\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\32\0\1\u01e8\52\0\3\201\1\u01e9\26\201\14\0"+
    "\1\201\1\u01e9\10\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\4\0\1\u01ea\43\0\1\u01ea\34\0\7\201\1\u01eb"+
    "\22\201\14\0\12\201\4\0\1\201\1\0\1\201\12\0"+
    "\2\201\10\0\1\u01ec\74\0\1\u01ed\31\201\14\0\1\u01ed"+
    "\11\201\4\0\1\201\1\0\1\201\12\0\2\201\1\0"+
    "\1\u01ee\45\0\1\u01ee\35\0\4\201\1\u01ef\25\201\14\0"+
    "\12\201\4\0\1\201\1\0\1\201\12\0\2\201\5\0"+
    "\1\u01f0\77\0\23\201\1\u01f1\6\201\14\0\12\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\24\0\1\u01f2\60\0"+
    "\1\u01f3\31\201\14\0\1\u01f3\11\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\1\u01f4\45\0\1\u01f4\35\0"+
    "\1\u0156\31\201\14\0\1\u0156\11\201\4\0\1\201\1\0"+
    "\1\201\12\0\2\201\1\0\1\u018b\45\0\1\u018b\35\0"+
    "\3\201\1\u018d\26\201\14\0\1\201\1\u018d\10\201\4\0"+
    "\1\201\1\0\1\201\12\0\2\201\4\0\1\u0190\43\0"+
    "\1\u0190\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\35\1\1\11\12\1\2\11\2\1\4\11"+
    "\10\1\1\11\7\1\1\0\11\1\1\0\5\1\1\0"+
    "\1\1\1\0\20\1\5\0\1\11\1\1\1\0\1\11"+
    "\2\0\4\1\1\0\1\1\3\0\1\1\2\0\1\1"+
    "\1\0\10\1\1\0\21\1\1\0\2\1\1\0\6\1"+
    "\1\0\1\1\1\0\3\1\1\0\10\1\1\0\2\1"+
    "\1\0\12\1\10\0\2\1\1\0\16\1\1\0\1\1"+
    "\1\0\5\1\1\0\11\1\2\0\3\1\1\0\5\1"+
    "\1\0\3\1\1\0\6\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\6\0\1\11"+
    "\10\1\1\0\4\1\1\0\1\1\1\0\10\1\1\0"+
    "\10\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\4\0\6\1"+
    "\2\0\3\1\2\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\6\1\3\0\2\1\3\0\1\1\2\0\3\1"+
    "\4\0\4\1\1\0\1\1\1\0\1\11\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\5\1\3\0\3\1\1\0"+
    "\2\1\3\0\3\1\1\0\2\1\3\0\3\1\2\0"+
    "\1\1\2\0\4\1\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return BRACKET;
            }
          case 25: break;
          case 2: 
            { lexeme = yytext();return ERROR;
            }
          case 26: break;
          case 3: 
            { lexeme=yytext(); return IDENTIFIER;
            }
          case 27: break;
          case 4: 
            { lexeme=yytext(); return COMPARISON_OPERATOR;
            }
          case 28: break;
          case 5: 
            { lexeme=yytext(); return ARITHMETIC_OPERATOR;
            }
          case 29: break;
          case 6: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 30: break;
          case 7: 
            { lexeme=yytext(); return INTEGER;
            }
          case 31: break;
          case 8: 
            { lexeme = yytext(); return POINT;
            }
          case 32: break;
          case 9: 
            { lexeme=yytext(); return NEWLINE;
            }
          case 33: break;
          case 10: 
            { lexeme=yytext(); return WHITESPACE;
            }
          case 34: break;
          case 11: 
            { lexeme=yytext(); return SEMICOLON;
            }
          case 35: break;
          case 12: 
            { lexeme=yytext(); return COMMA;
            }
          case 36: break;
          case 13: 
            { lexeme=yytext(); return PARENTHESIS;
            }
          case 37: break;
          case 14: 
            { lexeme=yytext(); return BRACE;
            }
          case 38: break;
          case 15: 
            { lexeme=yytext(); return COMMENT;
            }
          case 39: break;
          case 16: 
            { lexeme=yytext(); return RESERVED_WORD;
            }
          case 40: break;
          case 17: 
            { lexeme=yytext(); return CONTROL_STRUCTURE;
            }
          case 41: break;
          case 18: 
            { lexeme = yytext(); return PHP;
            }
          case 42: break;
          case 19: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 43: break;
          case 20: 
            { lexeme=yytext(); return STRING;
            }
          case 44: break;
          case 21: 
            { lexeme=yytext(); return VARIABLE_ID;
            }
          case 45: break;
          case 22: 
            { lexeme=yytext(); return FLOATING_POINT_NUM;
            }
          case 46: break;
          case 23: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 47: break;
          case 24: 
            { lexeme=yytext(); return RESERVED_VARIABLE;
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
