/* The following code was generated by JFlex 1.4.3 on 10/10/18 12:59 PM */


package analizador_lexico;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/10/18 12:59 PM from the specification file
 * <tt>D:/GitHub/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\44\1\0\1\52\1\102\22\0\1\51\1\3\1\45"+
    "\2\0\1\7\1\11\1\43\1\36\1\35\1\5\1\4\1\34\1\4"+
    "\1\31\1\6\1\23\1\30\6\26\2\22\1\0\1\33\1\1\1\2"+
    "\1\1\2\0\1\72\1\27\2\25\1\32\1\25\1\100\1\47\1\75"+
    "\2\47\1\76\1\77\1\71\1\47\1\70\1\47\1\74\1\101\4\47"+
    "\1\24\2\47\1\40\1\0\1\37\1\0\1\46\1\0\1\17\1\60"+
    "\1\62\1\56\1\15\1\16\1\61\1\66\1\54\1\47\1\67\1\20"+
    "\1\64\1\55\1\57\1\50\1\47\1\13\1\21\1\12\1\14\1\53"+
    "\1\65\1\63\1\73\1\47\1\42\1\10\1\41\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\5\2\1\6\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\2\1\1\21\15\6\1\21"+
    "\1\2\2\7\1\0\2\21\1\4\10\6\1\0\1\22"+
    "\2\0\1\7\4\0\1\23\1\0\1\23\1\0\1\6"+
    "\1\24\16\6\1\0\1\7\4\21\6\6\1\25\1\6"+
    "\1\0\1\22\1\0\2\7\1\6\1\26\10\6\1\27"+
    "\4\6\3\0\1\21\1\0\1\30\1\31\1\6\1\32"+
    "\2\6\1\33\2\6\1\34\2\6\1\35\10\6\2\0"+
    "\6\6\1\36\1\37\1\40\1\41\6\6\1\42\1\6"+
    "\1\43\2\6\1\44\3\6\1\45\2\6\1\46\5\6"+
    "\1\47\1\50\2\6\1\51\1\6\1\52\1\53\2\6"+
    "\1\54\1\6\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\206\0\206\0\311\0\103\0\u010c"+
    "\0\u014f\0\u0192\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324"+
    "\0\u0367\0\u03aa\0\u03ed\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0430\0\103\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\103"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\103\0\u096c"+
    "\0\u09af\0\u03ed\0\u09f2\0\u0a35\0\103\0\u0a78\0\u0abb\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u04b6\0\u04b6\0\u053c"+
    "\0\u053c\0\u057f\0\u0ea8\0\u025b\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u025b\0\u15b9"+
    "\0\u15fc\0\u15fc\0\u163f\0\u0ddf\0\u0e22\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u131b\0\u135e\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u025b\0\u025b\0\u1b38\0\u025b\0\u1b7b\0\u1bbe\0\u025b"+
    "\0\u1c01\0\u1c44\0\u025b\0\u1c87\0\u1cca\0\u025b\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1ab2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u025b\0\u025b"+
    "\0\u025b\0\u025b\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u025b\0\u228c\0\u025b\0\u22cf\0\u2312\0\u025b\0\u2355\0\u2398"+
    "\0\u23db\0\u025b\0\u241e\0\u2461\0\u025b\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u025b\0\u025b\0\u25f3\0\u2636\0\u025b\0\u2679"+
    "\0\u025b\0\u025b\0\u26bc\0\u26ff\0\u025b\0\u2742\0\u025b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\15"+
    "\1\20\1\21\1\22\2\15\1\21\1\15\1\21\1\23"+
    "\1\15\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\15\2\40\1\41"+
    "\1\42\1\43\1\44\1\15\1\45\1\15\1\46\2\15"+
    "\1\47\2\15\1\50\1\51\2\15\1\52\2\15\1\53"+
    "\1\54\1\55\1\56\105\0\1\57\122\0\1\60\1\61"+
    "\2\0\1\60\1\0\1\60\1\62\56\0\1\63\1\64"+
    "\104\0\1\65\103\0\1\65\103\0\1\15\1\66\15\15"+
    "\1\0\1\15\13\0\3\15\2\0\13\15\1\67\13\15"+
    "\13\0\3\15\1\70\13\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\6\15\1\71\10\15\1\0\1\15"+
    "\13\0\3\15\2\0\10\15\1\72\16\15\13\0\5\15"+
    "\1\73\11\15\1\0\1\15\13\0\3\15\2\0\4\15"+
    "\1\74\22\15\13\0\1\75\16\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\16\0\1\76\4\0\2\21\2\0"+
    "\1\21\1\0\1\21\1\77\1\76\15\0\1\100\47\0"+
    "\1\76\4\0\1\101\1\102\1\103\1\0\1\102\1\104"+
    "\1\102\1\77\1\76\15\0\1\100\7\0\1\104\2\0"+
    "\1\103\41\0\2\105\2\0\1\105\1\0\1\105\111\0"+
    "\1\40\104\0\1\40\41\0\43\106\1\107\1\0\36\106"+
    "\21\0\1\35\22\0\1\35\4\0\3\35\26\0\1\35"+
    "\44\110\1\0\1\111\35\110\12\0\10\15\2\0\2\15"+
    "\1\0\1\15\2\0\1\15\13\0\1\112\2\15\2\0"+
    "\27\15\13\0\17\15\1\0\1\15\13\0\3\15\2\0"+
    "\4\15\1\113\22\15\13\0\4\15\1\114\12\15\1\0"+
    "\1\15\13\0\3\15\2\0\2\15\1\115\6\15\1\116"+
    "\15\15\13\0\2\15\1\117\14\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\4\15\1\120\22\15\13\0\1\15\1\121"+
    "\15\15\1\0\1\15\13\0\3\15\2\0\4\15\1\122"+
    "\22\15\13\0\6\15\1\123\10\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\13\15\1\124\13\15\13\0\1\15\1\125"+
    "\15\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\3\15\1\126\13\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\3\15\1\127\13\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\5\15\1\130\11\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\3\15\1\131"+
    "\13\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\3\15\1\132\13\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\45\0\1\56\35\0\1\56\15\0\1\76\4\0"+
    "\2\60\2\0\1\60\1\0\1\60\1\77\1\76\65\0"+
    "\1\76\4\0\1\133\1\134\1\103\1\0\1\134\1\104"+
    "\1\134\1\77\1\76\25\0\1\104\2\0\1\103\17\0"+
    "\5\135\1\136\13\135\1\137\22\135\1\140\5\135\2\137"+
    "\26\135\1\137\44\64\1\0\36\64\12\0\2\15\1\141"+
    "\14\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\17\15\1\0\1\15\13\0\3\15\2\0\1\15\1\142"+
    "\25\15\13\0\1\143\16\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\7\15\1\144\7\15\1\0\1\15"+
    "\13\0\3\15\2\0\27\15\13\0\1\145\16\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\6\15\1\146"+
    "\10\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\1\15\1\147\15\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\1\15\1\150\15\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\5\0\1\151\15\0\2\152\2\0"+
    "\1\152\1\0\1\152\67\0\1\76\4\0\2\77\2\0"+
    "\1\77\1\0\1\77\1\153\1\76\62\0\1\40\105\0"+
    "\1\76\4\0\2\101\2\0\1\101\1\0\1\101\1\105"+
    "\1\76\15\0\1\100\47\0\1\76\4\0\1\101\1\102"+
    "\2\0\1\102\1\0\1\102\1\105\1\76\15\0\1\100"+
    "\47\0\3\154\2\0\2\154\1\0\4\154\1\0\1\154"+
    "\23\0\1\154\1\0\1\154\1\0\1\154\7\0\1\154"+
    "\33\0\1\155\4\0\1\155\67\0\1\76\4\0\2\105"+
    "\2\0\1\105\1\0\1\105\1\153\1\76\62\0\17\15"+
    "\1\0\1\15\13\0\3\15\2\0\1\15\1\156\25\15"+
    "\13\0\1\157\16\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\17\15\1\0\1\15\13\0\2\15\1\160"+
    "\2\0\27\15\13\0\6\15\1\161\10\15\1\0\1\15"+
    "\13\0\3\15\2\0\27\15\13\0\2\15\1\162\14\15"+
    "\1\0\1\15\13\0\3\15\2\0\27\15\13\0\3\15"+
    "\1\163\13\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\17\15\1\0\1\15\13\0\3\15\2\0\4\15"+
    "\1\164\22\15\13\0\5\15\1\165\11\15\1\0\1\15"+
    "\13\0\3\15\2\0\27\15\13\0\17\15\1\0\1\15"+
    "\13\0\3\15\2\0\1\15\1\166\25\15\13\0\17\15"+
    "\1\0\1\15\13\0\3\15\2\0\1\15\1\167\25\15"+
    "\13\0\17\15\1\0\1\15\13\0\3\15\2\0\12\15"+
    "\1\170\14\15\13\0\5\15\1\171\11\15\1\0\1\15"+
    "\13\0\3\15\2\0\27\15\13\0\6\15\1\172\10\15"+
    "\1\0\1\15\13\0\3\15\2\0\27\15\13\0\1\173"+
    "\16\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\1\174\16\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\16\0\1\76\4\0\2\133\2\0\1\133\1\0\1\133"+
    "\1\105\1\76\65\0\1\76\4\0\1\133\1\134\2\0"+
    "\1\134\1\0\1\134\1\105\1\76\50\0\5\175\1\176"+
    "\36\175\1\177\43\175\1\176\1\200\35\175\1\177\43\175"+
    "\1\176\13\175\1\137\22\175\1\140\5\175\2\137\26\175"+
    "\1\137\5\177\1\201\13\177\1\140\22\177\1\140\5\177"+
    "\2\140\26\177\1\140\12\0\3\15\1\202\13\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\7\15\1\203"+
    "\7\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\2\15\1\204\14\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\3\15\1\205\13\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\3\15\1\206\13\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\7\15\1\141"+
    "\7\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\17\15\1\0\1\15\13\0\3\15\2\0\1\15\1\207"+
    "\25\15\23\0\2\152\2\0\1\152\1\0\1\152\67\0"+
    "\1\76\14\0\1\76\62\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\3\15\1\210\23\15\13\0\3\15\1\211"+
    "\13\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\6\15\1\212\10\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\6\15\1\213\10\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\5\15\1\214\21\15\13\0\5\15\1\215"+
    "\11\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\6\15\1\216\10\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\7\15\1\217\7\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\6\15\1\220\10\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\17\15\1\0"+
    "\1\15\13\0\3\15\2\0\2\15\1\221\24\15\13\0"+
    "\17\15\1\0\1\15\13\0\3\15\2\0\17\15\1\222"+
    "\7\15\13\0\17\15\1\0\1\15\13\0\3\15\2\0"+
    "\3\15\1\223\23\15\13\0\6\15\1\224\10\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\15\15\1\225"+
    "\1\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\15\15\1\226\1\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\1\0\5\177\1\201\75\177\5\227\1\230\36\227"+
    "\1\0\36\227\5\177\1\201\1\40\74\177\12\0\1\15"+
    "\1\231\15\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\17\15\1\0\1\15\13\0\3\15\2\0\2\15"+
    "\1\232\24\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\2\15\1\233\24\15\13\0\1\15\1\234\15\15"+
    "\1\0\1\15\13\0\3\15\2\0\27\15\13\0\3\15"+
    "\1\235\13\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\6\15\1\236\10\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\14\15\1\237\12\15\13\0\7\15\1\240\7\15"+
    "\1\0\1\15\13\0\3\15\2\0\27\15\13\0\3\15"+
    "\1\241\13\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\1\242\16\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\1\15\1\243\15\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\22\15\1\244\1\245\3\15\13\0\17\15"+
    "\1\0\1\15\13\0\3\15\2\0\4\15\1\246\22\15"+
    "\13\0\17\15\1\0\1\15\13\0\3\15\2\0\20\15"+
    "\1\247\6\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\20\15\1\250\6\15\1\0\5\227\1\230\1\200"+
    "\35\227\1\0\36\227\12\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\2\15\1\251\24\15\13\0\17\15\1\0"+
    "\1\15\13\0\3\15\2\0\3\15\1\252\23\15\13\0"+
    "\17\15\1\0\1\15\13\0\3\15\2\0\6\15\1\253"+
    "\20\15\13\0\4\15\1\254\12\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\11\15\1\255\15\15\13\0\3\15\1\256"+
    "\13\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\1\15\1\257\15\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\17\15\1\0\1\15\13\0\3\15\2\0"+
    "\2\15\1\260\24\15\13\0\17\15\1\0\1\15\13\0"+
    "\3\15\2\0\1\15\1\261\25\15\13\0\17\15\1\0"+
    "\1\15\13\0\3\15\2\0\7\15\1\262\17\15\13\0"+
    "\1\263\16\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\1\264\16\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\7\15\1\265\7\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\5\15\1\266\11\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\3\15\1\267"+
    "\13\15\1\0\1\15\13\0\3\15\2\0\27\15\13\0"+
    "\5\15\1\270\11\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\1\271\16\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\2\15\1\272\24\15\13\0\3\15\1\273\13\15"+
    "\1\0\1\15\13\0\3\15\2\0\27\15\13\0\3\15"+
    "\1\274\13\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\17\15\1\0\1\15\13\0\3\15\2\0\7\15"+
    "\1\275\17\15\13\0\17\15\1\0\1\15\13\0\3\15"+
    "\2\0\2\15\1\276\24\15\13\0\17\15\1\0\1\15"+
    "\13\0\3\15\2\0\20\15\1\277\6\15\13\0\3\15"+
    "\1\300\13\15\1\0\1\15\13\0\3\15\2\0\27\15"+
    "\13\0\3\15\1\301\13\15\1\0\1\15\13\0\3\15"+
    "\2\0\27\15\13\0\3\15\1\302\13\15\1\0\1\15"+
    "\13\0\3\15\2\0\27\15\13\0\1\303\16\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\13\0\17\15\1\0"+
    "\1\15\13\0\3\15\2\0\6\15\1\304\20\15\13\0"+
    "\7\15\1\305\7\15\1\0\1\15\13\0\3\15\2\0"+
    "\27\15\13\0\3\15\1\306\13\15\1\0\1\15\13\0"+
    "\3\15\2\0\27\15\13\0\1\15\1\307\15\15\1\0"+
    "\1\15\13\0\3\15\2\0\27\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10117];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\14\1\5\11\1\1\1\11"+
    "\5\1\1\11\16\1\1\11\2\1\1\0\2\1\1\11"+
    "\10\1\1\0\1\1\2\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\0\20\1\1\0\15\1\1\0\1\1\1\0"+
    "\21\1\3\0\1\1\1\0\25\1\2\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int linenumber = 0;
    public int columnnumber = 0;
    public String lexeme;
    public int errornumber = 0;
    public int errornumberLength = 0;
    public String Errors = "";
    public void getErrors(String error){
        errornumber++;
       System.out.println( errornumber + " Lexic Message Line: " + linenumber + " Col: " + columnnumber + " Text: " + error);
    }
    public void getIdenterror(String error){
        errornumberLength++;
       System.out.println( errornumberLength + " Lenght Message Line: " + linenumber + " Col: " + columnnumber + " Text: " + error);
    }
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn, yytext());
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return new Symbol(sym.STRING, yyline, yycolumn, yytext());
          }
        case 46: break;
        case 19: 
          { return new Symbol(sym.STRINGCONSTANT, yyline, yycolumn, yytext());
          }
        case 47: break;
        case 39: 
          { return new Symbol(sym.GETBYTE, yyline, yycolumn, yytext());
          }
        case 48: break;
        case 38: 
          { return new Symbol(sym.EXTENDS, yyline, yycolumn, yytext());
          }
        case 49: break;
        case 24: 
          { return new Symbol(sym.BOOLCONSTANT, yyline, yycolumn, yytext());
          }
        case 50: break;
        case 2: 
          { return new Symbol(sym.Comparison_op, yyline, yycolumn, yytext());
          }
        case 51: break;
        case 28: 
          { return new Symbol(sym.NULL, yyline, yycolumn, yytext());
          }
        case 52: break;
        case 4: 
          { return new Symbol(sym.Logical_Op, yyline, yycolumn, yytext());
          }
        case 53: break;
        case 34: 
          { return new Symbol(sym.RETURN, yyline, yycolumn, yytext());
          }
        case 54: break;
        case 33: 
          { return new Symbol(sym.PRINT, yyline, yycolumn, yytext());
          }
        case 55: break;
        case 36: 
          { return new Symbol(sym.DOUBLE, yyline, yycolumn, yytext());
          }
        case 56: break;
        case 25: 
          { return new Symbol(sym.THIS, yyline, yycolumn, yytext());
          }
        case 57: break;
        case 41: 
          { return new Symbol(sym.NEWARRAY, yyline, yycolumn, yytext());
          }
        case 58: break;
        case 26: 
          { return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
          }
        case 59: break;
        case 42: 
          { return new Symbol(sym.READLINE, yyline, yycolumn, yytext());
          }
        case 60: break;
        case 29: 
          { return new Symbol(sym.BOOL, yyline, yycolumn, yytext());
          }
        case 61: break;
        case 43: 
          { return new Symbol(sym.INTERFACE, yyline, yycolumn, yytext());
          }
        case 62: break;
        case 23: 
          { return new Symbol(sym.NEW, yyline, yycolumn, yytext());
          }
        case 63: break;
        case 8: 
          { return new Symbol(sym.Point, yyline, yycolumn, yytext());
          }
        case 64: break;
        case 45: 
          { return new Symbol(sym.READINTEGER, yyline, yycolumn, yytext());
          }
        case 65: break;
        case 9: 
          { return new Symbol(sym.Semicolon, yyline, yycolumn, yytext());
          }
        case 66: break;
        case 14: 
          { return new Symbol(sym.LeftBrace, yyline, yycolumn, yytext());
          }
        case 67: break;
        case 11: 
          { return new Symbol(sym.RightParenthesis, yyline, yycolumn, yytext());
          }
        case 68: break;
        case 7: 
          { return new Symbol(sym.INTCONSTANT, yyline, yycolumn, yytext());
          }
        case 69: break;
        case 21: 
          { return new Symbol(sym.FOR, yyline, yycolumn, yytext());
          }
        case 70: break;
        case 12: 
          { return new Symbol(sym.LeftParenthesis, yyline, yycolumn, yytext());
          }
        case 71: break;
        case 13: 
          { return new Symbol(sym.RightBrace, yyline, yycolumn, yytext());
          }
        case 72: break;
        case 1: 
          { lexeme=yytext();linenumber=yyline;columnnumber=yycolumn;getErrors(lexeme);
          }
        case 73: break;
        case 40: 
          { return new Symbol(sym.SETBYTE, yyline, yycolumn, yytext());
          }
        case 74: break;
        case 37: 
          { return new Symbol(sym.MALLOC, yyline, yycolumn, yytext());
          }
        case 75: break;
        case 6: 
          { lexeme=yytext();
                    if(lexeme.length()<31)
                        return new Symbol(sym.ident, yyline, yycolumn, yytext());
                    linenumber=yyline;
                    columnnumber=yycolumn;
                    String temp = lexeme.substring(0, 30);
                    getIdenterror(temp);
          }
        case 76: break;
        case 22: 
          { return new Symbol(sym.INT, yyline, yycolumn, yytext());
          }
        case 77: break;
        case 5: 
          { return new Symbol(sym.Arithmetic_Op, yyline, yycolumn, yytext());
          }
        case 78: break;
        case 10: 
          { return new Symbol(sym.Comma, yyline, yycolumn, yytext());
          }
        case 79: break;
        case 16: 
          { return new Symbol(sym.LeftBracket, yyline, yycolumn, yytext());
          }
        case 80: break;
        case 20: 
          { return new Symbol(sym.IF, yyline, yycolumn, yytext());
          }
        case 81: break;
        case 44: 
          { return new Symbol(sym.IMPLEMENTS, yyline, yycolumn, yytext());
          }
        case 82: break;
        case 31: 
          { return new Symbol(sym.CLASS, yyline, yycolumn, yytext());
          }
        case 83: break;
        case 3: 
          { return new Symbol(sym.Equal, yyline, yycolumn, yytext());
          }
        case 84: break;
        case 30: 
          { return new Symbol(sym.BREAK, yyline, yycolumn, yytext());
          }
        case 85: break;
        case 15: 
          { return new Symbol(sym.RightBracket, yyline, yycolumn, yytext());
          }
        case 86: break;
        case 27: 
          { return new Symbol(sym.VOID, yyline, yycolumn, yytext());
          }
        case 87: break;
        case 18: 
          { return new Symbol(sym.DOUBLECONSTANT, yyline, yycolumn, yytext());
          }
        case 88: break;
        case 32: 
          { return new Symbol(sym.WHILE, yyline, yycolumn, yytext());
          }
        case 89: break;
        case 17: 
          { 
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
