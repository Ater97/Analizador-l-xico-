/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;

import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/Stuff/Docs/Analizador-lexico/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\63\1\64\1\64\1\64\22\0\1\100\1\40\1\66"+
    "\1\77\1\70\1\45\1\46\1\62\1\73\1\73\1\43\1\42\1\72"+
    "\1\42\1\61\1\44\1\56\1\60\6\57\2\55\1\103\1\71\1\35"+
    "\1\37\1\36\1\41\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\74\1\0\1\74\1\0\1\32\1\0\1\47\1\2\1\3\1\50"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\51"+
    "\1\52\1\20\1\21\1\53\1\23\1\24\1\25\1\101\1\27\1\54"+
    "\1\31\1\12\1\75\1\76\1\75\1\0\6\67\1\65\32\67\1\102"+
    "\137\67\60\0\2\33\115\0\1\34\u1500\0\1\100\u097f\0\13\100\35\0"+
    "\1\64\1\64\5\0\1\100\57\0\1\100\u0fa0\0\1\100\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\22\3\3\2\2\4\1\5\1\6\1\7"+
    "\4\5\6\6\2\10\1\7\1\2\1\11\1\12\2\2"+
    "\1\13\1\14\1\15\1\16\2\1\1\17\1\12\1\7"+
    "\3\3\2\20\6\3\1\0\11\3\1\0\2\3\1\21"+
    "\3\3\1\0\1\3\1\0\13\3\4\0\2\4\1\0"+
    "\1\22\2\0\2\6\1\20\1\6\1\0\1\23\3\0"+
    "\1\10\2\0\1\24\1\0\1\24\6\25\1\3\1\0"+
    "\21\3\1\0\1\21\1\3\1\0\6\3\1\0\1\3"+
    "\1\0\3\3\1\0\10\3\1\0\10\3\7\0\1\6"+
    "\1\0\1\26\2\10\13\25\1\3\1\0\5\3\1\0"+
    "\3\3\1\21\4\3\2\0\3\3\1\0\4\3\1\0"+
    "\3\3\1\0\15\3\5\0\1\17\1\6\13\25\1\3"+
    "\1\0\10\3\1\0\7\3\2\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\12\3\3\0\1\27"+
    "\4\25\1\30\4\25\1\3\1\0\1\3\1\20\1\3"+
    "\1\0\1\3\1\0\5\3\3\0\2\3\1\0\7\3"+
    "\2\0\10\25\1\3\2\0\1\3\1\21\3\3\3\0"+
    "\1\3\2\20\1\31\4\3\2\0\5\25\1\0\2\3"+
    "\1\0\3\3\1\0\4\25\1\3\1\0\3\3\2\25"+
    "\1\0\1\25\1\3\1\0\1\3\2\25\1\0\1\25"+
    "\1\0\1\3\2\25\1\0\1\25\1\21\1\3\1\0"+
    "\2\25\1\0\1\25\1\0\1\3\1\0\2\25\1\0"+
    "\1\27\1\0\2\25\1\0\2\25\1\0\2\25\1\0"+
    "\2\25\1\0\2\25\1\0\1\25\1\0\1\25\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\104"+
    "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18"+
    "\0\u0a5c\0\u0aa0\0\104\0\104\0\u0ae4\0\u0b28\0\104\0\104"+
    "\0\104\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u04c8\0\104\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u0264\0\104\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u0264"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\104\0\u17a4\0\u17e8"+
    "\0\104\0\u0a5c\0\u182c\0\u1870\0\u18b4\0\u094c\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u0aa0\0\u0aa0"+
    "\0\u0ae4\0\u0ae4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c"+
    "\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc"+
    "\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c"+
    "\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2ce4\0\u19c4"+
    "\0\u1a08\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\104\0\u3d18\0\u3d5c"+
    "\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c"+
    "\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc"+
    "\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc"+
    "\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c"+
    "\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u1b5c\0\u4b70\0\u4bb4\0\u4bf8"+
    "\0\u4c3c\0\u1b5c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4"+
    "\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4"+
    "\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214"+
    "\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434"+
    "\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654"+
    "\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874"+
    "\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5830\0\u5a50"+
    "\0\u0264\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5a50\0\u5be8"+
    "\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08"+
    "\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028"+
    "\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u6204\0\u6248"+
    "\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424\0\u6468"+
    "\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\104\0\u6644"+
    "\0\u6688\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864"+
    "\0\u68a8\0\u68ec\0\u6930\0\104\0\u6974\0\u69b8\0\u69fc\0\u6a40"+
    "\0\u6a84\0\u6ac8\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60"+
    "\0\u6ca4\0\u6ce8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\12\1\15\1\12\1\16"+
    "\1\12\1\17\1\20\1\21\1\22\1\23\1\24\2\12"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\47\1\50\2\47\1\51\1\52"+
    "\1\53\2\54\1\55\1\2\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\54\1\66\1\54\1\67"+
    "\105\0\1\12\1\70\13\12\1\71\3\12\1\72\1\73"+
    "\7\12\1\0\1\74\12\0\2\12\1\71\1\12\1\72"+
    "\5\12\20\0\1\12\3\0\21\12\1\75\10\12\14\0"+
    "\4\12\1\75\5\12\20\0\1\12\3\0\1\76\12\12"+
    "\1\77\2\12\1\100\13\12\14\0\1\76\2\12\1\100"+
    "\6\12\20\0\1\12\3\0\4\12\1\101\3\12\1\102"+
    "\5\12\1\73\13\12\1\103\13\0\3\12\1\73\6\12"+
    "\20\0\1\12\3\0\2\12\1\104\10\12\1\105\1\106"+
    "\1\107\7\12\1\110\1\12\1\111\2\12\14\0\2\12"+
    "\1\107\2\12\1\111\4\12\20\0\1\110\3\0\10\12"+
    "\1\112\5\12\1\113\5\12\1\114\5\12\1\115\13\0"+
    "\3\12\1\113\6\12\20\0\1\12\3\0\13\12\1\116"+
    "\2\12\1\117\13\12\14\0\3\12\1\117\6\12\20\0"+
    "\1\12\3\0\32\12\14\0\12\12\20\0\1\12\3\0"+
    "\5\12\1\120\6\12\1\121\1\122\4\12\1\123\7\12"+
    "\1\0\1\124\12\0\2\12\1\122\7\12\20\0\1\12"+
    "\3\0\10\12\1\125\21\12\1\126\13\0\12\12\20\0"+
    "\1\12\3\0\1\127\3\12\1\130\25\12\14\0\1\127"+
    "\11\12\20\0\1\12\3\0\21\12\1\131\2\12\1\132"+
    "\5\12\14\0\4\12\1\131\5\12\20\0\1\12\3\0"+
    "\4\12\1\133\25\12\14\0\12\12\20\0\1\12\3\0"+
    "\23\12\1\134\2\12\1\135\3\12\14\0\12\12\20\0"+
    "\1\12\3\0\7\12\1\136\11\12\1\137\10\12\14\0"+
    "\4\12\1\137\5\12\20\0\1\12\3\0\15\12\1\123"+
    "\4\12\1\102\7\12\1\0\1\103\12\0\2\12\1\123"+
    "\7\12\20\0\1\12\3\0\1\140\31\12\14\0\1\140"+
    "\11\12\20\0\1\12\3\0\7\12\1\141\22\12\14\0"+
    "\12\12\20\0\1\12\3\0\31\12\1\142\14\0\6\12"+
    "\24\0\1\12\17\0\1\143\1\144\4\0\1\124\10\0"+
    "\1\124\14\0\1\144\56\0\1\145\115\0\1\146\1\147"+
    "\1\0\1\150\101\0\1\146\103\0\1\31\103\0\1\146"+
    "\1\41\5\0\7\41\21\0\1\41\43\0\1\151\2\0"+
    "\1\146\117\0\1\47\1\50\2\47\1\152\65\0\1\40"+
    "\103\0\1\153\1\65\77\0\1\41\5\0\7\41\21\0"+
    "\1\41\6\0\1\12\1\70\13\12\1\71\3\12\1\72"+
    "\1\73\7\12\1\0\1\74\3\0\1\41\5\0\1\41"+
    "\2\45\1\154\1\45\1\155\1\45\4\12\15\0\1\41"+
    "\2\0\1\12\3\0\4\12\1\101\3\12\1\102\5\12"+
    "\1\73\13\12\1\103\4\0\1\41\5\0\1\41\3\45"+
    "\1\156\2\45\4\12\15\0\1\41\2\0\1\12\3\0"+
    "\1\127\3\12\1\130\25\12\5\0\1\41\5\0\1\41"+
    "\1\157\5\45\4\12\15\0\1\41\2\0\1\12\3\0"+
    "\32\12\5\0\1\41\5\0\1\41\6\45\4\12\15\0"+
    "\1\41\2\0\1\12\3\0\4\12\1\133\25\12\5\0"+
    "\1\41\5\0\1\41\6\45\4\12\15\0\1\41\2\0"+
    "\1\12\7\0\1\160\47\0\4\47\1\161\24\0\1\162"+
    "\2\0\1\160\22\0\1\163\23\0\1\163\1\164\3\165"+
    "\1\161\77\0\4\166\23\0\62\167\1\170\3\0\16\167"+
    "\63\171\3\0\1\172\15\171\1\0\1\173\5\174\1\175"+
    "\1\176\7\174\1\177\11\174\1\200\14\0\1\173\5\174"+
    "\10\0\1\174\1\0\1\174\11\0\2\174\76\0\2\63"+
    "\45\0\1\41\5\0\7\41\20\0\1\63\1\64\5\0"+
    "\63\65\3\0\16\65\1\0\22\12\1\201\7\12\1\0"+
    "\1\202\12\0\12\12\20\0\1\12\3\0\3\12\1\73"+
    "\26\12\14\0\1\12\1\73\10\12\20\0\1\12\3\0"+
    "\21\12\1\203\10\12\14\0\4\12\1\203\5\12\20\0"+
    "\1\12\3\0\4\12\1\204\25\12\14\0\12\12\20\0"+
    "\1\12\3\0\13\12\1\205\6\12\1\206\1\207\6\12"+
    "\14\0\12\12\20\0\1\12\3\0\1\210\15\12\1\211"+
    "\13\12\14\0\1\210\2\12\1\211\6\12\20\0\1\12"+
    "\3\0\15\12\1\212\14\12\14\0\2\12\1\212\7\12"+
    "\20\0\1\12\3\0\2\12\1\213\2\12\1\214\24\12"+
    "\14\0\12\12\20\0\1\12\3\0\4\12\1\73\25\12"+
    "\14\0\12\12\20\0\1\12\7\0\1\74\77\0\7\12"+
    "\1\215\22\12\14\0\12\12\20\0\1\12\3\0\22\12"+
    "\1\216\7\12\14\0\12\12\20\0\1\12\3\0\17\12"+
    "\1\217\12\12\14\0\12\12\20\0\1\12\3\0\3\12"+
    "\1\220\26\12\14\0\1\12\1\220\10\12\20\0\1\12"+
    "\3\0\1\221\31\12\14\0\1\221\11\12\20\0\1\12"+
    "\3\0\10\12\1\222\12\12\1\223\6\12\1\224\13\0"+
    "\12\12\20\0\1\12\3\0\15\12\1\110\14\12\14\0"+
    "\2\12\1\110\7\12\20\0\1\12\3\0\21\12\1\225"+
    "\10\12\14\0\4\12\1\225\5\12\20\0\1\12\3\0"+
    "\15\12\1\226\14\12\14\0\2\12\1\226\7\12\20\0"+
    "\1\12\20\0\1\227\32\0\1\227\33\0\16\12\1\230"+
    "\13\12\14\0\3\12\1\230\6\12\20\0\1\12\3\0"+
    "\23\12\1\231\6\12\14\0\12\12\20\0\1\12\3\0"+
    "\17\12\1\232\12\12\14\0\12\12\20\0\1\12\3\0"+
    "\2\12\1\233\17\12\1\234\1\235\6\12\1\0\1\236"+
    "\12\0\12\12\20\0\1\12\3\0\22\12\1\237\7\12"+
    "\1\0\1\240\12\0\12\12\20\0\1\12\25\0\1\240"+
    "\10\0\1\240\50\0\22\12\1\222\7\12\1\0\1\224"+
    "\12\0\12\12\20\0\1\12\25\0\1\224\10\0\1\224"+
    "\50\0\14\12\1\241\15\12\14\0\12\12\20\0\1\12"+
    "\3\0\26\12\1\73\3\12\14\0\12\12\20\0\1\12"+
    "\3\0\10\12\1\242\5\12\1\243\13\12\1\244\13\0"+
    "\3\12\1\243\6\12\20\0\1\12\3\0\1\12\1\245"+
    "\30\12\14\0\12\12\20\0\1\12\3\0\20\12\1\246"+
    "\2\12\1\247\6\12\14\0\12\12\20\0\1\12\3\0"+
    "\1\250\31\12\14\0\1\250\11\12\20\0\1\12\3\0"+
    "\10\12\1\251\21\12\14\0\12\12\20\0\1\12\3\0"+
    "\21\12\1\252\10\12\14\0\4\12\1\252\5\12\20\0"+
    "\1\12\3\0\1\253\27\12\1\73\1\12\14\0\1\253"+
    "\11\12\20\0\1\12\3\0\21\12\1\73\10\12\14\0"+
    "\4\12\1\73\5\12\20\0\1\12\3\0\10\12\1\254"+
    "\21\12\1\255\13\0\12\12\20\0\1\12\3\0\2\12"+
    "\1\256\1\257\1\12\1\260\1\12\1\261\3\12\1\262"+
    "\1\263\1\264\5\12\1\265\5\12\1\266\14\0\1\12"+
    "\1\257\1\264\3\12\24\0\1\12\22\0\1\267\66\0"+
    "\1\270\17\0\1\236\1\271\7\0\1\236\50\0\1\272"+
    "\45\0\1\272\72\0\1\146\65\0\1\273\63\0\43\153"+
    "\1\274\40\153\1\0\3\12\1\73\26\12\5\0\1\41"+
    "\5\0\1\41\1\45\1\156\4\45\4\12\15\0\1\41"+
    "\2\0\1\12\3\0\21\12\1\203\10\12\5\0\1\41"+
    "\5\0\1\41\4\45\1\275\1\45\4\12\15\0\1\41"+
    "\2\0\1\12\3\0\14\12\1\241\15\12\5\0\1\41"+
    "\5\0\1\41\6\45\4\12\15\0\1\41\2\0\1\12"+
    "\44\0\1\276\12\0\4\277\30\0\1\160\47\0\4\161"+
    "\101\0\1\300\1\0\1\300\24\0\6\301\40\0\2\301"+
    "\4\0\4\301\30\0\1\160\47\0\4\164\1\166\27\0"+
    "\1\160\47\0\1\164\3\165\1\166\27\0\1\160\47\0"+
    "\4\166\24\0\21\174\1\302\10\174\14\0\4\174\1\302"+
    "\5\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\32\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\13\174\1\303\16\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\23\174\1\304"+
    "\6\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\7\174\1\305\22\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\2\174\1\306"+
    "\1\174\1\307\1\310\1\311\10\174\1\312\1\174\1\313"+
    "\1\314\7\174\14\0\4\174\1\313\5\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\23\12\1\315\6\12"+
    "\14\0\12\12\20\0\1\12\26\0\1\316\60\0\1\317"+
    "\31\12\14\0\1\317\11\12\20\0\1\12\3\0\1\320"+
    "\31\12\14\0\1\320\11\12\20\0\1\12\3\0\13\12"+
    "\1\321\16\12\14\0\12\12\20\0\1\12\3\0\4\12"+
    "\1\120\25\12\14\0\12\12\20\0\1\12\3\0\2\12"+
    "\1\322\27\12\14\0\12\12\20\0\1\12\3\0\22\12"+
    "\1\323\7\12\1\0\1\324\12\0\12\12\20\0\1\12"+
    "\3\0\15\12\1\102\14\12\14\0\2\12\1\102\7\12"+
    "\20\0\1\12\3\0\22\12\1\222\1\325\6\12\1\0"+
    "\1\224\12\0\12\12\20\0\1\12\3\0\13\12\1\326"+
    "\16\12\14\0\12\12\20\0\1\12\3\0\1\327\31\12"+
    "\14\0\1\327\11\12\20\0\1\12\3\0\16\12\1\73"+
    "\13\12\14\0\3\12\1\73\6\12\20\0\1\12\3\0"+
    "\4\12\1\330\25\12\14\0\12\12\20\0\1\12\3\0"+
    "\23\12\1\317\6\12\14\0\12\12\20\0\1\12\3\0"+
    "\3\12\1\331\1\12\1\332\2\12\1\333\11\12\1\334"+
    "\3\12\1\24\3\12\1\335\1\336\12\0\1\12\1\331"+
    "\10\12\20\0\1\12\3\0\13\12\1\73\16\12\14\0"+
    "\12\12\20\0\1\12\3\0\23\12\1\73\6\12\14\0"+
    "\12\12\20\0\1\12\3\0\4\12\1\337\25\12\14\0"+
    "\12\12\20\0\1\12\26\0\1\74\60\0\4\12\1\340"+
    "\25\12\14\0\12\12\20\0\1\12\3\0\2\12\1\341"+
    "\27\12\14\0\12\12\20\0\1\12\3\0\1\342\45\0"+
    "\1\342\35\0\1\12\1\110\30\12\14\0\12\12\20\0"+
    "\1\12\3\0\16\12\1\120\13\12\14\0\3\12\1\120"+
    "\6\12\20\0\1\12\3\0\13\12\1\343\16\12\14\0"+
    "\12\12\20\0\1\12\3\0\13\12\1\344\16\12\14\0"+
    "\12\12\20\0\1\12\3\0\23\12\1\345\6\12\14\0"+
    "\12\12\20\0\1\12\3\0\4\12\1\346\25\12\14\0"+
    "\12\12\20\0\1\12\26\0\1\347\60\0\4\12\1\222"+
    "\25\12\14\0\12\12\20\0\1\12\7\0\1\224\77\0"+
    "\4\12\1\350\25\12\14\0\12\12\20\0\1\12\3\0"+
    "\15\12\1\222\7\12\1\351\4\12\14\0\2\12\1\222"+
    "\7\12\20\0\1\351\3\0\23\12\1\352\6\12\14\0"+
    "\12\12\20\0\1\12\20\0\1\224\7\0\1\353\22\0"+
    "\1\224\27\0\1\353\3\0\13\12\1\354\16\12\14\0"+
    "\12\12\20\0\1\12\3\0\24\12\1\355\5\12\14\0"+
    "\12\12\20\0\1\12\3\0\24\12\1\356\5\12\14\0"+
    "\12\12\20\0\1\12\3\0\23\12\1\354\6\12\14\0"+
    "\12\12\20\0\1\12\3\0\23\12\1\357\6\12\14\0"+
    "\12\12\20\0\1\12\3\0\16\12\1\130\13\12\14\0"+
    "\3\12\1\130\6\12\20\0\1\12\3\0\10\12\1\222"+
    "\21\12\1\224\13\0\12\12\20\0\1\12\3\0\13\12"+
    "\1\102\16\12\14\0\12\12\20\0\1\12\16\0\1\103"+
    "\70\0\13\12\1\360\16\12\14\0\12\12\20\0\1\12"+
    "\3\0\10\12\1\361\21\12\14\0\12\12\20\0\1\12"+
    "\3\0\10\12\1\362\13\12\1\363\5\12\14\0\12\12"+
    "\20\0\1\12\3\0\1\364\31\12\14\0\1\364\11\12"+
    "\20\0\1\12\3\0\10\12\1\365\21\12\14\0\12\12"+
    "\20\0\1\12\3\0\4\12\1\366\25\12\14\0\12\12"+
    "\20\0\1\12\3\0\1\367\31\12\14\0\1\367\11\12"+
    "\20\0\1\12\3\0\21\12\1\370\10\12\14\0\4\12"+
    "\1\370\5\12\20\0\1\12\3\0\31\12\1\266\14\0"+
    "\6\12\24\0\1\12\16\0\1\371\103\0\1\372\74\0"+
    "\1\373\122\0\1\374\67\0\1\375\73\0\43\153\1\274"+
    "\1\376\37\153\1\0\1\317\31\12\5\0\1\41\5\0"+
    "\1\41\1\377\5\45\4\12\15\0\1\41\2\0\1\12"+
    "\57\0\4\277\24\0\6\174\1\u0100\23\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\16\174"+
    "\1\u0101\13\174\14\0\3\174\1\u0101\6\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\23\174\1\u0102\6\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\17\174\1\u0103\12\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\16\174\1\u0104\13\174"+
    "\14\0\3\174\1\u0104\6\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\15\174\1\u0105\14\174\14\0\2\174"+
    "\1\u0105\7\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\10\174\1\u0106\21\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\4\174\1\u0107\25\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\16\174\1\u0108\13\174\14\0\3\174\1\u0108\6\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\4\174"+
    "\1\u0109\25\174\14\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\4\174\1\u010a\25\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\21\12"+
    "\1\u010b\10\12\14\0\4\12\1\u010b\5\12\20\0\1\12"+
    "\24\0\1\u010c\30\0\1\u010c\31\0\30\12\1\73\1\12"+
    "\14\0\12\12\20\0\1\12\3\0\12\12\1\120\17\12"+
    "\14\0\12\12\20\0\1\12\3\0\1\u010d\31\12\14\0"+
    "\1\u010d\11\12\20\0\1\12\3\0\7\12\1\73\22\12"+
    "\14\0\12\12\20\0\1\12\3\0\22\12\1\73\7\12"+
    "\1\0\1\74\12\0\12\12\20\0\1\12\25\0\1\74"+
    "\10\0\1\74\50\0\10\12\1\u010e\21\12\14\0\12\12"+
    "\20\0\1\12\3\0\1\u010f\31\12\14\0\1\u010f\11\12"+
    "\20\0\1\12\3\0\24\12\1\u0110\5\12\14\0\12\12"+
    "\20\0\1\12\3\0\10\12\1\u0111\21\12\14\0\12\12"+
    "\20\0\1\12\3\0\4\12\1\u0112\25\12\14\0\12\12"+
    "\20\0\1\12\3\0\16\12\1\u0113\13\12\14\0\3\12"+
    "\1\u0113\6\12\20\0\1\12\3\0\5\12\1\73\24\12"+
    "\14\0\12\12\20\0\1\12\3\0\26\12\1\u0114\3\12"+
    "\14\0\12\12\20\0\1\12\10\0\1\74\124\0\1\u0115"+
    "\55\0\15\12\1\u0116\14\12\14\0\2\12\1\u0116\7\12"+
    "\20\0\1\12\3\0\1\357\31\12\14\0\1\357\11\12"+
    "\20\0\1\12\3\0\23\12\1\u0117\6\12\14\0\12\12"+
    "\20\0\1\12\16\0\1\74\70\0\4\12\1\u0118\25\12"+
    "\14\0\12\12\20\0\1\12\3\0\24\12\1\u0119\5\12"+
    "\14\0\12\12\20\0\1\12\3\0\1\u011a\3\12\1\u011b"+
    "\25\12\14\0\1\u011a\11\12\20\0\1\12\3\0\21\12"+
    "\1\u011c\10\12\14\0\4\12\1\u011c\5\12\20\0\1\12"+
    "\3\0\1\u011d\3\0\1\u011e\41\0\1\u011d\35\0\22\12"+
    "\1\u011f\7\12\1\0\1\u0120\12\0\12\12\20\0\1\12"+
    "\3\0\1\u0121\31\12\14\0\1\u0121\11\12\20\0\1\12"+
    "\3\0\4\12\1\u0122\25\12\14\0\12\12\20\0\1\12"+
    "\3\0\1\u0123\45\0\1\u0123\35\0\10\12\1\u0124\21\12"+
    "\1\u0125\13\0\12\12\20\0\1\12\3\0\10\12\1\u0126"+
    "\21\12\1\u0127\13\0\12\12\20\0\1\12\3\0\21\12"+
    "\1\u0128\10\12\14\0\4\12\1\u0128\5\12\20\0\1\12"+
    "\3\0\2\12\1\u0129\27\12\14\0\12\12\20\0\1\12"+
    "\3\0\1\u012a\31\12\14\0\1\u012a\11\12\20\0\1\12"+
    "\3\0\21\12\1\u012b\10\12\14\0\4\12\1\u012b\5\12"+
    "\20\0\1\12\3\0\13\12\1\u012c\16\12\14\0\12\12"+
    "\20\0\1\12\3\0\15\12\1\u012d\14\12\14\0\2\12"+
    "\1\u012d\7\12\20\0\1\12\3\0\13\12\1\u012e\16\12"+
    "\14\0\12\12\20\0\1\12\3\0\15\12\1\u012c\14\12"+
    "\14\0\2\12\1\u012c\7\12\20\0\1\12\3\0\23\12"+
    "\1\u012f\6\12\14\0\12\12\20\0\1\12\3\0\14\12"+
    "\1\u0130\15\12\14\0\12\12\20\0\1\12\3\0\1\u0131"+
    "\31\12\14\0\1\u0131\11\12\20\0\1\12\7\0\1\u0132"+
    "\123\0\1\u0133\100\0\1\u0134\30\0\1\u0134\41\0\1\u0125"+
    "\21\0\1\u0125\70\0\1\151\64\0\30\12\1\73\1\12"+
    "\5\0\1\41\5\0\1\41\6\45\4\12\15\0\1\41"+
    "\2\0\1\12\3\0\2\174\1\u0135\22\174\1\u0135\4\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\1\u0135"+
    "\1\174\2\0\1\174\1\u0136\30\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\17\174\1\u0137"+
    "\12\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\31\174\1\u0138\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\16\174\1\u0139\13\174"+
    "\14\0\3\174\1\u0139\6\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\25\174\1\u013a\4\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\1\u013a\1\174\2\0"+
    "\13\174\1\u013b\16\174\14\0\12\174\4\0\1\174\1\0"+
    "\1\174\11\0\2\174\2\0\23\174\1\u013a\6\174\14\0"+
    "\12\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\22\174\1\u0107\7\174\14\0\12\174\4\0\1\174\1\0"+
    "\1\174\11\0\2\174\2\0\20\174\1\u013c\11\174\14\0"+
    "\12\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\21\174\1\u013d\1\u013e\7\174\14\0\4\174\1\u013d\5\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\1\u013f"+
    "\31\12\14\0\1\u013f\11\12\20\0\1\12\3\0\1\u0140"+
    "\45\0\1\u0140\35\0\1\12\1\254\30\12\14\0\12\12"+
    "\20\0\1\12\3\0\15\12\1\u0141\14\12\14\0\2\12"+
    "\1\u0141\7\12\20\0\1\12\3\0\21\12\1\102\10\12"+
    "\14\0\4\12\1\102\5\12\20\0\1\12\3\0\13\12"+
    "\1\222\16\12\14\0\12\12\20\0\1\12\3\0\5\12"+
    "\1\120\24\12\14\0\12\12\20\0\1\12\3\0\2\12"+
    "\1\213\27\12\14\0\12\12\20\0\1\12\3\0\21\12"+
    "\1\u0142\10\12\14\0\4\12\1\u0142\5\12\20\0\1\12"+
    "\3\0\10\12\1\u0143\21\12\1\u0144\13\0\12\12\20\0"+
    "\1\12\13\0\1\u0144\21\0\1\u0144\51\0\3\12\1\323"+
    "\26\12\14\0\1\12\1\323\10\12\20\0\1\12\3\0"+
    "\10\12\1\u0145\21\12\1\u0146\13\0\12\12\20\0\1\12"+
    "\3\0\14\12\1\u0147\15\12\14\0\12\12\20\0\1\12"+
    "\3\0\3\12\1\u0148\26\12\14\0\1\12\1\u0148\10\12"+
    "\20\0\1\12\3\0\15\12\1\u0149\14\12\14\0\2\12"+
    "\1\u0149\7\12\20\0\1\12\3\0\1\u014a\31\12\14\0"+
    "\1\u014a\11\12\20\0\1\12\3\0\5\12\1\u014b\24\12"+
    "\14\0\12\12\20\0\1\12\20\0\1\u014c\32\0\1\u014c"+
    "\33\0\1\u014d\45\0\1\u014d\35\0\17\12\1\u014b\12\12"+
    "\14\0\12\12\20\0\1\12\22\0\1\u014e\64\0\23\12"+
    "\1\102\6\12\14\0\12\12\20\0\1\12\3\0\2\12"+
    "\1\u014f\27\12\14\0\12\12\20\0\1\12\26\0\1\103"+
    "\60\0\2\12\1\73\27\12\14\0\12\12\20\0\1\12"+
    "\5\0\1\74\101\0\21\12\1\u0150\10\12\14\0\4\12"+
    "\1\u0150\5\12\20\0\1\12\24\0\1\u0151\30\0\1\u0151"+
    "\31\0\15\12\1\73\14\12\14\0\2\12\1\73\7\12"+
    "\20\0\1\12\3\0\7\12\1\120\22\12\14\0\12\12"+
    "\20\0\1\12\3\0\22\12\1\u0152\7\12\14\0\12\12"+
    "\20\0\1\12\3\0\31\12\1\u0153\14\0\12\12\20\0"+
    "\1\12\3\0\4\12\1\u012b\25\12\14\0\12\12\20\0"+
    "\1\12\3\0\2\12\1\u0154\27\12\14\0\12\12\20\0"+
    "\1\12\3\0\23\12\1\u0155\6\12\14\0\12\12\20\0"+
    "\1\12\3\0\7\12\1\u0156\22\12\14\0\12\12\20\0"+
    "\1\12\3\0\4\12\1\u0157\25\12\14\0\12\12\20\0"+
    "\1\12\3\0\10\12\1\u0158\21\12\14\0\12\12\20\0"+
    "\1\12\17\0\1\u0159\72\0\1\u015a\43\0\1\u015a\41\0"+
    "\1\u014e\76\0\1\u015b\31\174\14\0\1\u015b\11\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\31\174\1\u015c"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\4\174\1\u015d\25\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\12\174\1\u015e\17\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\4\174\1\u015f\25\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\24\174\1\u0160\5\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\25\174\1\u0161\4\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\1\u0161\1\174\2\0\22\174\1\u0162"+
    "\7\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\2\12\1\222\27\12\14\0\12\12\20\0"+
    "\1\12\5\0\1\224\101\0\24\12\1\206\5\12\14\0"+
    "\12\12\20\0\1\12\3\0\4\12\1\u0163\25\12\14\0"+
    "\12\12\20\0\1\12\3\0\23\12\1\207\6\12\14\0"+
    "\12\12\20\0\1\12\26\0\1\u0164\60\0\16\12\1\u0128"+
    "\13\12\14\0\3\12\1\u0128\6\12\20\0\1\12\21\0"+
    "\1\u0165\32\0\1\u0165\32\0\4\12\1\u0166\25\12\14\0"+
    "\12\12\20\0\1\12\3\0\4\12\1\u0167\25\12\14\0"+
    "\12\12\20\0\1\12\3\0\2\12\1\u0168\27\12\14\0"+
    "\12\12\20\0\1\12\3\0\3\12\1\u0169\26\12\14\0"+
    "\1\12\1\u0169\10\12\20\0\1\12\3\0\1\u016a\31\12"+
    "\14\0\1\u016a\11\12\20\0\1\12\5\0\1\u016b\104\0"+
    "\1\u016c\43\0\1\u016c\34\0\1\u016d\45\0\1\u016d\35\0"+
    "\23\12\1\u016e\6\12\14\0\12\12\20\0\1\12\3\0"+
    "\4\12\1\u016f\25\12\14\0\12\12\20\0\1\12\7\0"+
    "\1\u0170\77\0\22\12\1\u012b\7\12\14\0\12\12\20\0"+
    "\1\12\3\0\31\12\1\u0171\14\0\12\12\20\0\1\12"+
    "\3\0\23\12\1\u0172\6\12\14\0\12\12\20\0\1\12"+
    "\3\0\31\12\1\u0173\14\0\12\12\20\0\1\12\3\0"+
    "\16\12\1\u0174\13\12\14\0\3\12\1\u0174\6\12\20\0"+
    "\1\12\3\0\22\12\1\u0175\7\12\14\0\12\12\20\0"+
    "\1\12\3\0\23\12\1\u012b\6\12\14\0\12\12\20\0"+
    "\1\12\7\0\1\u0176\103\0\1\u0177\77\0\13\174\1\u015f"+
    "\16\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\21\174\1\u0178\10\174\14\0\4\174\1\u0178"+
    "\5\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\21\174\1\u0179\10\174\14\0\4\174\1\u0179\5\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\10\174\1\u017a"+
    "\21\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\22\174\1\u013a\7\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\4\174\1\u0108"+
    "\25\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\4\174\1\u017b\25\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\10\174\1\u017c"+
    "\21\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\1\207\31\12\14\0\1\207\11\12\20\0"+
    "\1\12\5\0\1\u017d\116\0\1\74\32\0\1\74\33\0"+
    "\15\12\1\u017e\14\12\14\0\2\12\1\u017e\7\12\20\0"+
    "\1\12\3\0\31\12\1\u017f\14\0\12\12\20\0\1\12"+
    "\3\0\4\12\1\u0169\25\12\14\0\12\12\20\0\1\12"+
    "\3\0\16\12\1\333\13\12\14\0\3\12\1\333\6\12"+
    "\20\0\1\12\3\0\2\12\1\102\27\12\14\0\12\12"+
    "\20\0\1\12\7\0\1\u016c\115\0\1\335\32\0\1\335"+
    "\34\0\1\103\101\0\4\12\1\71\25\12\14\0\12\12"+
    "\20\0\1\12\34\0\1\u0180\52\0\10\12\1\u0181\21\12"+
    "\14\0\12\12\20\0\1\12\3\0\2\12\1\u0182\27\12"+
    "\14\0\12\12\20\0\1\12\3\0\3\12\1\u012b\26\12"+
    "\14\0\1\12\1\u012b\10\12\20\0\1\12\3\0\17\12"+
    "\1\u0183\12\12\14\0\12\12\20\0\1\12\20\0\1\u0184"+
    "\32\0\1\u0184\33\0\1\u0185\3\174\1\u0186\25\174\14\0"+
    "\1\u0185\11\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\21\174\1\u0187\10\174\14\0\4\174\1\u0187\5\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\4\174"+
    "\1\u013a\25\174\14\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\21\174\1\u013a\10\174\14\0\4\174"+
    "\1\u013a\5\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\16\174\1\u0188\13\174\14\0\3\174\1\u0188\6\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\11\0\1\74"+
    "\74\0\23\12\1\323\6\12\14\0\12\12\20\0\1\12"+
    "\3\0\16\12\1\u0189\13\12\14\0\3\12\1\u0189\6\12"+
    "\20\0\1\12\21\0\1\u018a\32\0\1\u018a\32\0\16\12"+
    "\1\u018b\13\12\14\0\3\12\1\u018b\6\12\20\0\1\12"+
    "\3\0\16\12\1\u018c\13\12\14\0\3\12\1\u018c\6\12"+
    "\20\0\1\12\3\0\1\u018d\31\12\14\0\1\u018d\11\12"+
    "\20\0\1\12\26\0\1\324\60\0\26\174\1\u018e\3\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\2\0\22\174\1\u018f\7\174\1\0\1\u0190\12\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\16\174"+
    "\1\u0191\13\174\14\0\3\174\1\u0191\6\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\15\174\1\u013a\14\174"+
    "\14\0\2\174\1\u013a\7\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\15\12\1\u0192\14\12\14\0\2\12"+
    "\1\u0192\7\12\20\0\1\12\20\0\1\u0193\32\0\1\u0193"+
    "\33\0\15\12\1\u012b\14\12\14\0\2\12\1\u012b\7\12"+
    "\20\0\1\12\3\0\14\12\1\u0194\15\12\14\0\12\12"+
    "\20\0\1\12\3\0\2\12\1\u012c\27\12\14\0\12\12"+
    "\20\0\1\12\3\0\31\174\1\u0195\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\2\0\17\174\1\u0196"+
    "\12\174\14\0\12\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\21\0\1\u0197\64\0\21\174\1\u0198\10\174\14\0"+
    "\4\174\1\u0198\5\174\4\0\1\174\1\0\1\174\11\0"+
    "\2\174\2\0\2\12\1\206\27\12\14\0\12\12\20\0"+
    "\1\12\5\0\1\u0199\101\0\17\12\1\u019a\12\12\14\0"+
    "\12\12\20\0\1\12\3\0\17\174\1\u019b\12\174\14\0"+
    "\12\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\16\174\1\u019c\13\174\14\0\3\174\1\u019c\6\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\20\0\1\u019d\32\0"+
    "\1\u019d\32\0\14\174\1\u019e\15\174\14\0\12\174\4\0"+
    "\1\174\1\0\1\174\11\0\2\174\6\0\1\u019f\77\0"+
    "\10\12\1\u01a0\21\12\1\u01a1\13\0\12\12\20\0\1\12"+
    "\3\0\16\174\1\u01a2\13\174\14\0\3\174\1\u01a2\6\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\15\174"+
    "\1\u01a3\14\174\14\0\2\174\1\u01a3\7\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\17\0\1\u01a4\32\0\1\u01a4"+
    "\33\0\22\174\1\u01a5\7\174\1\0\1\u01a6\12\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\13\12"+
    "\1\u01a7\16\12\14\0\12\12\20\0\1\12\16\0\1\u01a8"+
    "\70\0\22\174\1\u01a9\7\174\14\0\12\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\22\174\1\u01aa\7\174"+
    "\1\0\1\u01ab\12\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\24\0\1\u01ab\10\0\1\u01ab\50\0\6\174"+
    "\1\u0135\23\174\14\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\10\0\1\u01ac\75\0\4\12\1\140\25\12"+
    "\14\0\12\12\20\0\1\12\7\0\1\u01ad\77\0\23\174"+
    "\1\u01ae\6\174\14\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\4\174\1\u01af\25\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\6\0\1\u01b0"+
    "\120\0\1\74\30\0\1\74\31\0\31\174\1\u01b1\14\0"+
    "\12\174\4\0\1\174\1\0\1\174\11\0\2\174\2\0"+
    "\31\174\1\u01b2\14\0\12\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\33\0\1\u01b3\52\0\3\174\1\u01b4\26\174"+
    "\14\0\1\174\1\u01b4\10\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\7\174\1\u01b5\22\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\11\0\1\u01b6"+
    "\74\0\1\u01b7\31\174\14\0\1\u01b7\11\174\4\0\1\174"+
    "\1\0\1\174\11\0\2\174\2\0\4\174\1\u01b8\25\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\6\0\1\u01b9\77\0\23\174\1\u01ba\6\174\14\0\12\174"+
    "\4\0\1\174\1\0\1\174\11\0\2\174\2\0\1\u01bb"+
    "\31\174\14\0\1\u01bb\11\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\1\u01bc\45\0\1\u01bc\35\0\1\u013a"+
    "\31\174\14\0\1\u013a\11\174\4\0\1\174\1\0\1\174"+
    "\11\0\2\174\2\0\3\174\1\u01bd\26\174\14\0\1\174"+
    "\1\u01bd\10\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\5\0\1\u01be\43\0\1\u01be\34\0\4\174\1\u01bf\25\174"+
    "\14\0\12\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\6\0\1\u01c0\77\0\21\174\1\u0135\10\174\14\0\4\174"+
    "\1\u0135\5\174\4\0\1\174\1\0\1\174\11\0\2\174"+
    "\23\0\1\u01ac\30\0\1\u01ac\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28356];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\35\1\1\11\12\1\2\11\2\1\4\11"+
    "\4\1\1\11\4\1\1\11\6\1\1\0\11\1\1\0"+
    "\6\1\1\0\1\1\1\0\13\1\4\0\1\11\1\1"+
    "\1\0\1\11\2\0\4\1\1\0\1\1\3\0\1\1"+
    "\2\0\1\1\1\0\10\1\1\0\21\1\1\0\2\1"+
    "\1\0\6\1\1\0\1\1\1\0\3\1\1\0\10\1"+
    "\1\0\10\1\7\0\1\1\1\0\17\1\1\0\5\1"+
    "\1\0\10\1\2\0\3\1\1\0\4\1\1\0\3\1"+
    "\1\0\15\1\5\0\1\11\15\1\1\0\10\1\1\0"+
    "\7\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\12\1\3\0\13\1\1\0\3\1\1\0"+
    "\1\1\1\0\5\1\3\0\2\1\1\0\7\1\2\0"+
    "\11\1\2\0\5\1\3\0\10\1\2\0\5\1\1\0"+
    "\2\1\1\0\3\1\1\0\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return BRACKET;
            }
          case 26: break;
          case 2: 
            { lexeme = yytext(); return ERROR;
            }
          case 27: break;
          case 3: 
            { lexeme=yytext(); return IDENTIFIER;
            }
          case 28: break;
          case 4: 
            { lexeme=yytext(); return COMPARISON_OPERATOR;
            }
          case 29: break;
          case 5: 
            { lexeme=yytext(); return ARITHMETIC_OPERATOR;
            }
          case 30: break;
          case 6: 
            { lexeme=yytext(); return LOGICAL_OPERATOR;
            }
          case 31: break;
          case 7: 
            { lexeme = yytext(); return POINT;
            }
          case 32: break;
          case 8: 
            { lexeme=yytext(); return INTEGER;
            }
          case 33: break;
          case 9: 
            { lexeme=yytext(); return NEWLINE;
            }
          case 34: break;
          case 10: 
            { lexeme=yytext(); return WHITESPACE;
            }
          case 35: break;
          case 11: 
            { lexeme=yytext(); return SEMICOLON;
            }
          case 36: break;
          case 12: 
            { lexeme=yytext(); return COMMA;
            }
          case 37: break;
          case 13: 
            { lexeme=yytext(); return PARENTHESIS;
            }
          case 38: break;
          case 14: 
            { lexeme=yytext(); return BRACE;
            }
          case 39: break;
          case 15: 
            { lexeme=yytext(); return COMMENT;
            }
          case 40: break;
          case 16: 
            { lexeme=yytext(); return RESERVED_WORD;
            }
          case 41: break;
          case 17: 
            { lexeme=yytext(); return CONTROL_STRUCTURE;
            }
          case 42: break;
          case 18: 
            { lexeme = yytext(); return PHP;
            }
          case 43: break;
          case 19: 
            { lexeme=yytext(); return DOUBLE;
            }
          case 44: break;
          case 20: 
            { lexeme=yytext(); return STRING;
            }
          case 45: break;
          case 21: 
            { lexeme=yytext(); return VARIABLE_ID;
            }
          case 46: break;
          case 22: 
            { lexeme=yytext(); return FLOATING_POINT_NUM;
            }
          case 47: break;
          case 23: 
            { lexeme=yytext(); return OTHERRESERVED_VARIABLE;
            }
          case 48: break;
          case 24: 
            { lexeme=yytext(); return RESERVED_VARIABLE;
            }
          case 49: break;
          case 25: 
            { lexeme=yytext(); return CONSTANT;
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
