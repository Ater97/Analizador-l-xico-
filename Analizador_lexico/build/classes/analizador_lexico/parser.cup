package analizador_lexico;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;

parser code  {: 
    public String ErrorM = "";
    public int ErrorNumber = 0;
    public SymbolTable STp = new SymbolTable();

   public void syntax_error(Symbol cur_token) {  
        ErrorNumber++;
        ErrorM += ErrorNumber + " Sintac Message Line: " + (cur_token.left+1) + " Col: " +(cur_token.right+1) + " Text: " + cur_token.value+"\n";
      try {
          STp.PrintE();
      } catch (IOException ex) {
          Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
      }
   }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
    }
:};
action code {:
        public SymbolTable ST = new SymbolTable();
        public Stack<String> scopes = new Stack<>();

        public String getType (Object obj){
            if (obj instanceof Integer)
                return "int";
            else if (obj instanceof Double)
                return "double";
            else if (obj instanceof Boolean)
                return "bool";
            else if (obj instanceof String)
                {
                    if(SearchSymbolTable(obj.toString()))
                    {
                        ST tmp = ST.getSymbol(obj.toString(),checkScope());
                        return tmp.Type;
                    }
                    return "string";
                }
            else 
                return "n";
            // Integer temp = Integer.parseInt(String.valueOf(obj));
            //System.out.println(" \\ 0.0/ " + obj);
        }
        public String checkScope(){
            if (scopes.empty())
                return "Global";
            return scopes.peek();
        }
        public void newScope(String ambito)
        {
            if(ST.Search(ambito,checkScope()))
                    System.out.println("*Error two scopes with the same name" +ambito +checkScope() );
            else
            System.out.println("New Scope:: " + ambito);
            scopes.push(ambito);
        }
        public void quitScope(){
            if (!scopes.empty())
                    scopes.pop();
        }
        public Boolean SearchSymbolTable(String id)
        {
            System.out.println("SearchSymbolTable:: " + id);
            if (scopes.empty() || scopes.size() <= 0){
                if(ST.Search(id,"Global")){
                    return true;}
                else {
                    return false;}
            }
            for (int i = scopes.size(); i > 0; --i) {
                System.out.println("Current Scope: " + getStackElement(scopes,i));
                if(ST.Search(id,getStackElement(scopes,i)))
                    return true;
            }
            System.out.println("*ERROR the symbol isnt in the Symbol table "+ id);
            return false;
        }

        public static <T> T getStackElement(Stack<T> stack, int index) {
            if(!stack.empty())
            {
                if (index == 0) {
                    return stack.peek();
                }
                T x = stack.pop();
                try {
                    return getStackElement(stack, index - 1);
                } finally {
                    stack.push(x);
                }
            }
            return null;
        }

    :}
//--------------------------------------------------------------------------------
terminal Object     INT, DOUBLE, BOOL, STRING, VOID, CLASS, EXTENDS, IMPLEMENTS, INTERFACE, IF,
                    ELSE, WHILE, FOR, RETURN, BREAK, PRINT, THIS, NEW, NEWARRAY, READINTEGER,
                    READLINE, MALLOC, BOOLCONSTANT, NULL, GETBYTE, SETBYTE,INCLUDE;

terminal Object     Semicolon, LeftParenthesis, RightParenthesis, LeftBracket, RightBracket, Comma,
                    /*Arithmetic_Op,*/ Equal, Comparison_op, LeftBrace, RightBrace, Point, Logical_Op;

terminal Object     plus,Negation,mult,div,mod;

terminal Object     EXCLA, Less, Greater;

terminal Object     ident, STRINGCONSTANT;
terminal Object        INTCONSTANT;
terminal Object     DOUBLECONSTANT;

non terminal Object Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, 
                    InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, 
                    BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant;

non terminal Object ProgramA, FormalsA, ClassDeclC, ClassDeclBb, ClassDeclB, ClassDeclA, InterfaceDeclA, IfStmtA,
                    PrintStmtA, PrintStmtAa, ForStmtA, ActualsA, StmtBlockA, StmtBlockB;


   
precedence left     INT, DOUBLE, BOOL, STRING, VOID, CLASS, EXTENDS, IMPLEMENTS, INTERFACE, IF,
                    ELSE, WHILE, FOR, RETURN, BREAK, PRINT, THIS, NEW, NEWARRAY, READINTEGER,
                    READLINE, MALLOC, BOOLCONSTANT, NULL, GETBYTE, SETBYTE;
precedence left     Semicolon;

precedence left     Equal, LeftParenthesis, RightParenthesis, LeftBracket, RightBracket, Comma,
                    /*Arithmetic_Op,*/ Comparison_op, LeftBrace, RightBrace, Point, Logical_Op;
 
precedence left     STRINGCONSTANT, INTCONSTANT, DOUBLECONSTANT, ident, EXCLA, Negation, Less, Greater;

precedence left     plus,Negation;
precedence left     mult,div,mod;
                    
Program             ::= Decl ProgramA {:ST.DictionaryToPrint();:};
ProgramA            ::= Decl ProgramA
                      |;

Decl                ::= VariableDecl
                      | FunctionDecl
                      | ClassDecl
                      | InterfaceDecl
                      | error Semicolon
                      | error RightBracket {: quitScope();:};

VariableDecl        ::= Variable:v Semicolon {:RESULT = v;:};
Variable            ::= Type:t ident:i {: if(!ST.Search(i.toString(),checkScope())){
                                            RESULT = t; 
                                            ST.Insert(i.toString(),checkScope(),t.toString(),null);}
                                            :};
Type                ::= INT     {: RESULT ="int";:}
                      | DOUBLE  {: RESULT ="double";:}
                      | BOOL    {: RESULT ="bool";:}
                      | STRING  {: RESULT ="string";:}
                      | ident:i {: RESULT = i;:}
                      | Type:t LeftBracket RightBracket{: RESULT = t; quitScope();:}; 
FunctionDecl        ::= Type:t ident:i {:   newScope(i.toString());
                                            if(!ST.Search(i.toString(),checkScope())){
                                                RESULT = i; 
                                                ST.Insert(i.toString(),checkScope(),t.toString(),null);
                                            }
                                            :}LeftParenthesis Formals RightParenthesis StmtBlock 
                      | VOID:t ident:i {: newScope(i.toString());
                                            if(!ST.Search(i.toString(),checkScope())){
                                            RESULT = t; 
                                            ST.Insert(i.toString(),checkScope(),"Void",null);}
                                            :}LeftParenthesis Formals RightParenthesis StmtBlock ;

Formals             ::= Variable:v FormalsA
                      |;
FormalsA            ::= Comma Variable:v FormalsA
                      |;

ClassDecl           ::= CLASS ident:i {:newScope(i.toString());:}{: if(!ST.Search(i.toString(),checkScope())){
                                            ST.Insert(i.toString(),checkScope(),"Class",null);}
                                            :} ClassDeclA ClassDeclB LeftBracket ClassDeclC RightBracket {: quitScope();:};
ClassDeclA          ::= EXTENDS ident:i {: if(!ST.Search(i.toString(),checkScope())){
                                            ST.Insert(i.toString(),checkScope(),"Extends",null);}
                                            :}|;
ClassDeclB          ::= IMPLEMENTS ident:i ClassDeclBb {: if(!ST.Search(i.toString(),checkScope())){ 
                                            ST.Insert(i.toString(),checkScope(),"Implements",null);}
                                            :}|;
ClassDeclBb         ::= Comma ident:i ClassDeclBb |;
ClassDeclC          ::= Field ClassDeclC |;

Field               ::= VariableDecl 
                      | FunctionDecl;

InterfaceDecl       ::= INTERFACE ident:i {:newScope(i.toString());:} LeftBracket InterfaceDeclA RightBracket{: quitScope();:};
InterfaceDeclA      ::= Prototype InterfaceDeclA |;

Prototype           ::= Type ident:i {:newScope(i.toString());:} LeftParenthesis Formals RightParenthesis Semicolon
                      | VOID ident:i {:newScope(i.toString());:}  LeftParenthesis Formals RightParenthesis Semicolon;

StmtBlock           ::= LeftBracket StmtBlockA StmtBlockB RightBracket {: quitScope();:};
StmtBlockA          ::= StmtBlockA  VariableDecl|;
StmtBlockB          ::= Stmt StmtBlockB|;

Stmt                ::= Expr Semicolon
                      | Semicolon
                      | IfStmt
                      | WhileStmt
                      | ForStmt
                      | BreakStmt
                      | ReturnStmt
                      | PrintStmt
                      | StmtBlock;
IfStmt              ::= IF LeftParenthesis Expr RightParenthesis Stmt IfStmtA;
IfStmtA             ::= ELSE Stmt | ;

WhileStmt           ::= WHILE LeftParenthesis Expr RightParenthesis Stmt;

ForStmt             ::= FOR LeftParenthesis ForStmtA Semicolon Expr Semicolon ForStmtA RightParenthesis;
ForStmtA            ::= Expr |;
ReturnStmt          ::= RETURN ForStmtA Semicolon;

BreakStmt           ::= BREAK Semicolon;

PrintStmt           ::= PRINT LeftParenthesis PrintStmtA RightParenthesis Semicolon;
PrintStmtA          ::= Expr PrintStmtAa;
PrintStmtAa         ::= Comma Expr PrintStmtAa | ;

Expr                ::= LValue:i Equal Expr:e {: RESULT = i;
                                                System.out.println(i);
                                                System.out.println(e);
                                                System.out.println("LValue Equal Expr:: " + i + " " + e);
                                        if(SearchSymbolTable(i.toString())){   
                                            ST tmp = ST.getSymbol(i.toString(),checkScope());
                                            getType(e);
                                            System.out.println("Tipo LValue:: "+ i.toString() +" "+ tmp.Type +" Tipo Expr:: " + e.toString() + " " + getType(e));
                                            if(getType(e).equals(tmp.Type)){                  
                                                RESULT = e;
                                                ST.update(i.toString(),checkScope(),e.toString());
                                            }
                                            else{ 
                                                System.out.println("*ERROR wrong types " + i.toString() + " " + e.toString());}
                                            }:}
                      | Constant:c {:RESULT = c;:}
                      | Negation Expr
                      | EXCLA Expr      /*true false*/ {: :}
                      | Expr:e1 Less Expr:e2  /*true false*/ {: if(SearchSymbolTable(e1.toString())){   
                                                    ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    e2 = tmp.Value;
                                                } :}
                      | Expr:e1 Greater Expr:e2 /*true false*/{: if(SearchSymbolTable(e1.toString())){   
                                                    ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    e2 = tmp.Value;
                                                } :}
                      | LValue: i {:RESULT = i;:}
                      | THIS
                      | Call
                      | LeftParenthesis Expr RightParenthesis 
                      | Expr:e1 plus Expr:e2    {:
                                                if(SearchSymbolTable(e1.toString())){   
                                                    ST tmp = ST.getSymbol(e1.toString(),checkScope());
                                                    e1 = tmp.Value;
                                                }
                                                if(SearchSymbolTable(e2.toString())){   
                                                    ST tmp = ST.getSymbol(e2.toString(),checkScope());
                                                    e2 = tmp.Value;
                                                }
                                                if(getType(e1).equals(getType(e2)))
                                                {
                                                    if(e1 == null)
                                                    {
                                                        RESULT = e2;
                                                    }
                                                    if(e2 == null)
                                                    {
                                                        RESULT = e1;
                                                    }
                                                }
                                                

                                                if((getType(e1).equals("string")) && (getType(e2).equals("string"))){
                                                    RESULT = (Object)(e1.toString() + e2.toString());}
                                                else if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {

                                                    System.out.println("plus::" + e1.toString() + " " + e2.toString());
                                                    RESULT = (Object)((Integer.parseInt(String.valueOf(e1))) + ((Integer.parseInt(String.valueOf(e2)))));}
                                                else if ((getType(e1).equals("double")) && (getType(e2).equals("double"))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = (Object)(((Double)e1) + ((Double)e2));}
                                                else{
                                                    RESULT = null;
                                                    System.out.println("UNKONW types " + e1 + " " + e2);
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types " + e1.toString() + " " + e2.toString());
                                                }
                                                }:}
                      | Expr:e1 Negation Expr:e2 {:if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) - ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) - ((Double)e2);
                                                }else{
                                                    RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }:}
                      | Expr:e1 mult Expr:e2    {:if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) * ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double")) && ((getType(e2).equals("int"))||(getType(e2).equals("double"))))) {
                                                    RESULT = ((Double)e1) * ((Double)e2);
                                                }else{
                                                    RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }:}
                      | Expr:e1 div Expr:e2     {:if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) / ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) / ((Double)e2);
                                                }else{
                                                    RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }:}
                      | Expr:e1 mod Expr:e2 }   {:if ((getType(e1).equals("int")) && (getType(e2).equals("int"))) {
                                                    RESULT = ((Integer)e1) % ((Integer)e2);
                                                }else if (((getType(e1).equals("int"))||(getType(e1).equals("double"))) && ((getType(e2).equals("int"))||(getType(e2).equals("double")))) {
                                                    RESULT = ((Double)e1) % ((Double)e2);
                                                }else{
                                                    RESULT = null;
                                                if ((getType(e1) != "n") && (getType(e2) != "n")){
                                                    System.out.println("ERROR wrong types "+ e1 + " " + e2);
                                                }
                                                }:}
                      | Expr Comparison_op Expr
                      | Expr Logical_Op Expr
                      | NEW LeftParenthesis ident:i RightParenthesis {:RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        :}
                      | NEWARRAY LeftParenthesis Expr Comma Type RightParenthesis
                      | READINTEGER LeftParenthesis RightParenthesis
                      | READLINE LeftParenthesis RightParenthesis
                      | MALLOC LeftParenthesis Expr RightParenthesis;

LValue              ::= ident:i     {:RESULT = i;
                                            System.out.println("LValue:: " + i.toString());
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                    :}
                      | Expr:e Point ident:i  {:System.out.println("Expr " + e.toString() +  ". ident " + i.toString());:}
                      | Expr LeftBrace Expr RightBrace;

Call                ::= ident:i LeftParenthesis Actuals RightParenthesis{:RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        :}
                      | Expr:i Point ident LeftParenthesis Actuals RightParenthesis{:RESULT = i;
                                        if(SearchSymbolTable(i.toString()))                     
                                             RESULT = i;
                                        :}
                      | Expr Point LibCall LeftParenthesis Actuals RightParenthesis;

LibCall             ::= GETBYTE LeftParenthesis Expr RightParenthesis
                      | SETBYTE LeftParenthesis Expr Comma Expr RightParenthesis;

Actuals             ::= Expr ActualsA
                      | ;
ActualsA            ::= Comma Expr ActualsA 
                      | ;

Constant            ::= INTCONSTANT:v       {:System.out.println(" \\ INTCONSTANT / "+v);RESULT = v;:}
                      | DOUBLECONSTANT:v    {:/*System.out.println(" \\ DOUBLECONSTANT / "+v);*/RESULT = v;:}
                      | BOOLCONSTANT:v      {:/*System.out.println(" \\ BOOLCONSTANT / "+v);*/RESULT = v;:}
                      | STRINGCONSTANT:v    {:/*System.out.println(" \\ STRINGCONSTANT / "+v);*/RESULT = v;:}
                      | NULL;